
W5300_STM32F429_Loopback_DHCP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008254  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08008404  08008404  00009404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800882c  0800882c  0000a0d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800882c  0800882c  0000982c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008834  08008834  0000a0d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008834  08008834  00009834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008838  08008838  00009838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d0  20000000  0800883c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a0d0  2**0
                  CONTENTS
 10 .bss          000012b8  200000d0  200000d0  0000a0d0  2**2
                  ALLOC
 11 ._user_heap_stack 00018000  20001388  20001388  0000a0d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a0d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012186  00000000  00000000  0000a100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fb8  00000000  00000000  0001c286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001220  00000000  00000000  0001f240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e07  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026502  00000000  00000000  00021267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015a88  00000000  00000000  00047769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e57da  00000000  00000000  0005d1f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001429cb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052cc  00000000  00000000  00142a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  00147cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000d0 	.word	0x200000d0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080083ec 	.word	0x080083ec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000d4 	.word	0x200000d4
 80001ec:	080083ec 	.word	0x080083ec

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the USART3 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFF);
 8000588:	1d39      	adds	r1, r7, #4
 800058a:	23ff      	movs	r3, #255	@ 0xff
 800058c:	2201      	movs	r2, #1
 800058e:	4804      	ldr	r0, [pc, #16]	@ (80005a0 <__io_putchar+0x20>)
 8000590:	f002 fa5e 	bl	8002a50 <HAL_UART_Transmit>

    return ch;
 8000594:	687b      	ldr	r3, [r7, #4]
}
 8000596:	4618      	mov	r0, r3
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000134 	.word	0x20000134

080005a4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a05      	ldr	r2, [pc, #20]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d103      	bne.n	80005be <HAL_TIM_PeriodElapsedCallback+0x1a>
    {
        HAL_IncTick();
 80005b6:	f000 fd39 	bl	800102c <HAL_IncTick>
        repeating_timer_callback();
 80005ba:	f000 faab 	bl	8000b14 <repeating_timer_callback>
    }
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40010000 	.word	0x40010000

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
    uint8_t retval = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	71bb      	strb	r3, [r7, #6]
    uint8_t dhcp_retry = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f000 fcd5 	bl	8000f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f867 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 f9b1 	bl	8000948 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005e6:	f000 f923 	bl	8000830 <MX_USART3_UART_Init>
  MX_FMC_Init();
 80005ea:	f000 f94b 	bl	8000884 <MX_FMC_Init>
  MX_TIM1_Init();
 80005ee:	f000 f8cf 	bl	8000790 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim1);
 80005f2:	4827      	ldr	r0, [pc, #156]	@ (8000690 <main+0xc4>)
 80005f4:	f001 fdb6 	bl	8002164 <HAL_TIM_Base_Start_IT>
    wizchip_reset();
 80005f8:	f006 fe9c 	bl	8007334 <wizchip_reset>
    wizchip_initialize();
 80005fc:	f006 fe6c 	bl	80072d8 <wizchip_initialize>
    wizchip_check();
 8000600:	f006 feb0 	bl	8007364 <wizchip_check>
    HAL_Delay(2000);
 8000604:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000608:	f000 fd30 	bl	800106c <HAL_Delay>

    if (net_info.dhcp == NETINFO_DHCP) // DHCP
 800060c:	4b21      	ldr	r3, [pc, #132]	@ (8000694 <main+0xc8>)
 800060e:	7d9b      	ldrb	r3, [r3, #22]
 8000610:	2b02      	cmp	r3, #2
 8000612:	d101      	bne.n	8000618 <main+0x4c>
    {
        wizchip_dhcp_init();
 8000614:	f000 fa30 	bl	8000a78 <wizchip_dhcp_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
        if (net_info.dhcp == NETINFO_DHCP)
 8000618:	4b1e      	ldr	r3, [pc, #120]	@ (8000694 <main+0xc8>)
 800061a:	7d9b      	ldrb	r3, [r3, #22]
 800061c:	2b02      	cmp	r3, #2
 800061e:	d12c      	bne.n	800067a <main+0xae>
        {
            retval = DHCP_run();
 8000620:	f006 fa9e 	bl	8006b60 <DHCP_run>
 8000624:	4603      	mov	r3, r0
 8000626:	71bb      	strb	r3, [r7, #6]
            if (retval == DHCP_IP_LEASED)
 8000628:	79bb      	ldrb	r3, [r7, #6]
 800062a:	2b04      	cmp	r3, #4
 800062c:	d10a      	bne.n	8000644 <main+0x78>
            {
                if (g_dhcp_get_ip_flag == 0)
 800062e:	4b1a      	ldr	r3, [pc, #104]	@ (8000698 <main+0xcc>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d117      	bne.n	8000666 <main+0x9a>
                {
                    printf(" DHCP success\n");
 8000636:	4819      	ldr	r0, [pc, #100]	@ (800069c <main+0xd0>)
 8000638:	f007 f874 	bl	8007724 <puts>

                    g_dhcp_get_ip_flag = 1;
 800063c:	4b16      	ldr	r3, [pc, #88]	@ (8000698 <main+0xcc>)
 800063e:	2201      	movs	r2, #1
 8000640:	701a      	strb	r2, [r3, #0]
 8000642:	e010      	b.n	8000666 <main+0x9a>
                }
            }
            else if (retval == DHCP_FAILED)
 8000644:	79bb      	ldrb	r3, [r7, #6]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d10d      	bne.n	8000666 <main+0x9a>
            {
                g_dhcp_get_ip_flag = 0;
 800064a:	4b13      	ldr	r3, [pc, #76]	@ (8000698 <main+0xcc>)
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]
                dhcp_retry++;
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	3301      	adds	r3, #1
 8000654:	71fb      	strb	r3, [r7, #7]

                if (dhcp_retry <= DHCP_RETRY_COUNT)
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	2b05      	cmp	r3, #5
 800065a:	d804      	bhi.n	8000666 <main+0x9a>
                {
                    printf(" DHCP timeout occurred and retry %d\n", dhcp_retry);
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	4619      	mov	r1, r3
 8000660:	480f      	ldr	r0, [pc, #60]	@ (80006a0 <main+0xd4>)
 8000662:	f006 fff7 	bl	8007654 <iprintf>
                }
            }

            if (dhcp_retry > DHCP_RETRY_COUNT)
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	2b05      	cmp	r3, #5
 800066a:	d906      	bls.n	800067a <main+0xae>
            {
                printf(" DHCP failed\n");
 800066c:	480d      	ldr	r0, [pc, #52]	@ (80006a4 <main+0xd8>)
 800066e:	f007 f859 	bl	8007724 <puts>

                DHCP_stop();
 8000672:	f006 fb8d 	bl	8006d90 <DHCP_stop>

                while (1)
 8000676:	bf00      	nop
 8000678:	e7fd      	b.n	8000676 <main+0xaa>
//        if ((retval = loopback_tcps(SOCKET_LOOPBACK, g_loopback_buf, PORT_LOOPBACK)) < 0)
//        {
//           printf(" Loopback error : %d\n", retval);
//           while (1);
//        }
        if ((retval = loopback_tcpc(SOCKET_LOOPBACK, g_loopback_buf, dest_ip, PORT_LOOPBACK)) < 0)
 800067a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800067e:	4a0a      	ldr	r2, [pc, #40]	@ (80006a8 <main+0xdc>)
 8000680:	490a      	ldr	r1, [pc, #40]	@ (80006ac <main+0xe0>)
 8000682:	2001      	movs	r0, #1
 8000684:	f002 feae 	bl	80033e4 <loopback_tcpc>
 8000688:	4603      	mov	r3, r0
 800068a:	71bb      	strb	r3, [r7, #6]
        if (net_info.dhcp == NETINFO_DHCP)
 800068c:	e7c4      	b.n	8000618 <main+0x4c>
 800068e:	bf00      	nop
 8000690:	200000ec 	.word	0x200000ec
 8000694:	20000000 	.word	0x20000000
 8000698:	200011cc 	.word	0x200011cc
 800069c:	08008404 	.word	0x08008404
 80006a0:	08008414 	.word	0x08008414
 80006a4:	0800843c 	.word	0x0800843c
 80006a8:	20000018 	.word	0x20000018
 80006ac:	200009cc 	.word	0x200009cc

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b094      	sub	sp, #80	@ 0x50
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0320 	add.w	r3, r7, #32
 80006ba:	2230      	movs	r2, #48	@ 0x30
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f007 f910 	bl	80078e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000788 <SystemClock_Config+0xd8>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006dc:	4a2a      	ldr	r2, [pc, #168]	@ (8000788 <SystemClock_Config+0xd8>)
 80006de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006e4:	4b28      	ldr	r3, [pc, #160]	@ (8000788 <SystemClock_Config+0xd8>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	4b25      	ldr	r3, [pc, #148]	@ (800078c <SystemClock_Config+0xdc>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a24      	ldr	r2, [pc, #144]	@ (800078c <SystemClock_Config+0xdc>)
 80006fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	4b22      	ldr	r3, [pc, #136]	@ (800078c <SystemClock_Config+0xdc>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800070c:	2301      	movs	r3, #1
 800070e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000710:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000714:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000716:	2302      	movs	r3, #2
 8000718:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800071e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000720:	2304      	movs	r3, #4
 8000722:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000724:	23b4      	movs	r3, #180	@ 0xb4
 8000726:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000728:	2302      	movs	r3, #2
 800072a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800072c:	2307      	movs	r3, #7
 800072e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	f107 0320 	add.w	r3, r7, #32
 8000734:	4618      	mov	r0, r3
 8000736:	f000 ffe5 	bl	8001704 <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000740:	f000 fa02 	bl	8000b48 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000744:	f000 ff8e 	bl	8001664 <HAL_PWREx_EnableOverDrive>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800074e:	f000 f9fb 	bl	8000b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000752:	230f      	movs	r3, #15
 8000754:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000756:	2302      	movs	r3, #2
 8000758:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800075e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000762:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000764:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000768:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800076a:	f107 030c 	add.w	r3, r7, #12
 800076e:	2105      	movs	r1, #5
 8000770:	4618      	mov	r0, r3
 8000772:	f001 fa3f 	bl	8001bf4 <HAL_RCC_ClockConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800077c:	f000 f9e4 	bl	8000b48 <Error_Handler>
  }
}
 8000780:	bf00      	nop
 8000782:	3750      	adds	r7, #80	@ 0x50
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000796:	f107 0308 	add.w	r3, r7, #8
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a4:	463b      	mov	r3, r7
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000828 <MX_TIM1_Init+0x98>)
 80007ae:	4a1f      	ldr	r2, [pc, #124]	@ (800082c <MX_TIM1_Init+0x9c>)
 80007b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8999;
 80007b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000828 <MX_TIM1_Init+0x98>)
 80007b4:	f242 3227 	movw	r2, #8999	@ 0x2327
 80007b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000828 <MX_TIM1_Init+0x98>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10-1;
 80007c0:	4b19      	ldr	r3, [pc, #100]	@ (8000828 <MX_TIM1_Init+0x98>)
 80007c2:	2209      	movs	r2, #9
 80007c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c6:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <MX_TIM1_Init+0x98>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007cc:	4b16      	ldr	r3, [pc, #88]	@ (8000828 <MX_TIM1_Init+0x98>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d2:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <MX_TIM1_Init+0x98>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007d8:	4813      	ldr	r0, [pc, #76]	@ (8000828 <MX_TIM1_Init+0x98>)
 80007da:	f001 fc73 	bl	80020c4 <HAL_TIM_Base_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80007e4:	f000 f9b0 	bl	8000b48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	4619      	mov	r1, r3
 80007f4:	480c      	ldr	r0, [pc, #48]	@ (8000828 <MX_TIM1_Init+0x98>)
 80007f6:	f001 fe15 	bl	8002424 <HAL_TIM_ConfigClockSource>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000800:	f000 f9a2 	bl	8000b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000804:	2300      	movs	r3, #0
 8000806:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800080c:	463b      	mov	r3, r7
 800080e:	4619      	mov	r1, r3
 8000810:	4805      	ldr	r0, [pc, #20]	@ (8000828 <MX_TIM1_Init+0x98>)
 8000812:	f002 f83d 	bl	8002890 <HAL_TIMEx_MasterConfigSynchronization>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800081c:	f000 f994 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	3718      	adds	r7, #24
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200000ec 	.word	0x200000ec
 800082c:	40010000 	.word	0x40010000

08000830 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000834:	4b11      	ldr	r3, [pc, #68]	@ (800087c <MX_USART3_UART_Init+0x4c>)
 8000836:	4a12      	ldr	r2, [pc, #72]	@ (8000880 <MX_USART3_UART_Init+0x50>)
 8000838:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800083a:	4b10      	ldr	r3, [pc, #64]	@ (800087c <MX_USART3_UART_Init+0x4c>)
 800083c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000840:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000842:	4b0e      	ldr	r3, [pc, #56]	@ (800087c <MX_USART3_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000848:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <MX_USART3_UART_Init+0x4c>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	@ (800087c <MX_USART3_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000854:	4b09      	ldr	r3, [pc, #36]	@ (800087c <MX_USART3_UART_Init+0x4c>)
 8000856:	220c      	movs	r2, #12
 8000858:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085a:	4b08      	ldr	r3, [pc, #32]	@ (800087c <MX_USART3_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000860:	4b06      	ldr	r3, [pc, #24]	@ (800087c <MX_USART3_UART_Init+0x4c>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	@ (800087c <MX_USART3_UART_Init+0x4c>)
 8000868:	f002 f8a2 	bl	80029b0 <HAL_UART_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000872:	f000 f969 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000134 	.word	0x20000134
 8000880:	40004800 	.word	0x40004800

08000884 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b088      	sub	sp, #32
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
 8000898:	615a      	str	r2, [r3, #20]
 800089a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800089c:	4b28      	ldr	r3, [pc, #160]	@ (8000940 <MX_FMC_Init+0xbc>)
 800089e:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 80008a2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80008a4:	4b26      	ldr	r3, [pc, #152]	@ (8000940 <MX_FMC_Init+0xbc>)
 80008a6:	4a27      	ldr	r2, [pc, #156]	@ (8000944 <MX_FMC_Init+0xc0>)
 80008a8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80008aa:	4b25      	ldr	r3, [pc, #148]	@ (8000940 <MX_FMC_Init+0xbc>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80008b0:	4b23      	ldr	r3, [pc, #140]	@ (8000940 <MX_FMC_Init+0xbc>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80008b6:	4b22      	ldr	r3, [pc, #136]	@ (8000940 <MX_FMC_Init+0xbc>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 80008bc:	4b20      	ldr	r3, [pc, #128]	@ (8000940 <MX_FMC_Init+0xbc>)
 80008be:	2200      	movs	r2, #0
 80008c0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80008c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000940 <MX_FMC_Init+0xbc>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80008c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000940 <MX_FMC_Init+0xbc>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FMC_WRAP_MODE_DISABLE;
 80008ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000940 <MX_FMC_Init+0xbc>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80008d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000940 <MX_FMC_Init+0xbc>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80008da:	4b19      	ldr	r3, [pc, #100]	@ (8000940 <MX_FMC_Init+0xbc>)
 80008dc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80008e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80008e2:	4b17      	ldr	r3, [pc, #92]	@ (8000940 <MX_FMC_Init+0xbc>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80008e8:	4b15      	ldr	r3, [pc, #84]	@ (8000940 <MX_FMC_Init+0xbc>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80008ee:	4b14      	ldr	r3, [pc, #80]	@ (8000940 <MX_FMC_Init+0xbc>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80008f4:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <MX_FMC_Init+0xbc>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80008fa:	4b11      	ldr	r3, [pc, #68]	@ (8000940 <MX_FMC_Init+0xbc>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000900:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <MX_FMC_Init+0xbc>)
 8000902:	2200      	movs	r2, #0
 8000904:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000906:	230f      	movs	r3, #15
 8000908:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800090a:	230f      	movs	r3, #15
 800090c:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800090e:	23ff      	movs	r3, #255	@ 0xff
 8000910:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000912:	230f      	movs	r3, #15
 8000914:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000916:	2310      	movs	r3, #16
 8000918:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800091a:	2311      	movs	r3, #17
 800091c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2200      	movs	r2, #0
 8000926:	4619      	mov	r1, r3
 8000928:	4805      	ldr	r0, [pc, #20]	@ (8000940 <MX_FMC_Init+0xbc>)
 800092a:	f001 fb83 	bl	8002034 <HAL_SRAM_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 8000934:	f000 f908 	bl	8000b48 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000938:	bf00      	nop
 800093a:	3720      	adds	r7, #32
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	2000017c 	.word	0x2000017c
 8000944:	a0000104 	.word	0xa0000104

08000948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08c      	sub	sp, #48	@ 0x30
 800094c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
 800095c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	61bb      	str	r3, [r7, #24]
 8000962:	4b42      	ldr	r3, [pc, #264]	@ (8000a6c <MX_GPIO_Init+0x124>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	4a41      	ldr	r2, [pc, #260]	@ (8000a6c <MX_GPIO_Init+0x124>)
 8000968:	f043 0310 	orr.w	r3, r3, #16
 800096c:	6313      	str	r3, [r2, #48]	@ 0x30
 800096e:	4b3f      	ldr	r3, [pc, #252]	@ (8000a6c <MX_GPIO_Init+0x124>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	f003 0310 	and.w	r3, r3, #16
 8000976:	61bb      	str	r3, [r7, #24]
 8000978:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
 800097e:	4b3b      	ldr	r3, [pc, #236]	@ (8000a6c <MX_GPIO_Init+0x124>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	4a3a      	ldr	r2, [pc, #232]	@ (8000a6c <MX_GPIO_Init+0x124>)
 8000984:	f043 0304 	orr.w	r3, r3, #4
 8000988:	6313      	str	r3, [r2, #48]	@ 0x30
 800098a:	4b38      	ldr	r3, [pc, #224]	@ (8000a6c <MX_GPIO_Init+0x124>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	f003 0304 	and.w	r3, r3, #4
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	4b34      	ldr	r3, [pc, #208]	@ (8000a6c <MX_GPIO_Init+0x124>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	4a33      	ldr	r2, [pc, #204]	@ (8000a6c <MX_GPIO_Init+0x124>)
 80009a0:	f043 0320 	orr.w	r3, r3, #32
 80009a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a6:	4b31      	ldr	r3, [pc, #196]	@ (8000a6c <MX_GPIO_Init+0x124>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	f003 0320 	and.w	r3, r3, #32
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	4b2d      	ldr	r3, [pc, #180]	@ (8000a6c <MX_GPIO_Init+0x124>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	4a2c      	ldr	r2, [pc, #176]	@ (8000a6c <MX_GPIO_Init+0x124>)
 80009bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c2:	4b2a      	ldr	r3, [pc, #168]	@ (8000a6c <MX_GPIO_Init+0x124>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	4b26      	ldr	r3, [pc, #152]	@ (8000a6c <MX_GPIO_Init+0x124>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a25      	ldr	r2, [pc, #148]	@ (8000a6c <MX_GPIO_Init+0x124>)
 80009d8:	f043 0308 	orr.w	r3, r3, #8
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b23      	ldr	r3, [pc, #140]	@ (8000a6c <MX_GPIO_Init+0x124>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f003 0308 	and.w	r3, r3, #8
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	4b1f      	ldr	r3, [pc, #124]	@ (8000a6c <MX_GPIO_Init+0x124>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	4a1e      	ldr	r2, [pc, #120]	@ (8000a6c <MX_GPIO_Init+0x124>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fa:	4b1c      	ldr	r3, [pc, #112]	@ (8000a6c <MX_GPIO_Init+0x124>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5x00_RST_GPIO_Port, W5x00_RST_Pin, GPIO_PIN_SET);
 8000a06:	2201      	movs	r2, #1
 8000a08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a0c:	4818      	ldr	r0, [pc, #96]	@ (8000a70 <MX_GPIO_Init+0x128>)
 8000a0e:	f000 fe0f 	bl	8001630 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : W5x00_BRDY0_Pin W5x00_BRDY1_Pin W5x00_BRDY2_Pin W5x00_BRDY3_Pin */
  GPIO_InitStruct.Pin = W5x00_BRDY0_Pin|W5x00_BRDY1_Pin|W5x00_BRDY2_Pin|W5x00_BRDY3_Pin;
 8000a12:	233c      	movs	r3, #60	@ 0x3c
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a16:	2300      	movs	r3, #0
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4813      	ldr	r0, [pc, #76]	@ (8000a74 <MX_GPIO_Init+0x12c>)
 8000a26:	f000 fc57 	bl	80012d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5x00_INT_Pin */
  GPIO_InitStruct.Pin = W5x00_INT_Pin;
 8000a2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(W5x00_INT_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480c      	ldr	r0, [pc, #48]	@ (8000a70 <MX_GPIO_Init+0x128>)
 8000a40:	f000 fc4a 	bl	80012d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5x00_RST_Pin */
  GPIO_InitStruct.Pin = W5x00_RST_Pin;
 8000a44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(W5x00_RST_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4804      	ldr	r0, [pc, #16]	@ (8000a70 <MX_GPIO_Init+0x128>)
 8000a5e:	f000 fc3b 	bl	80012d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a62:	bf00      	nop
 8000a64:	3730      	adds	r7, #48	@ 0x30
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020800 	.word	0x40020800
 8000a74:	40021000 	.word	0x40021000

08000a78 <wizchip_dhcp_init>:

/* USER CODE BEGIN 4 */
static void wizchip_dhcp_init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
    printf(" DHCP client running\n");
 8000a7c:	4806      	ldr	r0, [pc, #24]	@ (8000a98 <wizchip_dhcp_init+0x20>)
 8000a7e:	f006 fe51 	bl	8007724 <puts>

    DHCP_init(SOCKET_DHCP, g_eth_buf);
 8000a82:	4906      	ldr	r1, [pc, #24]	@ (8000a9c <wizchip_dhcp_init+0x24>)
 8000a84:	2000      	movs	r0, #0
 8000a86:	f006 fa2f 	bl	8006ee8 <DHCP_init>

    reg_dhcp_cbfunc(wizchip_dhcp_assign, wizchip_dhcp_assign, wizchip_dhcp_conflict);
 8000a8a:	4a05      	ldr	r2, [pc, #20]	@ (8000aa0 <wizchip_dhcp_init+0x28>)
 8000a8c:	4905      	ldr	r1, [pc, #20]	@ (8000aa4 <wizchip_dhcp_init+0x2c>)
 8000a8e:	4805      	ldr	r0, [pc, #20]	@ (8000aa4 <wizchip_dhcp_init+0x2c>)
 8000a90:	f004 ff5a 	bl	8005948 <reg_dhcp_cbfunc>
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	0800844c 	.word	0x0800844c
 8000a9c:	200001cc 	.word	0x200001cc
 8000aa0:	08000b01 	.word	0x08000b01
 8000aa4:	08000aa9 	.word	0x08000aa9

08000aa8 <wizchip_dhcp_assign>:

static void wizchip_dhcp_assign(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
    getIPfromDHCP(net_info.ip);
 8000aac:	480e      	ldr	r0, [pc, #56]	@ (8000ae8 <wizchip_dhcp_assign+0x40>)
 8000aae:	f006 fb33 	bl	8007118 <getIPfromDHCP>
    getGWfromDHCP(net_info.gw);
 8000ab2:	480e      	ldr	r0, [pc, #56]	@ (8000aec <wizchip_dhcp_assign+0x44>)
 8000ab4:	f006 fb50 	bl	8007158 <getGWfromDHCP>
    getSNfromDHCP(net_info.sn);
 8000ab8:	480d      	ldr	r0, [pc, #52]	@ (8000af0 <wizchip_dhcp_assign+0x48>)
 8000aba:	f006 fb6d 	bl	8007198 <getSNfromDHCP>
    getDNSfromDHCP(net_info.dns);
 8000abe:	480d      	ldr	r0, [pc, #52]	@ (8000af4 <wizchip_dhcp_assign+0x4c>)
 8000ac0:	f006 fb8a 	bl	80071d8 <getDNSfromDHCP>

    net_info.dhcp = NETINFO_DHCP;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <wizchip_dhcp_assign+0x50>)
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	759a      	strb	r2, [r3, #22]

    /* Network initialize */
    wizchip_network_initialize(&net_info);
 8000aca:	480b      	ldr	r0, [pc, #44]	@ (8000af8 <wizchip_dhcp_assign+0x50>)
 8000acc:	f006 fc51 	bl	8007372 <wizchip_network_initialize>
    wizchip_network_information(&net_info);
 8000ad0:	4809      	ldr	r0, [pc, #36]	@ (8000af8 <wizchip_dhcp_assign+0x50>)
 8000ad2:	f006 fc61 	bl	8007398 <wizchip_network_information>
    printf(" DHCP leased time : %ld seconds\n", getDHCPLeasetime());
 8000ad6:	f006 fb9f 	bl	8007218 <getDHCPLeasetime>
 8000ada:	4603      	mov	r3, r0
 8000adc:	4619      	mov	r1, r3
 8000ade:	4807      	ldr	r0, [pc, #28]	@ (8000afc <wizchip_dhcp_assign+0x54>)
 8000ae0:	f006 fdb8 	bl	8007654 <iprintf>
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000006 	.word	0x20000006
 8000aec:	2000000e 	.word	0x2000000e
 8000af0:	2000000a 	.word	0x2000000a
 8000af4:	20000012 	.word	0x20000012
 8000af8:	20000000 	.word	0x20000000
 8000afc:	08008464 	.word	0x08008464

08000b00 <wizchip_dhcp_conflict>:

static void wizchip_dhcp_conflict(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
    printf(" Conflict IP from DHCP\n");
 8000b04:	4802      	ldr	r0, [pc, #8]	@ (8000b10 <wizchip_dhcp_conflict+0x10>)
 8000b06:	f006 fe0d 	bl	8007724 <puts>

    // halt or reset or any...
    while (1)
 8000b0a:	bf00      	nop
 8000b0c:	e7fd      	b.n	8000b0a <wizchip_dhcp_conflict+0xa>
 8000b0e:	bf00      	nop
 8000b10:	08008488 	.word	0x08008488

08000b14 <repeating_timer_callback>:
        ; // this example is halt.
}
static void repeating_timer_callback(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
    g_msec_cnt++;
 8000b18:	4b0a      	ldr	r3, [pc, #40]	@ (8000b44 <repeating_timer_callback+0x30>)
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	3301      	adds	r3, #1
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	4b08      	ldr	r3, [pc, #32]	@ (8000b44 <repeating_timer_callback+0x30>)
 8000b24:	801a      	strh	r2, [r3, #0]
    if (g_msec_cnt >= 1000 - 1)
 8000b26:	4b07      	ldr	r3, [pc, #28]	@ (8000b44 <repeating_timer_callback+0x30>)
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	f240 32e6 	movw	r2, #998	@ 0x3e6
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d904      	bls.n	8000b3e <repeating_timer_callback+0x2a>
    {
        g_msec_cnt = 0;
 8000b34:	4b03      	ldr	r3, [pc, #12]	@ (8000b44 <repeating_timer_callback+0x30>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	801a      	strh	r2, [r3, #0]

        DHCP_time_handler();
 8000b3a:	f006 fadf 	bl	80070fc <DHCP_time_handler>
    }
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200011ce 	.word	0x200011ce

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <Error_Handler+0x8>

08000b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ba0 <HAL_MspInit+0x4c>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b62:	4a0f      	ldr	r2, [pc, #60]	@ (8000ba0 <HAL_MspInit+0x4c>)
 8000b64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba0 <HAL_MspInit+0x4c>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
 8000b7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <HAL_MspInit+0x4c>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7e:	4a08      	ldr	r2, [pc, #32]	@ (8000ba0 <HAL_MspInit+0x4c>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b86:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <HAL_MspInit+0x4c>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	40023800 	.word	0x40023800

08000ba4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0e      	ldr	r2, [pc, #56]	@ (8000bec <HAL_TIM_Base_MspInit+0x48>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d115      	bne.n	8000be2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf0 <HAL_TIM_Base_MspInit+0x4c>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bbe:	4a0c      	ldr	r2, [pc, #48]	@ (8000bf0 <HAL_TIM_Base_MspInit+0x4c>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf0 <HAL_TIM_Base_MspInit+0x4c>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2019      	movs	r0, #25
 8000bd8:	f000 fb47 	bl	800126a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000bdc:	2019      	movs	r0, #25
 8000bde:	f000 fb60 	bl	80012a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000be2:	bf00      	nop
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40010000 	.word	0x40010000
 8000bf0:	40023800 	.word	0x40023800

08000bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	@ 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a19      	ldr	r2, [pc, #100]	@ (8000c78 <HAL_UART_MspInit+0x84>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d12c      	bne.n	8000c70 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	4b18      	ldr	r3, [pc, #96]	@ (8000c7c <HAL_UART_MspInit+0x88>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1e:	4a17      	ldr	r2, [pc, #92]	@ (8000c7c <HAL_UART_MspInit+0x88>)
 8000c20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c26:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <HAL_UART_MspInit+0x88>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <HAL_UART_MspInit+0x88>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	4a10      	ldr	r2, [pc, #64]	@ (8000c7c <HAL_UART_MspInit+0x88>)
 8000c3c:	f043 0304 	orr.w	r3, r3, #4
 8000c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c42:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <HAL_UART_MspInit+0x88>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	f003 0304 	and.w	r3, r3, #4
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c4e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c60:	2307      	movs	r3, #7
 8000c62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4805      	ldr	r0, [pc, #20]	@ (8000c80 <HAL_UART_MspInit+0x8c>)
 8000c6c:	f000 fb34 	bl	80012d8 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000c70:	bf00      	nop
 8000c72:	3728      	adds	r7, #40	@ 0x28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40004800 	.word	0x40004800
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020800 	.word	0x40020800

08000c84 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000c98:	4b24      	ldr	r3, [pc, #144]	@ (8000d2c <HAL_FMC_MspInit+0xa8>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d141      	bne.n	8000d24 <HAL_FMC_MspInit+0xa0>
    return;
  }
  FMC_Initialized = 1;
 8000ca0:	4b22      	ldr	r3, [pc, #136]	@ (8000d2c <HAL_FMC_MspInit+0xa8>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	603b      	str	r3, [r7, #0]
 8000caa:	4b21      	ldr	r3, [pc, #132]	@ (8000d30 <HAL_FMC_MspInit+0xac>)
 8000cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cae:	4a20      	ldr	r2, [pc, #128]	@ (8000d30 <HAL_FMC_MspInit+0xac>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6393      	str	r3, [r2, #56]	@ 0x38
 8000cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d30 <HAL_FMC_MspInit+0xac>)
 8000cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000cc2:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 8000cc6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cd4:	230c      	movs	r3, #12
 8000cd6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4815      	ldr	r0, [pc, #84]	@ (8000d34 <HAL_FMC_MspInit+0xb0>)
 8000cde:	f000 fafb 	bl	80012d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000ce2:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8000ce6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cf4:	230c      	movs	r3, #12
 8000cf6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	480e      	ldr	r0, [pc, #56]	@ (8000d38 <HAL_FMC_MspInit+0xb4>)
 8000cfe:	f000 faeb 	bl	80012d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8000d02:	f24c 03b3 	movw	r3, #49331	@ 0xc0b3
 8000d06:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d14:	230c      	movs	r3, #12
 8000d16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4807      	ldr	r0, [pc, #28]	@ (8000d3c <HAL_FMC_MspInit+0xb8>)
 8000d1e:	f000 fadb 	bl	80012d8 <HAL_GPIO_Init>
 8000d22:	e000      	b.n	8000d26 <HAL_FMC_MspInit+0xa2>
    return;
 8000d24:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	200011d0 	.word	0x200011d0
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40021400 	.word	0x40021400
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	40020c00 	.word	0x40020c00

08000d40 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000d48:	f7ff ff9c 	bl	8000c84 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <NMI_Handler+0x4>

08000d5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <HardFault_Handler+0x4>

08000d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <MemManage_Handler+0x4>

08000d6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <BusFault_Handler+0x4>

08000d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <UsageFault_Handler+0x4>

08000d7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000daa:	f000 f93f 	bl	800102c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000db8:	4802      	ldr	r0, [pc, #8]	@ (8000dc4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000dba:	f001 fa43 	bl	8002244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200000ec 	.word	0x200000ec

08000dc8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	e00a      	b.n	8000df0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dda:	f3af 8000 	nop.w
 8000dde:	4601      	mov	r1, r0
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	1c5a      	adds	r2, r3, #1
 8000de4:	60ba      	str	r2, [r7, #8]
 8000de6:	b2ca      	uxtb	r2, r1
 8000de8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	3301      	adds	r3, #1
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	697a      	ldr	r2, [r7, #20]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	dbf0      	blt.n	8000dda <_read+0x12>
  }

  return len;
 8000df8:	687b      	ldr	r3, [r7, #4]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b086      	sub	sp, #24
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	60f8      	str	r0, [r7, #12]
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
 8000e12:	e009      	b.n	8000e28 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	1c5a      	adds	r2, r3, #1
 8000e18:	60ba      	str	r2, [r7, #8]
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fbaf 	bl	8000580 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	3301      	adds	r3, #1
 8000e26:	617b      	str	r3, [r7, #20]
 8000e28:	697a      	ldr	r2, [r7, #20]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	dbf1      	blt.n	8000e14 <_write+0x12>
  }
  return len;
 8000e30:	687b      	ldr	r3, [r7, #4]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <_close>:

int _close(int file)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
 8000e5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e62:	605a      	str	r2, [r3, #4]
  return 0;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <_isatty>:

int _isatty(int file)
{
 8000e72:	b480      	push	{r7}
 8000e74:	b083      	sub	sp, #12
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e7a:	2301      	movs	r3, #1
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3714      	adds	r7, #20
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
	...

08000ea4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eac:	4a14      	ldr	r2, [pc, #80]	@ (8000f00 <_sbrk+0x5c>)
 8000eae:	4b15      	ldr	r3, [pc, #84]	@ (8000f04 <_sbrk+0x60>)
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb8:	4b13      	ldr	r3, [pc, #76]	@ (8000f08 <_sbrk+0x64>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d102      	bne.n	8000ec6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	@ (8000f08 <_sbrk+0x64>)
 8000ec2:	4a12      	ldr	r2, [pc, #72]	@ (8000f0c <_sbrk+0x68>)
 8000ec4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ec6:	4b10      	ldr	r3, [pc, #64]	@ (8000f08 <_sbrk+0x64>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d207      	bcs.n	8000ee4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed4:	f006 fd54 	bl	8007980 <__errno>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	220c      	movs	r2, #12
 8000edc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	e009      	b.n	8000ef8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee4:	4b08      	ldr	r3, [pc, #32]	@ (8000f08 <_sbrk+0x64>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eea:	4b07      	ldr	r3, [pc, #28]	@ (8000f08 <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	4a05      	ldr	r2, [pc, #20]	@ (8000f08 <_sbrk+0x64>)
 8000ef4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20030000 	.word	0x20030000
 8000f04:	00008000 	.word	0x00008000
 8000f08:	200011d4 	.word	0x200011d4
 8000f0c:	20001388 	.word	0x20001388

08000f10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <SystemInit+0x20>)
 8000f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f1a:	4a05      	ldr	r2, [pc, #20]	@ (8000f30 <SystemInit+0x20>)
 8000f1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f6c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f38:	f7ff ffea 	bl	8000f10 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f3c:	480c      	ldr	r0, [pc, #48]	@ (8000f70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f3e:	490d      	ldr	r1, [pc, #52]	@ (8000f74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f40:	4a0d      	ldr	r2, [pc, #52]	@ (8000f78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f44:	e002      	b.n	8000f4c <LoopCopyDataInit>

08000f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4a:	3304      	adds	r3, #4

08000f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f50:	d3f9      	bcc.n	8000f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f52:	4a0a      	ldr	r2, [pc, #40]	@ (8000f7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f54:	4c0a      	ldr	r4, [pc, #40]	@ (8000f80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f58:	e001      	b.n	8000f5e <LoopFillZerobss>

08000f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f5c:	3204      	adds	r2, #4

08000f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f60:	d3fb      	bcc.n	8000f5a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f62:	f006 fd13 	bl	800798c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f66:	f7ff fb31 	bl	80005cc <main>
  bx  lr    
 8000f6a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f6c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f74:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8000f78:	0800883c 	.word	0x0800883c
  ldr r2, =_sbss
 8000f7c:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8000f80:	20001388 	.word	0x20001388

08000f84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f84:	e7fe      	b.n	8000f84 <ADC_IRQHandler>
	...

08000f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc8 <HAL_Init+0x40>)
 8000f92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f98:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc8 <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc8 <HAL_Init+0x40>)
 8000f9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa4:	4b08      	ldr	r3, [pc, #32]	@ (8000fc8 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a07      	ldr	r2, [pc, #28]	@ (8000fc8 <HAL_Init+0x40>)
 8000faa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb0:	2003      	movs	r0, #3
 8000fb2:	f000 f94f 	bl	8001254 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f000 f808 	bl	8000fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fbc:	f7ff fdca 	bl	8000b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023c00 	.word	0x40023c00

08000fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd4:	4b12      	ldr	r3, [pc, #72]	@ (8001020 <HAL_InitTick+0x54>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b12      	ldr	r3, [pc, #72]	@ (8001024 <HAL_InitTick+0x58>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 f967 	bl	80012be <HAL_SYSTICK_Config>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00e      	b.n	8001018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b0f      	cmp	r3, #15
 8000ffe:	d80a      	bhi.n	8001016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001000:	2200      	movs	r2, #0
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	f000 f92f 	bl	800126a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800100c:	4a06      	ldr	r2, [pc, #24]	@ (8001028 <HAL_InitTick+0x5c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	e000      	b.n	8001018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	2000001c 	.word	0x2000001c
 8001024:	20000024 	.word	0x20000024
 8001028:	20000020 	.word	0x20000020

0800102c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001030:	4b06      	ldr	r3, [pc, #24]	@ (800104c <HAL_IncTick+0x20>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <HAL_IncTick+0x24>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	4a04      	ldr	r2, [pc, #16]	@ (8001050 <HAL_IncTick+0x24>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000024 	.word	0x20000024
 8001050:	200011d8 	.word	0x200011d8

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	@ (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	200011d8 	.word	0x200011d8

0800106c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001074:	f7ff ffee 	bl	8001054 <HAL_GetTick>
 8001078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001084:	d005      	beq.n	8001092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001086:	4b0a      	ldr	r3, [pc, #40]	@ (80010b0 <HAL_Delay+0x44>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4413      	add	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001092:	bf00      	nop
 8001094:	f7ff ffde 	bl	8001054 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d8f7      	bhi.n	8001094 <HAL_Delay+0x28>
  {
  }
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000024 	.word	0x20000024

080010b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c4:	4b0c      	ldr	r3, [pc, #48]	@ (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010d0:	4013      	ands	r3, r2
 80010d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e6:	4a04      	ldr	r2, [pc, #16]	@ (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	60d3      	str	r3, [r2, #12]
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001100:	4b04      	ldr	r3, [pc, #16]	@ (8001114 <__NVIC_GetPriorityGrouping+0x18>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	0a1b      	lsrs	r3, r3, #8
 8001106:	f003 0307 	and.w	r3, r3, #7
}
 800110a:	4618      	mov	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	2b00      	cmp	r3, #0
 8001128:	db0b      	blt.n	8001142 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	f003 021f 	and.w	r2, r3, #31
 8001130:	4907      	ldr	r1, [pc, #28]	@ (8001150 <__NVIC_EnableIRQ+0x38>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	095b      	lsrs	r3, r3, #5
 8001138:	2001      	movs	r0, #1
 800113a:	fa00 f202 	lsl.w	r2, r0, r2
 800113e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000e100 	.word	0xe000e100

08001154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	6039      	str	r1, [r7, #0]
 800115e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	2b00      	cmp	r3, #0
 8001166:	db0a      	blt.n	800117e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	b2da      	uxtb	r2, r3
 800116c:	490c      	ldr	r1, [pc, #48]	@ (80011a0 <__NVIC_SetPriority+0x4c>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	0112      	lsls	r2, r2, #4
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	440b      	add	r3, r1
 8001178:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800117c:	e00a      	b.n	8001194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4908      	ldr	r1, [pc, #32]	@ (80011a4 <__NVIC_SetPriority+0x50>)
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	3b04      	subs	r3, #4
 800118c:	0112      	lsls	r2, r2, #4
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	440b      	add	r3, r1
 8001192:	761a      	strb	r2, [r3, #24]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000e100 	.word	0xe000e100
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b089      	sub	sp, #36	@ 0x24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f1c3 0307 	rsb	r3, r3, #7
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	bf28      	it	cs
 80011c6:	2304      	movcs	r3, #4
 80011c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3304      	adds	r3, #4
 80011ce:	2b06      	cmp	r3, #6
 80011d0:	d902      	bls.n	80011d8 <NVIC_EncodePriority+0x30>
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3b03      	subs	r3, #3
 80011d6:	e000      	b.n	80011da <NVIC_EncodePriority+0x32>
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	f04f 32ff 	mov.w	r2, #4294967295
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43da      	mvns	r2, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	401a      	ands	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f0:	f04f 31ff 	mov.w	r1, #4294967295
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa01 f303 	lsl.w	r3, r1, r3
 80011fa:	43d9      	mvns	r1, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	4313      	orrs	r3, r2
         );
}
 8001202:	4618      	mov	r0, r3
 8001204:	3724      	adds	r7, #36	@ 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001220:	d301      	bcc.n	8001226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001222:	2301      	movs	r3, #1
 8001224:	e00f      	b.n	8001246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001226:	4a0a      	ldr	r2, [pc, #40]	@ (8001250 <SysTick_Config+0x40>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800122e:	210f      	movs	r1, #15
 8001230:	f04f 30ff 	mov.w	r0, #4294967295
 8001234:	f7ff ff8e 	bl	8001154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001238:	4b05      	ldr	r3, [pc, #20]	@ (8001250 <SysTick_Config+0x40>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123e:	4b04      	ldr	r3, [pc, #16]	@ (8001250 <SysTick_Config+0x40>)
 8001240:	2207      	movs	r2, #7
 8001242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	e000e010 	.word	0xe000e010

08001254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff ff29 	bl	80010b4 <__NVIC_SetPriorityGrouping>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800126a:	b580      	push	{r7, lr}
 800126c:	b086      	sub	sp, #24
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	60b9      	str	r1, [r7, #8]
 8001274:	607a      	str	r2, [r7, #4]
 8001276:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800127c:	f7ff ff3e 	bl	80010fc <__NVIC_GetPriorityGrouping>
 8001280:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	68b9      	ldr	r1, [r7, #8]
 8001286:	6978      	ldr	r0, [r7, #20]
 8001288:	f7ff ff8e 	bl	80011a8 <NVIC_EncodePriority>
 800128c:	4602      	mov	r2, r0
 800128e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001292:	4611      	mov	r1, r2
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff5d 	bl	8001154 <__NVIC_SetPriority>
}
 800129a:	bf00      	nop
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff31 	bl	8001118 <__NVIC_EnableIRQ>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ffa2 	bl	8001210 <SysTick_Config>
 80012cc:	4603      	mov	r3, r0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	@ 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
 80012f2:	e177      	b.n	80015e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012f4:	2201      	movs	r2, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	429a      	cmp	r2, r3
 800130e:	f040 8166 	bne.w	80015de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	2b01      	cmp	r3, #1
 800131c:	d005      	beq.n	800132a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001326:	2b02      	cmp	r3, #2
 8001328:	d130      	bne.n	800138c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	2203      	movs	r2, #3
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	68da      	ldr	r2, [r3, #12]
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001360:	2201      	movs	r2, #1
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	091b      	lsrs	r3, r3, #4
 8001376:	f003 0201 	and.w	r2, r3, #1
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	2b03      	cmp	r3, #3
 8001396:	d017      	beq.n	80013c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	2203      	movs	r2, #3
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d123      	bne.n	800141c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	08da      	lsrs	r2, r3, #3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3208      	adds	r2, #8
 80013dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	220f      	movs	r2, #15
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	691a      	ldr	r2, [r3, #16]
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	08da      	lsrs	r2, r3, #3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3208      	adds	r2, #8
 8001416:	69b9      	ldr	r1, [r7, #24]
 8001418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	2203      	movs	r2, #3
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 0203 	and.w	r2, r3, #3
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 80c0 	beq.w	80015de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	4b66      	ldr	r3, [pc, #408]	@ (80015fc <HAL_GPIO_Init+0x324>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001466:	4a65      	ldr	r2, [pc, #404]	@ (80015fc <HAL_GPIO_Init+0x324>)
 8001468:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800146c:	6453      	str	r3, [r2, #68]	@ 0x44
 800146e:	4b63      	ldr	r3, [pc, #396]	@ (80015fc <HAL_GPIO_Init+0x324>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001472:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800147a:	4a61      	ldr	r2, [pc, #388]	@ (8001600 <HAL_GPIO_Init+0x328>)
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	089b      	lsrs	r3, r3, #2
 8001480:	3302      	adds	r3, #2
 8001482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f003 0303 	and.w	r3, r3, #3
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	220f      	movs	r2, #15
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a58      	ldr	r2, [pc, #352]	@ (8001604 <HAL_GPIO_Init+0x32c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d037      	beq.n	8001516 <HAL_GPIO_Init+0x23e>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a57      	ldr	r2, [pc, #348]	@ (8001608 <HAL_GPIO_Init+0x330>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d031      	beq.n	8001512 <HAL_GPIO_Init+0x23a>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a56      	ldr	r2, [pc, #344]	@ (800160c <HAL_GPIO_Init+0x334>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d02b      	beq.n	800150e <HAL_GPIO_Init+0x236>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a55      	ldr	r2, [pc, #340]	@ (8001610 <HAL_GPIO_Init+0x338>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d025      	beq.n	800150a <HAL_GPIO_Init+0x232>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a54      	ldr	r2, [pc, #336]	@ (8001614 <HAL_GPIO_Init+0x33c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d01f      	beq.n	8001506 <HAL_GPIO_Init+0x22e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a53      	ldr	r2, [pc, #332]	@ (8001618 <HAL_GPIO_Init+0x340>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d019      	beq.n	8001502 <HAL_GPIO_Init+0x22a>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a52      	ldr	r2, [pc, #328]	@ (800161c <HAL_GPIO_Init+0x344>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d013      	beq.n	80014fe <HAL_GPIO_Init+0x226>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a51      	ldr	r2, [pc, #324]	@ (8001620 <HAL_GPIO_Init+0x348>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d00d      	beq.n	80014fa <HAL_GPIO_Init+0x222>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a50      	ldr	r2, [pc, #320]	@ (8001624 <HAL_GPIO_Init+0x34c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d007      	beq.n	80014f6 <HAL_GPIO_Init+0x21e>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a4f      	ldr	r2, [pc, #316]	@ (8001628 <HAL_GPIO_Init+0x350>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d101      	bne.n	80014f2 <HAL_GPIO_Init+0x21a>
 80014ee:	2309      	movs	r3, #9
 80014f0:	e012      	b.n	8001518 <HAL_GPIO_Init+0x240>
 80014f2:	230a      	movs	r3, #10
 80014f4:	e010      	b.n	8001518 <HAL_GPIO_Init+0x240>
 80014f6:	2308      	movs	r3, #8
 80014f8:	e00e      	b.n	8001518 <HAL_GPIO_Init+0x240>
 80014fa:	2307      	movs	r3, #7
 80014fc:	e00c      	b.n	8001518 <HAL_GPIO_Init+0x240>
 80014fe:	2306      	movs	r3, #6
 8001500:	e00a      	b.n	8001518 <HAL_GPIO_Init+0x240>
 8001502:	2305      	movs	r3, #5
 8001504:	e008      	b.n	8001518 <HAL_GPIO_Init+0x240>
 8001506:	2304      	movs	r3, #4
 8001508:	e006      	b.n	8001518 <HAL_GPIO_Init+0x240>
 800150a:	2303      	movs	r3, #3
 800150c:	e004      	b.n	8001518 <HAL_GPIO_Init+0x240>
 800150e:	2302      	movs	r3, #2
 8001510:	e002      	b.n	8001518 <HAL_GPIO_Init+0x240>
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <HAL_GPIO_Init+0x240>
 8001516:	2300      	movs	r3, #0
 8001518:	69fa      	ldr	r2, [r7, #28]
 800151a:	f002 0203 	and.w	r2, r2, #3
 800151e:	0092      	lsls	r2, r2, #2
 8001520:	4093      	lsls	r3, r2
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001528:	4935      	ldr	r1, [pc, #212]	@ (8001600 <HAL_GPIO_Init+0x328>)
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	089b      	lsrs	r3, r3, #2
 800152e:	3302      	adds	r3, #2
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001536:	4b3d      	ldr	r3, [pc, #244]	@ (800162c <HAL_GPIO_Init+0x354>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	43db      	mvns	r3, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4013      	ands	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800155a:	4a34      	ldr	r2, [pc, #208]	@ (800162c <HAL_GPIO_Init+0x354>)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001560:	4b32      	ldr	r3, [pc, #200]	@ (800162c <HAL_GPIO_Init+0x354>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001584:	4a29      	ldr	r2, [pc, #164]	@ (800162c <HAL_GPIO_Init+0x354>)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800158a:	4b28      	ldr	r3, [pc, #160]	@ (800162c <HAL_GPIO_Init+0x354>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015ae:	4a1f      	ldr	r2, [pc, #124]	@ (800162c <HAL_GPIO_Init+0x354>)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015b4:	4b1d      	ldr	r3, [pc, #116]	@ (800162c <HAL_GPIO_Init+0x354>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015d8:	4a14      	ldr	r2, [pc, #80]	@ (800162c <HAL_GPIO_Init+0x354>)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3301      	adds	r3, #1
 80015e2:	61fb      	str	r3, [r7, #28]
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	2b0f      	cmp	r3, #15
 80015e8:	f67f ae84 	bls.w	80012f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	3724      	adds	r7, #36	@ 0x24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800
 8001600:	40013800 	.word	0x40013800
 8001604:	40020000 	.word	0x40020000
 8001608:	40020400 	.word	0x40020400
 800160c:	40020800 	.word	0x40020800
 8001610:	40020c00 	.word	0x40020c00
 8001614:	40021000 	.word	0x40021000
 8001618:	40021400 	.word	0x40021400
 800161c:	40021800 	.word	0x40021800
 8001620:	40021c00 	.word	0x40021c00
 8001624:	40022000 	.word	0x40022000
 8001628:	40022400 	.word	0x40022400
 800162c:	40013c00 	.word	0x40013c00

08001630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	807b      	strh	r3, [r7, #2]
 800163c:	4613      	mov	r3, r2
 800163e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001640:	787b      	ldrb	r3, [r7, #1]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001646:	887a      	ldrh	r2, [r7, #2]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800164c:	e003      	b.n	8001656 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800164e:	887b      	ldrh	r3, [r7, #2]
 8001650:	041a      	lsls	r2, r3, #16
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	619a      	str	r2, [r3, #24]
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	603b      	str	r3, [r7, #0]
 8001672:	4b20      	ldr	r3, [pc, #128]	@ (80016f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001676:	4a1f      	ldr	r2, [pc, #124]	@ (80016f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800167c:	6413      	str	r3, [r2, #64]	@ 0x40
 800167e:	4b1d      	ldr	r3, [pc, #116]	@ (80016f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001686:	603b      	str	r3, [r7, #0]
 8001688:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800168a:	4b1b      	ldr	r3, [pc, #108]	@ (80016f8 <HAL_PWREx_EnableOverDrive+0x94>)
 800168c:	2201      	movs	r2, #1
 800168e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001690:	f7ff fce0 	bl	8001054 <HAL_GetTick>
 8001694:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001696:	e009      	b.n	80016ac <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001698:	f7ff fcdc 	bl	8001054 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016a6:	d901      	bls.n	80016ac <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e01f      	b.n	80016ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80016ac:	4b13      	ldr	r3, [pc, #76]	@ (80016fc <HAL_PWREx_EnableOverDrive+0x98>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016b8:	d1ee      	bne.n	8001698 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80016ba:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <HAL_PWREx_EnableOverDrive+0x9c>)
 80016bc:	2201      	movs	r2, #1
 80016be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016c0:	f7ff fcc8 	bl	8001054 <HAL_GetTick>
 80016c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80016c6:	e009      	b.n	80016dc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80016c8:	f7ff fcc4 	bl	8001054 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016d6:	d901      	bls.n	80016dc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e007      	b.n	80016ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80016dc:	4b07      	ldr	r3, [pc, #28]	@ (80016fc <HAL_PWREx_EnableOverDrive+0x98>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80016e8:	d1ee      	bne.n	80016c8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40023800 	.word	0x40023800
 80016f8:	420e0040 	.word	0x420e0040
 80016fc:	40007000 	.word	0x40007000
 8001700:	420e0044 	.word	0x420e0044

08001704 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e267      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	d075      	beq.n	800180e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001722:	4b88      	ldr	r3, [pc, #544]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 030c 	and.w	r3, r3, #12
 800172a:	2b04      	cmp	r3, #4
 800172c:	d00c      	beq.n	8001748 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800172e:	4b85      	ldr	r3, [pc, #532]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001736:	2b08      	cmp	r3, #8
 8001738:	d112      	bne.n	8001760 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800173a:	4b82      	ldr	r3, [pc, #520]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001742:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001746:	d10b      	bne.n	8001760 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001748:	4b7e      	ldr	r3, [pc, #504]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d05b      	beq.n	800180c <HAL_RCC_OscConfig+0x108>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d157      	bne.n	800180c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e242      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001768:	d106      	bne.n	8001778 <HAL_RCC_OscConfig+0x74>
 800176a:	4b76      	ldr	r3, [pc, #472]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a75      	ldr	r2, [pc, #468]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 8001770:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	e01d      	b.n	80017b4 <HAL_RCC_OscConfig+0xb0>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001780:	d10c      	bne.n	800179c <HAL_RCC_OscConfig+0x98>
 8001782:	4b70      	ldr	r3, [pc, #448]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a6f      	ldr	r2, [pc, #444]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 8001788:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	4b6d      	ldr	r3, [pc, #436]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a6c      	ldr	r2, [pc, #432]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 8001794:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e00b      	b.n	80017b4 <HAL_RCC_OscConfig+0xb0>
 800179c:	4b69      	ldr	r3, [pc, #420]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a68      	ldr	r2, [pc, #416]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 80017a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	4b66      	ldr	r3, [pc, #408]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a65      	ldr	r2, [pc, #404]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 80017ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d013      	beq.n	80017e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7ff fc4a 	bl	8001054 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c4:	f7ff fc46 	bl	8001054 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b64      	cmp	r3, #100	@ 0x64
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e207      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d6:	4b5b      	ldr	r3, [pc, #364]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0xc0>
 80017e2:	e014      	b.n	800180e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7ff fc36 	bl	8001054 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ec:	f7ff fc32 	bl	8001054 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b64      	cmp	r3, #100	@ 0x64
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e1f3      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fe:	4b51      	ldr	r3, [pc, #324]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0xe8>
 800180a:	e000      	b.n	800180e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800180c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d063      	beq.n	80018e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800181a:	4b4a      	ldr	r3, [pc, #296]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 030c 	and.w	r3, r3, #12
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00b      	beq.n	800183e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001826:	4b47      	ldr	r3, [pc, #284]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800182e:	2b08      	cmp	r3, #8
 8001830:	d11c      	bne.n	800186c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001832:	4b44      	ldr	r3, [pc, #272]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d116      	bne.n	800186c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183e:	4b41      	ldr	r3, [pc, #260]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d005      	beq.n	8001856 <HAL_RCC_OscConfig+0x152>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d001      	beq.n	8001856 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e1c7      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001856:	4b3b      	ldr	r3, [pc, #236]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	4937      	ldr	r1, [pc, #220]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186a:	e03a      	b.n	80018e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d020      	beq.n	80018b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001874:	4b34      	ldr	r3, [pc, #208]	@ (8001948 <HAL_RCC_OscConfig+0x244>)
 8001876:	2201      	movs	r2, #1
 8001878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7ff fbeb 	bl	8001054 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001882:	f7ff fbe7 	bl	8001054 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e1a8      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001894:	4b2b      	ldr	r3, [pc, #172]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a0:	4b28      	ldr	r3, [pc, #160]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	4925      	ldr	r1, [pc, #148]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	600b      	str	r3, [r1, #0]
 80018b4:	e015      	b.n	80018e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b6:	4b24      	ldr	r3, [pc, #144]	@ (8001948 <HAL_RCC_OscConfig+0x244>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018bc:	f7ff fbca 	bl	8001054 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c4:	f7ff fbc6 	bl	8001054 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e187      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f0      	bne.n	80018c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d036      	beq.n	800195c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d016      	beq.n	8001924 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018f6:	4b15      	ldr	r3, [pc, #84]	@ (800194c <HAL_RCC_OscConfig+0x248>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fc:	f7ff fbaa 	bl	8001054 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001904:	f7ff fba6 	bl	8001054 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e167      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001916:	4b0b      	ldr	r3, [pc, #44]	@ (8001944 <HAL_RCC_OscConfig+0x240>)
 8001918:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0x200>
 8001922:	e01b      	b.n	800195c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001924:	4b09      	ldr	r3, [pc, #36]	@ (800194c <HAL_RCC_OscConfig+0x248>)
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192a:	f7ff fb93 	bl	8001054 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001930:	e00e      	b.n	8001950 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001932:	f7ff fb8f 	bl	8001054 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d907      	bls.n	8001950 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e150      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
 8001944:	40023800 	.word	0x40023800
 8001948:	42470000 	.word	0x42470000
 800194c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001950:	4b88      	ldr	r3, [pc, #544]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001952:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1ea      	bne.n	8001932 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 8097 	beq.w	8001a98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800196a:	2300      	movs	r3, #0
 800196c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800196e:	4b81      	ldr	r3, [pc, #516]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10f      	bne.n	800199a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	4b7d      	ldr	r3, [pc, #500]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001982:	4a7c      	ldr	r2, [pc, #496]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001988:	6413      	str	r3, [r2, #64]	@ 0x40
 800198a:	4b7a      	ldr	r3, [pc, #488]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001996:	2301      	movs	r3, #1
 8001998:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199a:	4b77      	ldr	r3, [pc, #476]	@ (8001b78 <HAL_RCC_OscConfig+0x474>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d118      	bne.n	80019d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019a6:	4b74      	ldr	r3, [pc, #464]	@ (8001b78 <HAL_RCC_OscConfig+0x474>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a73      	ldr	r2, [pc, #460]	@ (8001b78 <HAL_RCC_OscConfig+0x474>)
 80019ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019b2:	f7ff fb4f 	bl	8001054 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ba:	f7ff fb4b 	bl	8001054 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e10c      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019cc:	4b6a      	ldr	r3, [pc, #424]	@ (8001b78 <HAL_RCC_OscConfig+0x474>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d106      	bne.n	80019ee <HAL_RCC_OscConfig+0x2ea>
 80019e0:	4b64      	ldr	r3, [pc, #400]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 80019e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019e4:	4a63      	ldr	r2, [pc, #396]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80019ec:	e01c      	b.n	8001a28 <HAL_RCC_OscConfig+0x324>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	2b05      	cmp	r3, #5
 80019f4:	d10c      	bne.n	8001a10 <HAL_RCC_OscConfig+0x30c>
 80019f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 80019f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019fa:	4a5e      	ldr	r2, [pc, #376]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 80019fc:	f043 0304 	orr.w	r3, r3, #4
 8001a00:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a02:	4b5c      	ldr	r3, [pc, #368]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a06:	4a5b      	ldr	r2, [pc, #364]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a0e:	e00b      	b.n	8001a28 <HAL_RCC_OscConfig+0x324>
 8001a10:	4b58      	ldr	r3, [pc, #352]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a14:	4a57      	ldr	r2, [pc, #348]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a16:	f023 0301 	bic.w	r3, r3, #1
 8001a1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a1c:	4b55      	ldr	r3, [pc, #340]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a20:	4a54      	ldr	r2, [pc, #336]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a22:	f023 0304 	bic.w	r3, r3, #4
 8001a26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d015      	beq.n	8001a5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a30:	f7ff fb10 	bl	8001054 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a36:	e00a      	b.n	8001a4e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a38:	f7ff fb0c 	bl	8001054 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e0cb      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4e:	4b49      	ldr	r3, [pc, #292]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0ee      	beq.n	8001a38 <HAL_RCC_OscConfig+0x334>
 8001a5a:	e014      	b.n	8001a86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5c:	f7ff fafa 	bl	8001054 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a62:	e00a      	b.n	8001a7a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a64:	f7ff faf6 	bl	8001054 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e0b5      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a7a:	4b3e      	ldr	r3, [pc, #248]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1ee      	bne.n	8001a64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a86:	7dfb      	ldrb	r3, [r7, #23]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d105      	bne.n	8001a98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a8c:	4b39      	ldr	r3, [pc, #228]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a90:	4a38      	ldr	r2, [pc, #224]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a96:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 80a1 	beq.w	8001be4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aa2:	4b34      	ldr	r3, [pc, #208]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d05c      	beq.n	8001b68 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d141      	bne.n	8001b3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab6:	4b31      	ldr	r3, [pc, #196]	@ (8001b7c <HAL_RCC_OscConfig+0x478>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abc:	f7ff faca 	bl	8001054 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac4:	f7ff fac6 	bl	8001054 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e087      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad6:	4b27      	ldr	r3, [pc, #156]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69da      	ldr	r2, [r3, #28]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af0:	019b      	lsls	r3, r3, #6
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af8:	085b      	lsrs	r3, r3, #1
 8001afa:	3b01      	subs	r3, #1
 8001afc:	041b      	lsls	r3, r3, #16
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b04:	061b      	lsls	r3, r3, #24
 8001b06:	491b      	ldr	r1, [pc, #108]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b7c <HAL_RCC_OscConfig+0x478>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b12:	f7ff fa9f 	bl	8001054 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1a:	f7ff fa9b 	bl	8001054 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e05c      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b2c:	4b11      	ldr	r3, [pc, #68]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0f0      	beq.n	8001b1a <HAL_RCC_OscConfig+0x416>
 8001b38:	e054      	b.n	8001be4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b3a:	4b10      	ldr	r3, [pc, #64]	@ (8001b7c <HAL_RCC_OscConfig+0x478>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b40:	f7ff fa88 	bl	8001054 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b48:	f7ff fa84 	bl	8001054 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e045      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b5a:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x444>
 8001b66:	e03d      	b.n	8001be4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d107      	bne.n	8001b80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e038      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40007000 	.word	0x40007000
 8001b7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b80:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf0 <HAL_RCC_OscConfig+0x4ec>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d028      	beq.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d121      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d11a      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d111      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc6:	085b      	lsrs	r3, r3, #1
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d107      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800

08001bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e0cc      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c08:	4b68      	ldr	r3, [pc, #416]	@ (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 030f 	and.w	r3, r3, #15
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d90c      	bls.n	8001c30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c16:	4b65      	ldr	r3, [pc, #404]	@ (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b63      	ldr	r3, [pc, #396]	@ (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0b8      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d020      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c48:	4b59      	ldr	r3, [pc, #356]	@ (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4a58      	ldr	r2, [pc, #352]	@ (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c52:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c60:	4b53      	ldr	r3, [pc, #332]	@ (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	4a52      	ldr	r2, [pc, #328]	@ (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c6c:	4b50      	ldr	r3, [pc, #320]	@ (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	494d      	ldr	r1, [pc, #308]	@ (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d044      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d107      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c92:	4b47      	ldr	r3, [pc, #284]	@ (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d119      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e07f      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d003      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cae:	2b03      	cmp	r3, #3
 8001cb0:	d107      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb2:	4b3f      	ldr	r3, [pc, #252]	@ (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d109      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e06f      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc2:	4b3b      	ldr	r3, [pc, #236]	@ (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e067      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cd2:	4b37      	ldr	r3, [pc, #220]	@ (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f023 0203 	bic.w	r2, r3, #3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	4934      	ldr	r1, [pc, #208]	@ (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ce4:	f7ff f9b6 	bl	8001054 <HAL_GetTick>
 8001ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cea:	e00a      	b.n	8001d02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cec:	f7ff f9b2 	bl	8001054 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e04f      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d02:	4b2b      	ldr	r3, [pc, #172]	@ (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 020c 	and.w	r2, r3, #12
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d1eb      	bne.n	8001cec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d14:	4b25      	ldr	r3, [pc, #148]	@ (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 030f 	and.w	r3, r3, #15
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d20c      	bcs.n	8001d3c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d22:	4b22      	ldr	r3, [pc, #136]	@ (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2a:	4b20      	ldr	r3, [pc, #128]	@ (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e032      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d008      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d48:	4b19      	ldr	r3, [pc, #100]	@ (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	4916      	ldr	r1, [pc, #88]	@ (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d009      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d66:	4b12      	ldr	r3, [pc, #72]	@ (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	490e      	ldr	r1, [pc, #56]	@ (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d7a:	f000 f821 	bl	8001dc0 <HAL_RCC_GetSysClockFreq>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	4b0b      	ldr	r3, [pc, #44]	@ (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	490a      	ldr	r1, [pc, #40]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d8c:	5ccb      	ldrb	r3, [r1, r3]
 8001d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d92:	4a09      	ldr	r2, [pc, #36]	@ (8001db8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001d96:	4b09      	ldr	r3, [pc, #36]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff f916 	bl	8000fcc <HAL_InitTick>

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40023c00 	.word	0x40023c00
 8001db0:	40023800 	.word	0x40023800
 8001db4:	080087e0 	.word	0x080087e0
 8001db8:	2000001c 	.word	0x2000001c
 8001dbc:	20000020 	.word	0x20000020

08001dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dc4:	b094      	sub	sp, #80	@ 0x50
 8001dc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dd8:	4b79      	ldr	r3, [pc, #484]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 030c 	and.w	r3, r3, #12
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d00d      	beq.n	8001e00 <HAL_RCC_GetSysClockFreq+0x40>
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	f200 80e1 	bhi.w	8001fac <HAL_RCC_GetSysClockFreq+0x1ec>
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d002      	beq.n	8001df4 <HAL_RCC_GetSysClockFreq+0x34>
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d003      	beq.n	8001dfa <HAL_RCC_GetSysClockFreq+0x3a>
 8001df2:	e0db      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001df4:	4b73      	ldr	r3, [pc, #460]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001df6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001df8:	e0db      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dfa:	4b73      	ldr	r3, [pc, #460]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001dfc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001dfe:	e0d8      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e00:	4b6f      	ldr	r3, [pc, #444]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e08:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e0a:	4b6d      	ldr	r3, [pc, #436]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d063      	beq.n	8001ede <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e16:	4b6a      	ldr	r3, [pc, #424]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	099b      	lsrs	r3, r3, #6
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e20:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e28:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e32:	4622      	mov	r2, r4
 8001e34:	462b      	mov	r3, r5
 8001e36:	f04f 0000 	mov.w	r0, #0
 8001e3a:	f04f 0100 	mov.w	r1, #0
 8001e3e:	0159      	lsls	r1, r3, #5
 8001e40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e44:	0150      	lsls	r0, r2, #5
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4621      	mov	r1, r4
 8001e4c:	1a51      	subs	r1, r2, r1
 8001e4e:	6139      	str	r1, [r7, #16]
 8001e50:	4629      	mov	r1, r5
 8001e52:	eb63 0301 	sbc.w	r3, r3, r1
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e64:	4659      	mov	r1, fp
 8001e66:	018b      	lsls	r3, r1, #6
 8001e68:	4651      	mov	r1, sl
 8001e6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e6e:	4651      	mov	r1, sl
 8001e70:	018a      	lsls	r2, r1, #6
 8001e72:	4651      	mov	r1, sl
 8001e74:	ebb2 0801 	subs.w	r8, r2, r1
 8001e78:	4659      	mov	r1, fp
 8001e7a:	eb63 0901 	sbc.w	r9, r3, r1
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e92:	4690      	mov	r8, r2
 8001e94:	4699      	mov	r9, r3
 8001e96:	4623      	mov	r3, r4
 8001e98:	eb18 0303 	adds.w	r3, r8, r3
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	462b      	mov	r3, r5
 8001ea0:	eb49 0303 	adc.w	r3, r9, r3
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	f04f 0300 	mov.w	r3, #0
 8001eae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001eb2:	4629      	mov	r1, r5
 8001eb4:	024b      	lsls	r3, r1, #9
 8001eb6:	4621      	mov	r1, r4
 8001eb8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ebc:	4621      	mov	r1, r4
 8001ebe:	024a      	lsls	r2, r1, #9
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001eca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ecc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ed0:	f7fe f9de 	bl	8000290 <__aeabi_uldivmod>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4613      	mov	r3, r2
 8001eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001edc:	e058      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ede:	4b38      	ldr	r3, [pc, #224]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	099b      	lsrs	r3, r3, #6
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	4611      	mov	r1, r2
 8001eea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001eee:	623b      	str	r3, [r7, #32]
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ef4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ef8:	4642      	mov	r2, r8
 8001efa:	464b      	mov	r3, r9
 8001efc:	f04f 0000 	mov.w	r0, #0
 8001f00:	f04f 0100 	mov.w	r1, #0
 8001f04:	0159      	lsls	r1, r3, #5
 8001f06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f0a:	0150      	lsls	r0, r2, #5
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4641      	mov	r1, r8
 8001f12:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f16:	4649      	mov	r1, r9
 8001f18:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	f04f 0300 	mov.w	r3, #0
 8001f24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f30:	ebb2 040a 	subs.w	r4, r2, sl
 8001f34:	eb63 050b 	sbc.w	r5, r3, fp
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	00eb      	lsls	r3, r5, #3
 8001f42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f46:	00e2      	lsls	r2, r4, #3
 8001f48:	4614      	mov	r4, r2
 8001f4a:	461d      	mov	r5, r3
 8001f4c:	4643      	mov	r3, r8
 8001f4e:	18e3      	adds	r3, r4, r3
 8001f50:	603b      	str	r3, [r7, #0]
 8001f52:	464b      	mov	r3, r9
 8001f54:	eb45 0303 	adc.w	r3, r5, r3
 8001f58:	607b      	str	r3, [r7, #4]
 8001f5a:	f04f 0200 	mov.w	r2, #0
 8001f5e:	f04f 0300 	mov.w	r3, #0
 8001f62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f66:	4629      	mov	r1, r5
 8001f68:	028b      	lsls	r3, r1, #10
 8001f6a:	4621      	mov	r1, r4
 8001f6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f70:	4621      	mov	r1, r4
 8001f72:	028a      	lsls	r2, r1, #10
 8001f74:	4610      	mov	r0, r2
 8001f76:	4619      	mov	r1, r3
 8001f78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
 8001f7e:	61fa      	str	r2, [r7, #28]
 8001f80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f84:	f7fe f984 	bl	8000290 <__aeabi_uldivmod>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f90:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	0c1b      	lsrs	r3, r3, #16
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001fa0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001fa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001faa:	e002      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fac:	4b05      	ldr	r3, [pc, #20]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3750      	adds	r7, #80	@ 0x50
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	00f42400 	.word	0x00f42400
 8001fc8:	007a1200 	.word	0x007a1200

08001fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fd0:	4b03      	ldr	r3, [pc, #12]	@ (8001fe0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	2000001c 	.word	0x2000001c

08001fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fe8:	f7ff fff0 	bl	8001fcc <HAL_RCC_GetHCLKFreq>
 8001fec:	4602      	mov	r2, r0
 8001fee:	4b05      	ldr	r3, [pc, #20]	@ (8002004 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	0a9b      	lsrs	r3, r3, #10
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	4903      	ldr	r1, [pc, #12]	@ (8002008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ffa:	5ccb      	ldrb	r3, [r1, r3]
 8001ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002000:	4618      	mov	r0, r3
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40023800 	.word	0x40023800
 8002008:	080087f0 	.word	0x080087f0

0800200c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002010:	f7ff ffdc 	bl	8001fcc <HAL_RCC_GetHCLKFreq>
 8002014:	4602      	mov	r2, r0
 8002016:	4b05      	ldr	r3, [pc, #20]	@ (800202c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	0b5b      	lsrs	r3, r3, #13
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	4903      	ldr	r1, [pc, #12]	@ (8002030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002022:	5ccb      	ldrb	r3, [r1, r3]
 8002024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002028:	4618      	mov	r0, r3
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40023800 	.word	0x40023800
 8002030:	080087f0 	.word	0x080087f0

08002034 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e038      	b.n	80020bc <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d106      	bne.n	8002064 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f7fe fe6e 	bl	8000d40 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	3308      	adds	r3, #8
 800206c:	4619      	mov	r1, r3
 800206e:	4610      	mov	r0, r2
 8002070:	f001 f8aa 	bl	80031c8 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6818      	ldr	r0, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	461a      	mov	r2, r3
 800207e:	68b9      	ldr	r1, [r7, #8]
 8002080:	f001 f928 	bl	80032d4 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6858      	ldr	r0, [r3, #4]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	f001 f96f 	bl	8003374 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	6892      	ldr	r2, [r2, #8]
 800209e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	6892      	ldr	r2, [r2, #8]
 80020aa:	f041 0101 	orr.w	r1, r1, #1
 80020ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e041      	b.n	800215a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d106      	bne.n	80020f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7fe fd5a 	bl	8000ba4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2202      	movs	r2, #2
 80020f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3304      	adds	r3, #4
 8002100:	4619      	mov	r1, r3
 8002102:	4610      	mov	r0, r2
 8002104:	f000 fa7e 	bl	8002604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b01      	cmp	r3, #1
 8002176:	d001      	beq.n	800217c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e04e      	b.n	800221a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2202      	movs	r2, #2
 8002180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 0201 	orr.w	r2, r2, #1
 8002192:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a23      	ldr	r2, [pc, #140]	@ (8002228 <HAL_TIM_Base_Start_IT+0xc4>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d022      	beq.n	80021e4 <HAL_TIM_Base_Start_IT+0x80>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021a6:	d01d      	beq.n	80021e4 <HAL_TIM_Base_Start_IT+0x80>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a1f      	ldr	r2, [pc, #124]	@ (800222c <HAL_TIM_Base_Start_IT+0xc8>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d018      	beq.n	80021e4 <HAL_TIM_Base_Start_IT+0x80>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a1e      	ldr	r2, [pc, #120]	@ (8002230 <HAL_TIM_Base_Start_IT+0xcc>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d013      	beq.n	80021e4 <HAL_TIM_Base_Start_IT+0x80>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a1c      	ldr	r2, [pc, #112]	@ (8002234 <HAL_TIM_Base_Start_IT+0xd0>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00e      	beq.n	80021e4 <HAL_TIM_Base_Start_IT+0x80>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a1b      	ldr	r2, [pc, #108]	@ (8002238 <HAL_TIM_Base_Start_IT+0xd4>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d009      	beq.n	80021e4 <HAL_TIM_Base_Start_IT+0x80>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a19      	ldr	r2, [pc, #100]	@ (800223c <HAL_TIM_Base_Start_IT+0xd8>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d004      	beq.n	80021e4 <HAL_TIM_Base_Start_IT+0x80>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a18      	ldr	r2, [pc, #96]	@ (8002240 <HAL_TIM_Base_Start_IT+0xdc>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d111      	bne.n	8002208 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2b06      	cmp	r3, #6
 80021f4:	d010      	beq.n	8002218 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f042 0201 	orr.w	r2, r2, #1
 8002204:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002206:	e007      	b.n	8002218 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0201 	orr.w	r2, r2, #1
 8002216:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	40010000 	.word	0x40010000
 800222c:	40000400 	.word	0x40000400
 8002230:	40000800 	.word	0x40000800
 8002234:	40000c00 	.word	0x40000c00
 8002238:	40010400 	.word	0x40010400
 800223c:	40014000 	.word	0x40014000
 8002240:	40001800 	.word	0x40001800

08002244 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d020      	beq.n	80022a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d01b      	beq.n	80022a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f06f 0202 	mvn.w	r2, #2
 8002278:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f999 	bl	80025c6 <HAL_TIM_IC_CaptureCallback>
 8002294:	e005      	b.n	80022a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f98b 	bl	80025b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f99c 	bl	80025da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f003 0304 	and.w	r3, r3, #4
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d020      	beq.n	80022f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d01b      	beq.n	80022f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f06f 0204 	mvn.w	r2, #4
 80022c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2202      	movs	r2, #2
 80022ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f973 	bl	80025c6 <HAL_TIM_IC_CaptureCallback>
 80022e0:	e005      	b.n	80022ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f965 	bl	80025b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 f976 	bl	80025da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d020      	beq.n	8002340 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	2b00      	cmp	r3, #0
 8002306:	d01b      	beq.n	8002340 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f06f 0208 	mvn.w	r2, #8
 8002310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2204      	movs	r2, #4
 8002316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f94d 	bl	80025c6 <HAL_TIM_IC_CaptureCallback>
 800232c:	e005      	b.n	800233a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f93f 	bl	80025b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f950 	bl	80025da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f003 0310 	and.w	r3, r3, #16
 8002346:	2b00      	cmp	r3, #0
 8002348:	d020      	beq.n	800238c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	2b00      	cmp	r3, #0
 8002352:	d01b      	beq.n	800238c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f06f 0210 	mvn.w	r2, #16
 800235c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2208      	movs	r2, #8
 8002362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f927 	bl	80025c6 <HAL_TIM_IC_CaptureCallback>
 8002378:	e005      	b.n	8002386 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f919 	bl	80025b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 f92a 	bl	80025da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00c      	beq.n	80023b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b00      	cmp	r3, #0
 800239e:	d007      	beq.n	80023b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f06f 0201 	mvn.w	r2, #1
 80023a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7fe f8fa 	bl	80005a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00c      	beq.n	80023d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d007      	beq.n	80023d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80023cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fae4 	bl	800299c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00c      	beq.n	80023f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d007      	beq.n	80023f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80023f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f8fb 	bl	80025ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	f003 0320 	and.w	r3, r3, #32
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00c      	beq.n	800241c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f003 0320 	and.w	r3, r3, #32
 8002408:	2b00      	cmp	r3, #0
 800240a:	d007      	beq.n	800241c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f06f 0220 	mvn.w	r2, #32
 8002414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 fab6 	bl	8002988 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800241c:	bf00      	nop
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800242e:	2300      	movs	r3, #0
 8002430:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002438:	2b01      	cmp	r3, #1
 800243a:	d101      	bne.n	8002440 <HAL_TIM_ConfigClockSource+0x1c>
 800243c:	2302      	movs	r3, #2
 800243e:	e0b4      	b.n	80025aa <HAL_TIM_ConfigClockSource+0x186>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800245e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002466:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002478:	d03e      	beq.n	80024f8 <HAL_TIM_ConfigClockSource+0xd4>
 800247a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800247e:	f200 8087 	bhi.w	8002590 <HAL_TIM_ConfigClockSource+0x16c>
 8002482:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002486:	f000 8086 	beq.w	8002596 <HAL_TIM_ConfigClockSource+0x172>
 800248a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800248e:	d87f      	bhi.n	8002590 <HAL_TIM_ConfigClockSource+0x16c>
 8002490:	2b70      	cmp	r3, #112	@ 0x70
 8002492:	d01a      	beq.n	80024ca <HAL_TIM_ConfigClockSource+0xa6>
 8002494:	2b70      	cmp	r3, #112	@ 0x70
 8002496:	d87b      	bhi.n	8002590 <HAL_TIM_ConfigClockSource+0x16c>
 8002498:	2b60      	cmp	r3, #96	@ 0x60
 800249a:	d050      	beq.n	800253e <HAL_TIM_ConfigClockSource+0x11a>
 800249c:	2b60      	cmp	r3, #96	@ 0x60
 800249e:	d877      	bhi.n	8002590 <HAL_TIM_ConfigClockSource+0x16c>
 80024a0:	2b50      	cmp	r3, #80	@ 0x50
 80024a2:	d03c      	beq.n	800251e <HAL_TIM_ConfigClockSource+0xfa>
 80024a4:	2b50      	cmp	r3, #80	@ 0x50
 80024a6:	d873      	bhi.n	8002590 <HAL_TIM_ConfigClockSource+0x16c>
 80024a8:	2b40      	cmp	r3, #64	@ 0x40
 80024aa:	d058      	beq.n	800255e <HAL_TIM_ConfigClockSource+0x13a>
 80024ac:	2b40      	cmp	r3, #64	@ 0x40
 80024ae:	d86f      	bhi.n	8002590 <HAL_TIM_ConfigClockSource+0x16c>
 80024b0:	2b30      	cmp	r3, #48	@ 0x30
 80024b2:	d064      	beq.n	800257e <HAL_TIM_ConfigClockSource+0x15a>
 80024b4:	2b30      	cmp	r3, #48	@ 0x30
 80024b6:	d86b      	bhi.n	8002590 <HAL_TIM_ConfigClockSource+0x16c>
 80024b8:	2b20      	cmp	r3, #32
 80024ba:	d060      	beq.n	800257e <HAL_TIM_ConfigClockSource+0x15a>
 80024bc:	2b20      	cmp	r3, #32
 80024be:	d867      	bhi.n	8002590 <HAL_TIM_ConfigClockSource+0x16c>
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d05c      	beq.n	800257e <HAL_TIM_ConfigClockSource+0x15a>
 80024c4:	2b10      	cmp	r3, #16
 80024c6:	d05a      	beq.n	800257e <HAL_TIM_ConfigClockSource+0x15a>
 80024c8:	e062      	b.n	8002590 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024da:	f000 f9b9 	bl	8002850 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80024ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	609a      	str	r2, [r3, #8]
      break;
 80024f6:	e04f      	b.n	8002598 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002508:	f000 f9a2 	bl	8002850 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800251a:	609a      	str	r2, [r3, #8]
      break;
 800251c:	e03c      	b.n	8002598 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800252a:	461a      	mov	r2, r3
 800252c:	f000 f916 	bl	800275c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2150      	movs	r1, #80	@ 0x50
 8002536:	4618      	mov	r0, r3
 8002538:	f000 f96f 	bl	800281a <TIM_ITRx_SetConfig>
      break;
 800253c:	e02c      	b.n	8002598 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800254a:	461a      	mov	r2, r3
 800254c:	f000 f935 	bl	80027ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2160      	movs	r1, #96	@ 0x60
 8002556:	4618      	mov	r0, r3
 8002558:	f000 f95f 	bl	800281a <TIM_ITRx_SetConfig>
      break;
 800255c:	e01c      	b.n	8002598 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800256a:	461a      	mov	r2, r3
 800256c:	f000 f8f6 	bl	800275c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2140      	movs	r1, #64	@ 0x40
 8002576:	4618      	mov	r0, r3
 8002578:	f000 f94f 	bl	800281a <TIM_ITRx_SetConfig>
      break;
 800257c:	e00c      	b.n	8002598 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4619      	mov	r1, r3
 8002588:	4610      	mov	r0, r2
 800258a:	f000 f946 	bl	800281a <TIM_ITRx_SetConfig>
      break;
 800258e:	e003      	b.n	8002598 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	73fb      	strb	r3, [r7, #15]
      break;
 8002594:	e000      	b.n	8002598 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002596:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a46      	ldr	r2, [pc, #280]	@ (8002730 <TIM_Base_SetConfig+0x12c>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d013      	beq.n	8002644 <TIM_Base_SetConfig+0x40>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002622:	d00f      	beq.n	8002644 <TIM_Base_SetConfig+0x40>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a43      	ldr	r2, [pc, #268]	@ (8002734 <TIM_Base_SetConfig+0x130>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d00b      	beq.n	8002644 <TIM_Base_SetConfig+0x40>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a42      	ldr	r2, [pc, #264]	@ (8002738 <TIM_Base_SetConfig+0x134>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d007      	beq.n	8002644 <TIM_Base_SetConfig+0x40>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a41      	ldr	r2, [pc, #260]	@ (800273c <TIM_Base_SetConfig+0x138>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d003      	beq.n	8002644 <TIM_Base_SetConfig+0x40>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a40      	ldr	r2, [pc, #256]	@ (8002740 <TIM_Base_SetConfig+0x13c>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d108      	bne.n	8002656 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800264a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	4313      	orrs	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a35      	ldr	r2, [pc, #212]	@ (8002730 <TIM_Base_SetConfig+0x12c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d02b      	beq.n	80026b6 <TIM_Base_SetConfig+0xb2>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002664:	d027      	beq.n	80026b6 <TIM_Base_SetConfig+0xb2>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a32      	ldr	r2, [pc, #200]	@ (8002734 <TIM_Base_SetConfig+0x130>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d023      	beq.n	80026b6 <TIM_Base_SetConfig+0xb2>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a31      	ldr	r2, [pc, #196]	@ (8002738 <TIM_Base_SetConfig+0x134>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d01f      	beq.n	80026b6 <TIM_Base_SetConfig+0xb2>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a30      	ldr	r2, [pc, #192]	@ (800273c <TIM_Base_SetConfig+0x138>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d01b      	beq.n	80026b6 <TIM_Base_SetConfig+0xb2>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a2f      	ldr	r2, [pc, #188]	@ (8002740 <TIM_Base_SetConfig+0x13c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d017      	beq.n	80026b6 <TIM_Base_SetConfig+0xb2>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a2e      	ldr	r2, [pc, #184]	@ (8002744 <TIM_Base_SetConfig+0x140>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d013      	beq.n	80026b6 <TIM_Base_SetConfig+0xb2>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a2d      	ldr	r2, [pc, #180]	@ (8002748 <TIM_Base_SetConfig+0x144>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d00f      	beq.n	80026b6 <TIM_Base_SetConfig+0xb2>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a2c      	ldr	r2, [pc, #176]	@ (800274c <TIM_Base_SetConfig+0x148>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d00b      	beq.n	80026b6 <TIM_Base_SetConfig+0xb2>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a2b      	ldr	r2, [pc, #172]	@ (8002750 <TIM_Base_SetConfig+0x14c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d007      	beq.n	80026b6 <TIM_Base_SetConfig+0xb2>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a2a      	ldr	r2, [pc, #168]	@ (8002754 <TIM_Base_SetConfig+0x150>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d003      	beq.n	80026b6 <TIM_Base_SetConfig+0xb2>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a29      	ldr	r2, [pc, #164]	@ (8002758 <TIM_Base_SetConfig+0x154>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d108      	bne.n	80026c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a10      	ldr	r2, [pc, #64]	@ (8002730 <TIM_Base_SetConfig+0x12c>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d003      	beq.n	80026fc <TIM_Base_SetConfig+0xf8>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a12      	ldr	r2, [pc, #72]	@ (8002740 <TIM_Base_SetConfig+0x13c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d103      	bne.n	8002704 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	691a      	ldr	r2, [r3, #16]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b01      	cmp	r3, #1
 8002714:	d105      	bne.n	8002722 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	f023 0201 	bic.w	r2, r3, #1
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	611a      	str	r2, [r3, #16]
  }
}
 8002722:	bf00      	nop
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	40010000 	.word	0x40010000
 8002734:	40000400 	.word	0x40000400
 8002738:	40000800 	.word	0x40000800
 800273c:	40000c00 	.word	0x40000c00
 8002740:	40010400 	.word	0x40010400
 8002744:	40014000 	.word	0x40014000
 8002748:	40014400 	.word	0x40014400
 800274c:	40014800 	.word	0x40014800
 8002750:	40001800 	.word	0x40001800
 8002754:	40001c00 	.word	0x40001c00
 8002758:	40002000 	.word	0x40002000

0800275c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800275c:	b480      	push	{r7}
 800275e:	b087      	sub	sp, #28
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	f023 0201 	bic.w	r2, r3, #1
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002786:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4313      	orrs	r3, r2
 8002790:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f023 030a 	bic.w	r3, r3, #10
 8002798:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	4313      	orrs	r3, r2
 80027a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	621a      	str	r2, [r3, #32]
}
 80027ae:	bf00      	nop
 80027b0:	371c      	adds	r7, #28
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b087      	sub	sp, #28
 80027be:	af00      	add	r7, sp, #0
 80027c0:	60f8      	str	r0, [r7, #12]
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	f023 0210 	bic.w	r2, r3, #16
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80027e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	031b      	lsls	r3, r3, #12
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80027f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	011b      	lsls	r3, r3, #4
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	4313      	orrs	r3, r2
 8002800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	621a      	str	r2, [r3, #32]
}
 800280e:	bf00      	nop
 8002810:	371c      	adds	r7, #28
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800281a:	b480      	push	{r7}
 800281c:	b085      	sub	sp, #20
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002830:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4313      	orrs	r3, r2
 8002838:	f043 0307 	orr.w	r3, r3, #7
 800283c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	609a      	str	r2, [r3, #8]
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002850:	b480      	push	{r7}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
 800285c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800286a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	021a      	lsls	r2, r3, #8
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	431a      	orrs	r2, r3
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	4313      	orrs	r3, r2
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	4313      	orrs	r3, r2
 800287c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	609a      	str	r2, [r3, #8]
}
 8002884:	bf00      	nop
 8002886:	371c      	adds	r7, #28
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d101      	bne.n	80028a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028a4:	2302      	movs	r3, #2
 80028a6:	e05a      	b.n	800295e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a21      	ldr	r2, [pc, #132]	@ (800296c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d022      	beq.n	8002932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028f4:	d01d      	beq.n	8002932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002970 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d018      	beq.n	8002932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a1b      	ldr	r2, [pc, #108]	@ (8002974 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d013      	beq.n	8002932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a1a      	ldr	r2, [pc, #104]	@ (8002978 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d00e      	beq.n	8002932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a18      	ldr	r2, [pc, #96]	@ (800297c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d009      	beq.n	8002932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a17      	ldr	r2, [pc, #92]	@ (8002980 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d004      	beq.n	8002932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a15      	ldr	r2, [pc, #84]	@ (8002984 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d10c      	bne.n	800294c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002938:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	4313      	orrs	r3, r2
 8002942:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	40010000 	.word	0x40010000
 8002970:	40000400 	.word	0x40000400
 8002974:	40000800 	.word	0x40000800
 8002978:	40000c00 	.word	0x40000c00
 800297c:	40010400 	.word	0x40010400
 8002980:	40014000 	.word	0x40014000
 8002984:	40001800 	.word	0x40001800

08002988 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e042      	b.n	8002a48 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d106      	bne.n	80029dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7fe f90c 	bl	8000bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2224      	movs	r2, #36	@ 0x24
 80029e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80029f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 f973 	bl	8002ce0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	691a      	ldr	r2, [r3, #16]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695a      	ldr	r2, [r3, #20]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08a      	sub	sp, #40	@ 0x28
 8002a54:	af02      	add	r7, sp, #8
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b20      	cmp	r3, #32
 8002a6e:	d175      	bne.n	8002b5c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d002      	beq.n	8002a7c <HAL_UART_Transmit+0x2c>
 8002a76:	88fb      	ldrh	r3, [r7, #6]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e06e      	b.n	8002b5e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2221      	movs	r2, #33	@ 0x21
 8002a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a8e:	f7fe fae1 	bl	8001054 <HAL_GetTick>
 8002a92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	88fa      	ldrh	r2, [r7, #6]
 8002a98:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	88fa      	ldrh	r2, [r7, #6]
 8002a9e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002aa8:	d108      	bne.n	8002abc <HAL_UART_Transmit+0x6c>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d104      	bne.n	8002abc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	61bb      	str	r3, [r7, #24]
 8002aba:	e003      	b.n	8002ac4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ac4:	e02e      	b.n	8002b24 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	2200      	movs	r2, #0
 8002ace:	2180      	movs	r1, #128	@ 0x80
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 f848 	bl	8002b66 <UART_WaitOnFlagUntilTimeout>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d005      	beq.n	8002ae8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e03a      	b.n	8002b5e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10b      	bne.n	8002b06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002afc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	3302      	adds	r3, #2
 8002b02:	61bb      	str	r3, [r7, #24]
 8002b04:	e007      	b.n	8002b16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	781a      	ldrb	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	3301      	adds	r3, #1
 8002b14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1cb      	bne.n	8002ac6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2200      	movs	r2, #0
 8002b36:	2140      	movs	r1, #64	@ 0x40
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 f814 	bl	8002b66 <UART_WaitOnFlagUntilTimeout>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e006      	b.n	8002b5e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	e000      	b.n	8002b5e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002b5c:	2302      	movs	r3, #2
  }
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3720      	adds	r7, #32
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b086      	sub	sp, #24
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	603b      	str	r3, [r7, #0]
 8002b72:	4613      	mov	r3, r2
 8002b74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b76:	e03b      	b.n	8002bf0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7e:	d037      	beq.n	8002bf0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b80:	f7fe fa68 	bl	8001054 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	6a3a      	ldr	r2, [r7, #32]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d302      	bcc.n	8002b96 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e03a      	b.n	8002c10 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d023      	beq.n	8002bf0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2b80      	cmp	r3, #128	@ 0x80
 8002bac:	d020      	beq.n	8002bf0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2b40      	cmp	r3, #64	@ 0x40
 8002bb2:	d01d      	beq.n	8002bf0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	d116      	bne.n	8002bf0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	617b      	str	r3, [r7, #20]
 8002bd6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 f81d 	bl	8002c18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2208      	movs	r2, #8
 8002be2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e00f      	b.n	8002c10 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	bf0c      	ite	eq
 8002c00:	2301      	moveq	r3, #1
 8002c02:	2300      	movne	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	461a      	mov	r2, r3
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d0b4      	beq.n	8002b78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b095      	sub	sp, #84	@ 0x54
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	330c      	adds	r3, #12
 8002c26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c2a:	e853 3f00 	ldrex	r3, [r3]
 8002c2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	330c      	adds	r3, #12
 8002c3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c40:	643a      	str	r2, [r7, #64]	@ 0x40
 8002c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002c46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c48:	e841 2300 	strex	r3, r2, [r1]
 8002c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1e5      	bne.n	8002c20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	3314      	adds	r3, #20
 8002c5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	e853 3f00 	ldrex	r3, [r3]
 8002c62:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f023 0301 	bic.w	r3, r3, #1
 8002c6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	3314      	adds	r3, #20
 8002c72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c7c:	e841 2300 	strex	r3, r2, [r1]
 8002c80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1e5      	bne.n	8002c54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d119      	bne.n	8002cc4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	330c      	adds	r3, #12
 8002c96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	e853 3f00 	ldrex	r3, [r3]
 8002c9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f023 0310 	bic.w	r3, r3, #16
 8002ca6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	330c      	adds	r3, #12
 8002cae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002cb0:	61ba      	str	r2, [r7, #24]
 8002cb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb4:	6979      	ldr	r1, [r7, #20]
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	e841 2300 	strex	r3, r2, [r1]
 8002cbc:	613b      	str	r3, [r7, #16]
   return(result);
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1e5      	bne.n	8002c90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002cd2:	bf00      	nop
 8002cd4:	3754      	adds	r7, #84	@ 0x54
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
	...

08002ce0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ce4:	b0c0      	sub	sp, #256	@ 0x100
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cfc:	68d9      	ldr	r1, [r3, #12]
 8002cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	ea40 0301 	orr.w	r3, r0, r1
 8002d08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	431a      	orrs	r2, r3
 8002d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002d38:	f021 010c 	bic.w	r1, r1, #12
 8002d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002d46:	430b      	orrs	r3, r1
 8002d48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d5a:	6999      	ldr	r1, [r3, #24]
 8002d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	ea40 0301 	orr.w	r3, r0, r1
 8002d66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	4b8f      	ldr	r3, [pc, #572]	@ (8002fac <UART_SetConfig+0x2cc>)
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d005      	beq.n	8002d80 <UART_SetConfig+0xa0>
 8002d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	4b8d      	ldr	r3, [pc, #564]	@ (8002fb0 <UART_SetConfig+0x2d0>)
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d104      	bne.n	8002d8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d80:	f7ff f944 	bl	800200c <HAL_RCC_GetPCLK2Freq>
 8002d84:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002d88:	e003      	b.n	8002d92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d8a:	f7ff f92b 	bl	8001fe4 <HAL_RCC_GetPCLK1Freq>
 8002d8e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d9c:	f040 810c 	bne.w	8002fb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002da0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002da4:	2200      	movs	r2, #0
 8002da6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002daa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002dae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002db2:	4622      	mov	r2, r4
 8002db4:	462b      	mov	r3, r5
 8002db6:	1891      	adds	r1, r2, r2
 8002db8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002dba:	415b      	adcs	r3, r3
 8002dbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002dbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002dc2:	4621      	mov	r1, r4
 8002dc4:	eb12 0801 	adds.w	r8, r2, r1
 8002dc8:	4629      	mov	r1, r5
 8002dca:	eb43 0901 	adc.w	r9, r3, r1
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002de2:	4690      	mov	r8, r2
 8002de4:	4699      	mov	r9, r3
 8002de6:	4623      	mov	r3, r4
 8002de8:	eb18 0303 	adds.w	r3, r8, r3
 8002dec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002df0:	462b      	mov	r3, r5
 8002df2:	eb49 0303 	adc.w	r3, r9, r3
 8002df6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002e06:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002e0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002e0e:	460b      	mov	r3, r1
 8002e10:	18db      	adds	r3, r3, r3
 8002e12:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e14:	4613      	mov	r3, r2
 8002e16:	eb42 0303 	adc.w	r3, r2, r3
 8002e1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002e20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002e24:	f7fd fa34 	bl	8000290 <__aeabi_uldivmod>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	4b61      	ldr	r3, [pc, #388]	@ (8002fb4 <UART_SetConfig+0x2d4>)
 8002e2e:	fba3 2302 	umull	r2, r3, r3, r2
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	011c      	lsls	r4, r3, #4
 8002e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e40:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002e44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002e48:	4642      	mov	r2, r8
 8002e4a:	464b      	mov	r3, r9
 8002e4c:	1891      	adds	r1, r2, r2
 8002e4e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002e50:	415b      	adcs	r3, r3
 8002e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e58:	4641      	mov	r1, r8
 8002e5a:	eb12 0a01 	adds.w	sl, r2, r1
 8002e5e:	4649      	mov	r1, r9
 8002e60:	eb43 0b01 	adc.w	fp, r3, r1
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	f04f 0300 	mov.w	r3, #0
 8002e6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e78:	4692      	mov	sl, r2
 8002e7a:	469b      	mov	fp, r3
 8002e7c:	4643      	mov	r3, r8
 8002e7e:	eb1a 0303 	adds.w	r3, sl, r3
 8002e82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e86:	464b      	mov	r3, r9
 8002e88:	eb4b 0303 	adc.w	r3, fp, r3
 8002e8c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e9c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002ea0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	18db      	adds	r3, r3, r3
 8002ea8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002eaa:	4613      	mov	r3, r2
 8002eac:	eb42 0303 	adc.w	r3, r2, r3
 8002eb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002eb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002eb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002eba:	f7fd f9e9 	bl	8000290 <__aeabi_uldivmod>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	4b3b      	ldr	r3, [pc, #236]	@ (8002fb4 <UART_SetConfig+0x2d4>)
 8002ec6:	fba3 2301 	umull	r2, r3, r3, r1
 8002eca:	095b      	lsrs	r3, r3, #5
 8002ecc:	2264      	movs	r2, #100	@ 0x64
 8002ece:	fb02 f303 	mul.w	r3, r2, r3
 8002ed2:	1acb      	subs	r3, r1, r3
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002eda:	4b36      	ldr	r3, [pc, #216]	@ (8002fb4 <UART_SetConfig+0x2d4>)
 8002edc:	fba3 2302 	umull	r2, r3, r3, r2
 8002ee0:	095b      	lsrs	r3, r3, #5
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002ee8:	441c      	add	r4, r3
 8002eea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ef4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002ef8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002efc:	4642      	mov	r2, r8
 8002efe:	464b      	mov	r3, r9
 8002f00:	1891      	adds	r1, r2, r2
 8002f02:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002f04:	415b      	adcs	r3, r3
 8002f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002f0c:	4641      	mov	r1, r8
 8002f0e:	1851      	adds	r1, r2, r1
 8002f10:	6339      	str	r1, [r7, #48]	@ 0x30
 8002f12:	4649      	mov	r1, r9
 8002f14:	414b      	adcs	r3, r1
 8002f16:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f18:	f04f 0200 	mov.w	r2, #0
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002f24:	4659      	mov	r1, fp
 8002f26:	00cb      	lsls	r3, r1, #3
 8002f28:	4651      	mov	r1, sl
 8002f2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f2e:	4651      	mov	r1, sl
 8002f30:	00ca      	lsls	r2, r1, #3
 8002f32:	4610      	mov	r0, r2
 8002f34:	4619      	mov	r1, r3
 8002f36:	4603      	mov	r3, r0
 8002f38:	4642      	mov	r2, r8
 8002f3a:	189b      	adds	r3, r3, r2
 8002f3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f40:	464b      	mov	r3, r9
 8002f42:	460a      	mov	r2, r1
 8002f44:	eb42 0303 	adc.w	r3, r2, r3
 8002f48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002f58:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002f5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002f60:	460b      	mov	r3, r1
 8002f62:	18db      	adds	r3, r3, r3
 8002f64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f66:	4613      	mov	r3, r2
 8002f68:	eb42 0303 	adc.w	r3, r2, r3
 8002f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002f76:	f7fd f98b 	bl	8000290 <__aeabi_uldivmod>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002fb4 <UART_SetConfig+0x2d4>)
 8002f80:	fba3 1302 	umull	r1, r3, r3, r2
 8002f84:	095b      	lsrs	r3, r3, #5
 8002f86:	2164      	movs	r1, #100	@ 0x64
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	3332      	adds	r3, #50	@ 0x32
 8002f92:	4a08      	ldr	r2, [pc, #32]	@ (8002fb4 <UART_SetConfig+0x2d4>)
 8002f94:	fba2 2303 	umull	r2, r3, r2, r3
 8002f98:	095b      	lsrs	r3, r3, #5
 8002f9a:	f003 0207 	and.w	r2, r3, #7
 8002f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4422      	add	r2, r4
 8002fa6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002fa8:	e106      	b.n	80031b8 <UART_SetConfig+0x4d8>
 8002faa:	bf00      	nop
 8002fac:	40011000 	.word	0x40011000
 8002fb0:	40011400 	.word	0x40011400
 8002fb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002fc2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002fc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002fca:	4642      	mov	r2, r8
 8002fcc:	464b      	mov	r3, r9
 8002fce:	1891      	adds	r1, r2, r2
 8002fd0:	6239      	str	r1, [r7, #32]
 8002fd2:	415b      	adcs	r3, r3
 8002fd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fda:	4641      	mov	r1, r8
 8002fdc:	1854      	adds	r4, r2, r1
 8002fde:	4649      	mov	r1, r9
 8002fe0:	eb43 0501 	adc.w	r5, r3, r1
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	00eb      	lsls	r3, r5, #3
 8002fee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ff2:	00e2      	lsls	r2, r4, #3
 8002ff4:	4614      	mov	r4, r2
 8002ff6:	461d      	mov	r5, r3
 8002ff8:	4643      	mov	r3, r8
 8002ffa:	18e3      	adds	r3, r4, r3
 8002ffc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003000:	464b      	mov	r3, r9
 8003002:	eb45 0303 	adc.w	r3, r5, r3
 8003006:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800300a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003016:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003026:	4629      	mov	r1, r5
 8003028:	008b      	lsls	r3, r1, #2
 800302a:	4621      	mov	r1, r4
 800302c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003030:	4621      	mov	r1, r4
 8003032:	008a      	lsls	r2, r1, #2
 8003034:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003038:	f7fd f92a 	bl	8000290 <__aeabi_uldivmod>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	4b60      	ldr	r3, [pc, #384]	@ (80031c4 <UART_SetConfig+0x4e4>)
 8003042:	fba3 2302 	umull	r2, r3, r3, r2
 8003046:	095b      	lsrs	r3, r3, #5
 8003048:	011c      	lsls	r4, r3, #4
 800304a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800304e:	2200      	movs	r2, #0
 8003050:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003054:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003058:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800305c:	4642      	mov	r2, r8
 800305e:	464b      	mov	r3, r9
 8003060:	1891      	adds	r1, r2, r2
 8003062:	61b9      	str	r1, [r7, #24]
 8003064:	415b      	adcs	r3, r3
 8003066:	61fb      	str	r3, [r7, #28]
 8003068:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800306c:	4641      	mov	r1, r8
 800306e:	1851      	adds	r1, r2, r1
 8003070:	6139      	str	r1, [r7, #16]
 8003072:	4649      	mov	r1, r9
 8003074:	414b      	adcs	r3, r1
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	f04f 0200 	mov.w	r2, #0
 800307c:	f04f 0300 	mov.w	r3, #0
 8003080:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003084:	4659      	mov	r1, fp
 8003086:	00cb      	lsls	r3, r1, #3
 8003088:	4651      	mov	r1, sl
 800308a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800308e:	4651      	mov	r1, sl
 8003090:	00ca      	lsls	r2, r1, #3
 8003092:	4610      	mov	r0, r2
 8003094:	4619      	mov	r1, r3
 8003096:	4603      	mov	r3, r0
 8003098:	4642      	mov	r2, r8
 800309a:	189b      	adds	r3, r3, r2
 800309c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80030a0:	464b      	mov	r3, r9
 80030a2:	460a      	mov	r2, r1
 80030a4:	eb42 0303 	adc.w	r3, r2, r3
 80030a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80030ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80030b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	f04f 0300 	mov.w	r3, #0
 80030c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80030c4:	4649      	mov	r1, r9
 80030c6:	008b      	lsls	r3, r1, #2
 80030c8:	4641      	mov	r1, r8
 80030ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030ce:	4641      	mov	r1, r8
 80030d0:	008a      	lsls	r2, r1, #2
 80030d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80030d6:	f7fd f8db 	bl	8000290 <__aeabi_uldivmod>
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	4611      	mov	r1, r2
 80030e0:	4b38      	ldr	r3, [pc, #224]	@ (80031c4 <UART_SetConfig+0x4e4>)
 80030e2:	fba3 2301 	umull	r2, r3, r3, r1
 80030e6:	095b      	lsrs	r3, r3, #5
 80030e8:	2264      	movs	r2, #100	@ 0x64
 80030ea:	fb02 f303 	mul.w	r3, r2, r3
 80030ee:	1acb      	subs	r3, r1, r3
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	3332      	adds	r3, #50	@ 0x32
 80030f4:	4a33      	ldr	r2, [pc, #204]	@ (80031c4 <UART_SetConfig+0x4e4>)
 80030f6:	fba2 2303 	umull	r2, r3, r2, r3
 80030fa:	095b      	lsrs	r3, r3, #5
 80030fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003100:	441c      	add	r4, r3
 8003102:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003106:	2200      	movs	r2, #0
 8003108:	673b      	str	r3, [r7, #112]	@ 0x70
 800310a:	677a      	str	r2, [r7, #116]	@ 0x74
 800310c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003110:	4642      	mov	r2, r8
 8003112:	464b      	mov	r3, r9
 8003114:	1891      	adds	r1, r2, r2
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	415b      	adcs	r3, r3
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003120:	4641      	mov	r1, r8
 8003122:	1851      	adds	r1, r2, r1
 8003124:	6039      	str	r1, [r7, #0]
 8003126:	4649      	mov	r1, r9
 8003128:	414b      	adcs	r3, r1
 800312a:	607b      	str	r3, [r7, #4]
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	f04f 0300 	mov.w	r3, #0
 8003134:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003138:	4659      	mov	r1, fp
 800313a:	00cb      	lsls	r3, r1, #3
 800313c:	4651      	mov	r1, sl
 800313e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003142:	4651      	mov	r1, sl
 8003144:	00ca      	lsls	r2, r1, #3
 8003146:	4610      	mov	r0, r2
 8003148:	4619      	mov	r1, r3
 800314a:	4603      	mov	r3, r0
 800314c:	4642      	mov	r2, r8
 800314e:	189b      	adds	r3, r3, r2
 8003150:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003152:	464b      	mov	r3, r9
 8003154:	460a      	mov	r2, r1
 8003156:	eb42 0303 	adc.w	r3, r2, r3
 800315a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800315c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	663b      	str	r3, [r7, #96]	@ 0x60
 8003166:	667a      	str	r2, [r7, #100]	@ 0x64
 8003168:	f04f 0200 	mov.w	r2, #0
 800316c:	f04f 0300 	mov.w	r3, #0
 8003170:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003174:	4649      	mov	r1, r9
 8003176:	008b      	lsls	r3, r1, #2
 8003178:	4641      	mov	r1, r8
 800317a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800317e:	4641      	mov	r1, r8
 8003180:	008a      	lsls	r2, r1, #2
 8003182:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003186:	f7fd f883 	bl	8000290 <__aeabi_uldivmod>
 800318a:	4602      	mov	r2, r0
 800318c:	460b      	mov	r3, r1
 800318e:	4b0d      	ldr	r3, [pc, #52]	@ (80031c4 <UART_SetConfig+0x4e4>)
 8003190:	fba3 1302 	umull	r1, r3, r3, r2
 8003194:	095b      	lsrs	r3, r3, #5
 8003196:	2164      	movs	r1, #100	@ 0x64
 8003198:	fb01 f303 	mul.w	r3, r1, r3
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	011b      	lsls	r3, r3, #4
 80031a0:	3332      	adds	r3, #50	@ 0x32
 80031a2:	4a08      	ldr	r2, [pc, #32]	@ (80031c4 <UART_SetConfig+0x4e4>)
 80031a4:	fba2 2303 	umull	r2, r3, r2, r3
 80031a8:	095b      	lsrs	r3, r3, #5
 80031aa:	f003 020f 	and.w	r2, r3, #15
 80031ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4422      	add	r2, r4
 80031b6:	609a      	str	r2, [r3, #8]
}
 80031b8:	bf00      	nop
 80031ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80031be:	46bd      	mov	sp, r7
 80031c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031c4:	51eb851f 	.word	0x51eb851f

080031c8 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FMC_BCR1_WFDIS */
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	6812      	ldr	r2, [r2, #0]
 80031e0:	f023 0101 	bic.w	r1, r3, #1
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d102      	bne.n	80031f8 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80031f2:	2340      	movs	r3, #64	@ 0x40
 80031f4:	617b      	str	r3, [r7, #20]
 80031f6:	e001      	b.n	80031fc <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80031f8:	2300      	movs	r3, #0
 80031fa:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8003208:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800320e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8003214:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800321a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8003220:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8003226:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 800322c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8003232:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8003238:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 800323e:	4313      	orrs	r3, r2
 8003240:	613b      	str	r3, [r7, #16]

#if defined(FMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WRAPMOD */
#if defined(FMC_BCR1_CCLKEN)
  btcr_reg |= Init->ContinuousClock;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4313      	orrs	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_CCLKEN */
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	4313      	orrs	r3, r2
 800325e:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 8003260:	4b1b      	ldr	r3, [pc, #108]	@ (80032d0 <FMC_NORSRAM_Init+0x108>)
 8003262:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

#if defined(FMC_BCR1_WRAPMOD)
  mask |= FMC_BCR1_WRAPMOD;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800326a:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WRAPMOD */
#if defined(FMC_BCR1_CCLKEN)
  mask |= FMC_BCR1_CCLKEN;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003272:	60fb      	str	r3, [r7, #12]
#endif
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
#endif /* FMC_BCR1_WFDIS */
  mask |= FMC_BCR1_CPSIZE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800327a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	43db      	mvns	r3, r3
 800328a:	ea02 0103 	and.w	r1, r2, r3
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	4319      	orrs	r1, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(FMC_BCR1_CCLKEN)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032a4:	d10c      	bne.n	80032c0 <FMC_NORSRAM_Init+0xf8>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d008      	beq.n	80032c0 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	601a      	str	r2, [r3, #0]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FMC_BCR1_WFDIS */

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	371c      	adds	r7, #28
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	0008fb7f 	.word	0x0008fb7f

080032d4 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ea:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	431a      	orrs	r2, r3
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	021b      	lsls	r3, r3, #8
 8003300:	431a      	orrs	r2, r3
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	041b      	lsls	r3, r3, #16
 8003308:	431a      	orrs	r2, r3
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	3b01      	subs	r3, #1
 8003310:	051b      	lsls	r3, r3, #20
 8003312:	431a      	orrs	r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	3b02      	subs	r3, #2
 800331a:	061b      	lsls	r3, r3, #24
 800331c:	431a      	orrs	r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	4313      	orrs	r3, r2
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	3201      	adds	r2, #1
 8003328:	4319      	orrs	r1, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

#if defined(FMC_BCR1_CCLKEN)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003338:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800333c:	d113      	bne.n	8003366 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003346:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	3b01      	subs	r3, #1
 800334e:	051b      	lsls	r3, r3, #20
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	4313      	orrs	r3, r2
 8003354:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	431a      	orrs	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	605a      	str	r2, [r3, #4]
  }

#endif
  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	371c      	adds	r7, #28
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
 8003380:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003388:	d11d      	bne.n	80033c6 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003392:	4b13      	ldr	r3, [pc, #76]	@ (80033e0 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8003394:	4013      	ands	r3, r2
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	6811      	ldr	r1, [r2, #0]
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	6852      	ldr	r2, [r2, #4]
 800339e:	0112      	lsls	r2, r2, #4
 80033a0:	4311      	orrs	r1, r2
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	6892      	ldr	r2, [r2, #8]
 80033a6:	0212      	lsls	r2, r2, #8
 80033a8:	4311      	orrs	r1, r2
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	6992      	ldr	r2, [r2, #24]
 80033ae:	4311      	orrs	r1, r2
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	68d2      	ldr	r2, [r2, #12]
 80033b4:	0412      	lsls	r2, r2, #16
 80033b6:	430a      	orrs	r2, r1
 80033b8:	ea43 0102 	orr.w	r1, r3, r2
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80033c4:	e005      	b.n	80033d2 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80033ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	cff00000 	.word	0xcff00000

080033e4 <loopback_tcpc>:
   return 1;
}


int32_t loopback_tcpc(uint8_t sn, uint8_t* buf, uint8_t* destip, uint16_t destport)
{
 80033e4:	b5b0      	push	{r4, r5, r7, lr}
 80033e6:	b08a      	sub	sp, #40	@ 0x28
 80033e8:	af04      	add	r7, sp, #16
 80033ea:	60b9      	str	r1, [r7, #8]
 80033ec:	607a      	str	r2, [r7, #4]
 80033ee:	461a      	mov	r2, r3
 80033f0:	4603      	mov	r3, r0
 80033f2:	73fb      	strb	r3, [r7, #15]
 80033f4:	4613      	mov	r3, r2
 80033f6:	81bb      	strh	r3, [r7, #12]
   int32_t ret; // return value for SOCK_ERRORs
   uint16_t size = 0, sentsize=0;
 80033f8:	2300      	movs	r3, #0
 80033fa:	82fb      	strh	r3, [r7, #22]
 80033fc:	2300      	movs	r3, #0
 80033fe:	82bb      	strh	r3, [r7, #20]
   // Port number for TCP client (will be increased)
   static uint16_t any_port = 	50000;

   // Socket Status Transitions
   // Check the W5500 Socket n status register (Sn_SR, The 'Sn_SR' controlled by Sn_CR command or Packet send/recv status)
   switch(getSn_SR(sn))
 8003400:	7bfb      	ldrb	r3, [r7, #15]
 8003402:	3308      	adds	r3, #8
 8003404:	019b      	lsls	r3, r3, #6
 8003406:	3308      	adds	r3, #8
 8003408:	4618      	mov	r0, r3
 800340a:	f000 f949 	bl	80036a0 <WIZCHIP_READ>
 800340e:	4603      	mov	r3, r0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b1c      	cmp	r3, #28
 8003414:	f200 8105 	bhi.w	8003622 <loopback_tcpc+0x23e>
 8003418:	a201      	add	r2, pc, #4	@ (adr r2, 8003420 <loopback_tcpc+0x3c>)
 800341a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341e:	bf00      	nop
 8003420:	080035e1 	.word	0x080035e1
 8003424:	08003623 	.word	0x08003623
 8003428:	08003623 	.word	0x08003623
 800342c:	08003623 	.word	0x08003623
 8003430:	08003623 	.word	0x08003623
 8003434:	08003623 	.word	0x08003623
 8003438:	08003623 	.word	0x08003623
 800343c:	08003623 	.word	0x08003623
 8003440:	08003623 	.word	0x08003623
 8003444:	08003623 	.word	0x08003623
 8003448:	08003623 	.word	0x08003623
 800344c:	08003623 	.word	0x08003623
 8003450:	08003623 	.word	0x08003623
 8003454:	08003623 	.word	0x08003623
 8003458:	08003623 	.word	0x08003623
 800345c:	08003623 	.word	0x08003623
 8003460:	08003623 	.word	0x08003623
 8003464:	08003623 	.word	0x08003623
 8003468:	08003623 	.word	0x08003623
 800346c:	08003595 	.word	0x08003595
 8003470:	08003623 	.word	0x08003623
 8003474:	08003623 	.word	0x08003623
 8003478:	08003623 	.word	0x08003623
 800347c:	08003495 	.word	0x08003495
 8003480:	08003623 	.word	0x08003623
 8003484:	08003623 	.word	0x08003623
 8003488:	08003623 	.word	0x08003623
 800348c:	08003623 	.word	0x08003623
 8003490:	08003573 	.word	0x08003573
   {
      case SOCK_ESTABLISHED :
         if(getSn_IR(sn) & Sn_IR_CON)	// Socket n interrupt register mask; TCP CON interrupt = connection with peer is successful
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	3308      	adds	r3, #8
 8003498:	019b      	lsls	r3, r3, #6
 800349a:	3306      	adds	r3, #6
 800349c:	4618      	mov	r0, r3
 800349e:	f000 f8ff 	bl	80036a0 <WIZCHIP_READ>
 80034a2:	4603      	mov	r3, r0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d020      	beq.n	80034f0 <loopback_tcpc+0x10c>
         {
#ifdef _LOOPBACK_DEBUG_
			printf("%d:Connected to - %d.%d.%d.%d : %d\r\n",sn, destip[0], destip[1], destip[2], destip[3], destport);
 80034ae:	7bf9      	ldrb	r1, [r7, #15]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	461c      	mov	r4, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3301      	adds	r3, #1
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	461d      	mov	r5, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3302      	adds	r3, #2
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	461a      	mov	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	3303      	adds	r3, #3
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	89bb      	ldrh	r3, [r7, #12]
 80034d0:	9302      	str	r3, [sp, #8]
 80034d2:	9001      	str	r0, [sp, #4]
 80034d4:	9200      	str	r2, [sp, #0]
 80034d6:	462b      	mov	r3, r5
 80034d8:	4622      	mov	r2, r4
 80034da:	4858      	ldr	r0, [pc, #352]	@ (800363c <loopback_tcpc+0x258>)
 80034dc:	f004 f8ba 	bl	8007654 <iprintf>
#endif
			setSn_IR(sn, Sn_IR_CON);  // this interrupt should be write the bit cleared to '1'
 80034e0:	7bfb      	ldrb	r3, [r7, #15]
 80034e2:	3308      	adds	r3, #8
 80034e4:	019b      	lsls	r3, r3, #6
 80034e6:	3306      	adds	r3, #6
 80034e8:	2101      	movs	r1, #1
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 f8ae 	bl	800364c <WIZCHIP_WRITE>
         }

         //////////////////////////////////////////////////////////////////////////////////////////////
         // Data Transaction Parts; Handle the [data receive and send] process
         //////////////////////////////////////////////////////////////////////////////////////////////
		 if((size = getSn_RX_RSR(sn)) > 0) // Sn_RX_RSR: Socket n Received Size Register, Receiving data length
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 f9e0 	bl	80038b8 <getSn_RX_RSR>
 80034f8:	4603      	mov	r3, r0
 80034fa:	82fb      	strh	r3, [r7, #22]
 80034fc:	8afb      	ldrh	r3, [r7, #22]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 8091 	beq.w	8003626 <loopback_tcpc+0x242>
         {
			if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE; // DATA_BUF_SIZE means user defined buffer size (array)
 8003504:	8afb      	ldrh	r3, [r7, #22]
 8003506:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800350a:	d902      	bls.n	8003512 <loopback_tcpc+0x12e>
 800350c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003510:	82fb      	strh	r3, [r7, #22]
			ret = recv(sn, buf, size); // Data Receive process (H/W Rx socket buffer -> User's buffer)
 8003512:	8afa      	ldrh	r2, [r7, #22]
 8003514:	7bfb      	ldrb	r3, [r7, #15]
 8003516:	68b9      	ldr	r1, [r7, #8]
 8003518:	4618      	mov	r0, r3
 800351a:	f000 fead 	bl	8004278 <recv>
 800351e:	6138      	str	r0, [r7, #16]

			if(ret <= 0) return ret; // If the received data length <= 0, receive failed and process end
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	2b00      	cmp	r3, #0
 8003524:	dc01      	bgt.n	800352a <loopback_tcpc+0x146>
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	e083      	b.n	8003632 <loopback_tcpc+0x24e>
			size = (uint16_t) ret;
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	82fb      	strh	r3, [r7, #22]
			sentsize = 0;
 800352e:	2300      	movs	r3, #0
 8003530:	82bb      	strh	r3, [r7, #20]

			// Data sentsize control
			while(size != sentsize)
 8003532:	e019      	b.n	8003568 <loopback_tcpc+0x184>
			{
				ret = send(sn, buf+sentsize, size-sentsize); // Data send process (User's buffer -> Destination through H/W Tx socket buffer)
 8003534:	8abb      	ldrh	r3, [r7, #20]
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	18d1      	adds	r1, r2, r3
 800353a:	8afa      	ldrh	r2, [r7, #22]
 800353c:	8abb      	ldrh	r3, [r7, #20]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	b29a      	uxth	r2, r3
 8003542:	7bfb      	ldrb	r3, [r7, #15]
 8003544:	4618      	mov	r0, r3
 8003546:	f000 fd9b 	bl	8004080 <send>
 800354a:	6138      	str	r0, [r7, #16]
				if(ret < 0) // Send Error occurred (sent data length < 0)
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	2b00      	cmp	r3, #0
 8003550:	da05      	bge.n	800355e <loopback_tcpc+0x17a>
				{
					close(sn); // socket close
 8003552:	7bfb      	ldrb	r3, [r7, #15]
 8003554:	4618      	mov	r0, r3
 8003556:	f000 fb8d 	bl	8003c74 <close>
					return ret;
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	e069      	b.n	8003632 <loopback_tcpc+0x24e>
				}
				sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	b29a      	uxth	r2, r3
 8003562:	8abb      	ldrh	r3, [r7, #20]
 8003564:	4413      	add	r3, r2
 8003566:	82bb      	strh	r3, [r7, #20]
			while(size != sentsize)
 8003568:	8afa      	ldrh	r2, [r7, #22]
 800356a:	8abb      	ldrh	r3, [r7, #20]
 800356c:	429a      	cmp	r2, r3
 800356e:	d1e1      	bne.n	8003534 <loopback_tcpc+0x150>
			}
         }
		 //////////////////////////////////////////////////////////////////////////////////////////////
         break;
 8003570:	e059      	b.n	8003626 <loopback_tcpc+0x242>

      case SOCK_CLOSE_WAIT :
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:CloseWait\r\n",sn);
#endif
         if((ret=disconnect(sn)) != SOCK_OK) return ret;
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	4618      	mov	r0, r3
 8003576:	f000 fd13 	bl	8003fa0 <disconnect>
 800357a:	4603      	mov	r3, r0
 800357c:	613b      	str	r3, [r7, #16]
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d001      	beq.n	8003588 <loopback_tcpc+0x1a4>
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	e054      	b.n	8003632 <loopback_tcpc+0x24e>
#ifdef _LOOPBACK_DEBUG_
         printf("%d:Socket Closed\r\n", sn);
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	4619      	mov	r1, r3
 800358c:	482c      	ldr	r0, [pc, #176]	@ (8003640 <loopback_tcpc+0x25c>)
 800358e:	f004 f861 	bl	8007654 <iprintf>
#endif
         break;
 8003592:	e04d      	b.n	8003630 <loopback_tcpc+0x24c>

      case SOCK_INIT :
#ifdef _LOOPBACK_DEBUG_
    	 printf("%d:Try to connect to the %d.%d.%d.%d : %d\r\n", sn, destip[0], destip[1], destip[2], destip[3], destport);
 8003594:	7bf9      	ldrb	r1, [r7, #15]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	461c      	mov	r4, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3301      	adds	r3, #1
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	461d      	mov	r5, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3302      	adds	r3, #2
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	461a      	mov	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3303      	adds	r3, #3
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	89bb      	ldrh	r3, [r7, #12]
 80035b6:	9302      	str	r3, [sp, #8]
 80035b8:	9001      	str	r0, [sp, #4]
 80035ba:	9200      	str	r2, [sp, #0]
 80035bc:	462b      	mov	r3, r5
 80035be:	4622      	mov	r2, r4
 80035c0:	4820      	ldr	r0, [pc, #128]	@ (8003644 <loopback_tcpc+0x260>)
 80035c2:	f004 f847 	bl	8007654 <iprintf>
#endif
    	 if( (ret = connect(sn, destip, destport)) != SOCK_OK) return ret;	//	Try to TCP connect to the TCP server (destination)
 80035c6:	89ba      	ldrh	r2, [r7, #12]
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 fc0f 	bl	8003df0 <connect>
 80035d2:	4603      	mov	r3, r0
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d026      	beq.n	800362a <loopback_tcpc+0x246>
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	e028      	b.n	8003632 <loopback_tcpc+0x24e>
         break;

      case SOCK_CLOSED:
    	  close(sn);
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 fb46 	bl	8003c74 <close>
    	  if((ret=socket(sn, Sn_MR_TCP, any_port++, 0x00)) != sn){
 80035e8:	4b17      	ldr	r3, [pc, #92]	@ (8003648 <loopback_tcpc+0x264>)
 80035ea:	881a      	ldrh	r2, [r3, #0]
 80035ec:	1c53      	adds	r3, r2, #1
 80035ee:	b299      	uxth	r1, r3
 80035f0:	4b15      	ldr	r3, [pc, #84]	@ (8003648 <loopback_tcpc+0x264>)
 80035f2:	8019      	strh	r1, [r3, #0]
 80035f4:	7bf8      	ldrb	r0, [r7, #15]
 80035f6:	2300      	movs	r3, #0
 80035f8:	2101      	movs	r1, #1
 80035fa:	f000 fa21 	bl	8003a40 <socket>
 80035fe:	4603      	mov	r3, r0
 8003600:	613b      	str	r3, [r7, #16]
 8003602:	7bfb      	ldrb	r3, [r7, #15]
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	429a      	cmp	r2, r3
 8003608:	d011      	beq.n	800362e <loopback_tcpc+0x24a>
         if(any_port == 0xffff) any_port = 50000;
 800360a:	4b0f      	ldr	r3, [pc, #60]	@ (8003648 <loopback_tcpc+0x264>)
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003612:	4293      	cmp	r3, r2
 8003614:	d103      	bne.n	800361e <loopback_tcpc+0x23a>
 8003616:	4b0c      	ldr	r3, [pc, #48]	@ (8003648 <loopback_tcpc+0x264>)
 8003618:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800361c:	801a      	strh	r2, [r3, #0]
         return ret; // TCP socket open with 'any_port' port number
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	e007      	b.n	8003632 <loopback_tcpc+0x24e>
    	 //printf("%d:TCP client loopback start\r\n",sn);
         //printf("%d:Socket opened\r\n",sn);
#endif
         break;
      default:
         break;
 8003622:	bf00      	nop
 8003624:	e004      	b.n	8003630 <loopback_tcpc+0x24c>
         break;
 8003626:	bf00      	nop
 8003628:	e002      	b.n	8003630 <loopback_tcpc+0x24c>
         break;
 800362a:	bf00      	nop
 800362c:	e000      	b.n	8003630 <loopback_tcpc+0x24c>
         break;
 800362e:	bf00      	nop
   }
   return 1;
 8003630:	2301      	movs	r3, #1
}
 8003632:	4618      	mov	r0, r3
 8003634:	3718      	adds	r7, #24
 8003636:	46bd      	mov	sp, r7
 8003638:	bdb0      	pop	{r4, r5, r7, pc}
 800363a:	bf00      	nop
 800363c:	08008530 	.word	0x08008530
 8003640:	080084dc 	.word	0x080084dc
 8003644:	08008558 	.word	0x08008558
 8003648:	20000026 	.word	0x20000026

0800364c <WIZCHIP_WRITE>:
/***********************
 * Basic I/O  Function *
 ***********************/
 
void     WIZCHIP_WRITE(uint32_t AddrSel, uint16_t wb )
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	460b      	mov	r3, r1
 8003656:	807b      	strh	r3, [r7, #2]
   WIZCHIP_CRITICAL_ENTER();
 8003658:	4b10      	ldr	r3, [pc, #64]	@ (800369c <WIZCHIP_WRITE+0x50>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800365e:	4b0f      	ldr	r3, [pc, #60]	@ (800369c <WIZCHIP_WRITE+0x50>)
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	4798      	blx	r3

#if ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_) )
   #if(_WIZCHIP_IO_BUS_WIDTH_ == 8)
      WIZCHIP.IF.BUS._write_data(AddrSel,  (uint8_t)(wb>>8));
 8003664:	4b0d      	ldr	r3, [pc, #52]	@ (800369c <WIZCHIP_WRITE+0x50>)
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	887a      	ldrh	r2, [r7, #2]
 800366a:	0a12      	lsrs	r2, r2, #8
 800366c:	b292      	uxth	r2, r2
 800366e:	b2d2      	uxtb	r2, r2
 8003670:	4611      	mov	r1, r2
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	4798      	blx	r3
      WIZCHIP.IF.BUS._write_data(WIZCHIP_OFFSET_INC(AddrSel,1),(uint8_t)wb);
 8003676:	4b09      	ldr	r3, [pc, #36]	@ (800369c <WIZCHIP_WRITE+0x50>)
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	3201      	adds	r2, #1
 800367e:	8879      	ldrh	r1, [r7, #2]
 8003680:	b2c9      	uxtb	r1, r1
 8003682:	4610      	mov	r0, r2
 8003684:	4798      	blx	r3
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5300. !!!"
#endif

   WIZCHIP.CS._deselect();
 8003686:	4b05      	ldr	r3, [pc, #20]	@ (800369c <WIZCHIP_WRITE+0x50>)
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800368c:	4b03      	ldr	r3, [pc, #12]	@ (800369c <WIZCHIP_WRITE+0x50>)
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	4798      	blx	r3
}
 8003692:	bf00      	nop
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	2000002c 	.word	0x2000002c

080036a0 <WIZCHIP_READ>:

uint16_t WIZCHIP_READ(uint32_t AddrSel)
{
 80036a0:	b590      	push	{r4, r7, lr}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
   uint16_t ret;

   WIZCHIP_CRITICAL_ENTER();
 80036a8:	4b11      	ldr	r3, [pc, #68]	@ (80036f0 <WIZCHIP_READ+0x50>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	4798      	blx	r3
   WIZCHIP.CS._select();
 80036ae:	4b10      	ldr	r3, [pc, #64]	@ (80036f0 <WIZCHIP_READ+0x50>)
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	4798      	blx	r3

#if ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_) )
   #if (_WIZCHIP_IO_BUS_WIDTH_ == 8)
      ret = (((uint16_t)WIZCHIP.IF.BUS._read_data(AddrSel)) << 8) | 
 80036b4:	4b0e      	ldr	r3, [pc, #56]	@ (80036f0 <WIZCHIP_READ+0x50>)
 80036b6:	69db      	ldr	r3, [r3, #28]
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	4798      	blx	r3
 80036bc:	4603      	mov	r3, r0
 80036be:	021b      	lsls	r3, r3, #8
 80036c0:	b21c      	sxth	r4, r3
            (((uint16_t)WIZCHIP.IF.BUS._read_data(WIZCHIP_OFFSET_INC(AddrSel,1))) & 0x00FF) ;   
 80036c2:	4b0b      	ldr	r3, [pc, #44]	@ (80036f0 <WIZCHIP_READ+0x50>)
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	3201      	adds	r2, #1
 80036ca:	4610      	mov	r0, r2
 80036cc:	4798      	blx	r3
 80036ce:	4603      	mov	r3, r0
 80036d0:	b21b      	sxth	r3, r3
      ret = (((uint16_t)WIZCHIP.IF.BUS._read_data(AddrSel)) << 8) | 
 80036d2:	4323      	orrs	r3, r4
 80036d4:	b21b      	sxth	r3, r3
 80036d6:	81fb      	strh	r3, [r7, #14]
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5300. !!!"
#endif

   WIZCHIP.CS._deselect();
 80036d8:	4b05      	ldr	r3, [pc, #20]	@ (80036f0 <WIZCHIP_READ+0x50>)
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80036de:	4b04      	ldr	r3, [pc, #16]	@ (80036f0 <WIZCHIP_READ+0x50>)
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	4798      	blx	r3
   return ret;
 80036e4:	89fb      	ldrh	r3, [r7, #14]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd90      	pop	{r4, r7, pc}
 80036ee:	bf00      	nop
 80036f0:	2000002c 	.word	0x2000002c

080036f4 <setTMSR>:


void setTMSR(uint8_t sn,uint8_t tmsr)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	460a      	mov	r2, r1
 80036fe:	71fb      	strb	r3, [r7, #7]
 8003700:	4613      	mov	r3, r2
 8003702:	71bb      	strb	r3, [r7, #6]
   uint16_t tmem;
   tmem = WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE)));
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800370a:	3320      	adds	r3, #32
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff ffc7 	bl	80036a0 <WIZCHIP_READ>
 8003712:	4603      	mov	r3, r0
 8003714:	81fb      	strh	r3, [r7, #14]
   if(sn & 0x01)  tmem = (tmem & 0xFF00) | (((uint16_t)tmsr ) & 0x00FF) ;
 8003716:	79fb      	ldrb	r3, [r7, #7]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00a      	beq.n	8003736 <setTMSR+0x42>
 8003720:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003724:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003728:	b21a      	sxth	r2, r3
 800372a:	79bb      	ldrb	r3, [r7, #6]
 800372c:	b21b      	sxth	r3, r3
 800372e:	4313      	orrs	r3, r2
 8003730:	b21b      	sxth	r3, r3
 8003732:	81fb      	strh	r3, [r7, #14]
 8003734:	e009      	b.n	800374a <setTMSR+0x56>
   else tmem =  (tmem & 0x00FF) | (((uint16_t)tmsr) << 8) ;
 8003736:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800373a:	b2db      	uxtb	r3, r3
 800373c:	b21a      	sxth	r2, r3
 800373e:	79bb      	ldrb	r3, [r7, #6]
 8003740:	021b      	lsls	r3, r3, #8
 8003742:	b21b      	sxth	r3, r3
 8003744:	4313      	orrs	r3, r2
 8003746:	b21b      	sxth	r3, r3
 8003748:	81fb      	strh	r3, [r7, #14]
   WIZCHIP_WRITE(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE)),tmem);
 800374a:	79fb      	ldrb	r3, [r7, #7]
 800374c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003750:	3320      	adds	r3, #32
 8003752:	461a      	mov	r2, r3
 8003754:	89fb      	ldrh	r3, [r7, #14]
 8003756:	4619      	mov	r1, r3
 8003758:	4610      	mov	r0, r2
 800375a:	f7ff ff77 	bl	800364c <WIZCHIP_WRITE>
}
 800375e:	bf00      	nop
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <getTMSR>:
   
uint8_t getTMSR(uint8_t sn)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b082      	sub	sp, #8
 800376a:	af00      	add	r7, sp, #0
 800376c:	4603      	mov	r3, r0
 800376e:	71fb      	strb	r3, [r7, #7]
   if(sn & 0x01)
 8003770:	79fb      	ldrb	r3, [r7, #7]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d009      	beq.n	800378e <getTMSR+0x28>
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) & 0x00FF);
 800377a:	79fb      	ldrb	r3, [r7, #7]
 800377c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003780:	3320      	adds	r3, #32
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff ff8c 	bl	80036a0 <WIZCHIP_READ>
 8003788:	4603      	mov	r3, r0
 800378a:	b2db      	uxtb	r3, r3
 800378c:	e00a      	b.n	80037a4 <getTMSR+0x3e>
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) >> 8);
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003794:	3320      	adds	r3, #32
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff ff82 	bl	80036a0 <WIZCHIP_READ>
 800379c:	4603      	mov	r3, r0
 800379e:	0a1b      	lsrs	r3, r3, #8
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	b2db      	uxtb	r3, r3
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <setRMSR>:

void setRMSR(uint8_t sn,uint8_t rmsr)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	4603      	mov	r3, r0
 80037b4:	460a      	mov	r2, r1
 80037b6:	71fb      	strb	r3, [r7, #7]
 80037b8:	4613      	mov	r3, r2
 80037ba:	71bb      	strb	r3, [r7, #6]
   uint16_t rmem;
   rmem = WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE)));
 80037bc:	79fb      	ldrb	r3, [r7, #7]
 80037be:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80037c2:	3328      	adds	r3, #40	@ 0x28
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff ff6b 	bl	80036a0 <WIZCHIP_READ>
 80037ca:	4603      	mov	r3, r0
 80037cc:	81fb      	strh	r3, [r7, #14]
   if(sn & 0x01)  rmem = (rmem & 0xFF00) | (((uint16_t)rmsr ) & 0x00FF) ;
 80037ce:	79fb      	ldrb	r3, [r7, #7]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <setRMSR+0x42>
 80037d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037dc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80037e0:	b21a      	sxth	r2, r3
 80037e2:	79bb      	ldrb	r3, [r7, #6]
 80037e4:	b21b      	sxth	r3, r3
 80037e6:	4313      	orrs	r3, r2
 80037e8:	b21b      	sxth	r3, r3
 80037ea:	81fb      	strh	r3, [r7, #14]
 80037ec:	e009      	b.n	8003802 <setRMSR+0x56>
   else rmem =  (rmem & 0x00FF) | (((uint16_t)rmsr) << 8) ;
 80037ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	b21a      	sxth	r2, r3
 80037f6:	79bb      	ldrb	r3, [r7, #6]
 80037f8:	021b      	lsls	r3, r3, #8
 80037fa:	b21b      	sxth	r3, r3
 80037fc:	4313      	orrs	r3, r2
 80037fe:	b21b      	sxth	r3, r3
 8003800:	81fb      	strh	r3, [r7, #14]
   WIZCHIP_WRITE(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE)),rmem);
 8003802:	79fb      	ldrb	r3, [r7, #7]
 8003804:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003808:	3328      	adds	r3, #40	@ 0x28
 800380a:	461a      	mov	r2, r3
 800380c:	89fb      	ldrh	r3, [r7, #14]
 800380e:	4619      	mov	r1, r3
 8003810:	4610      	mov	r0, r2
 8003812:	f7ff ff1b 	bl	800364c <WIZCHIP_WRITE>
}
 8003816:	bf00      	nop
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <getRMSR>:
   
uint8_t getRMSR(uint8_t sn)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b082      	sub	sp, #8
 8003822:	af00      	add	r7, sp, #0
 8003824:	4603      	mov	r3, r0
 8003826:	71fb      	strb	r3, [r7, #7]
   if(sn & 0x01)
 8003828:	79fb      	ldrb	r3, [r7, #7]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d009      	beq.n	8003846 <getRMSR+0x28>
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) & 0x00FF);
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003838:	3328      	adds	r3, #40	@ 0x28
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff ff30 	bl	80036a0 <WIZCHIP_READ>
 8003840:	4603      	mov	r3, r0
 8003842:	b2db      	uxtb	r3, r3
 8003844:	e00a      	b.n	800385c <getRMSR+0x3e>
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) >> 8);
 8003846:	79fb      	ldrb	r3, [r7, #7]
 8003848:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800384c:	3328      	adds	r3, #40	@ 0x28
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff ff26 	bl	80036a0 <WIZCHIP_READ>
 8003854:	4603      	mov	r3, r0
 8003856:	0a1b      	lsrs	r3, r3, #8
 8003858:	b29b      	uxth	r3, r3
 800385a:	b2db      	uxtb	r3, r3
}
 800385c:	4618      	mov	r0, r3
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <getSn_TX_FSR>:

uint32_t getSn_TX_FSR(uint8_t sn)
{
 8003864:	b590      	push	{r4, r7, lr}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	4603      	mov	r3, r0
 800386c:	71fb      	strb	r3, [r7, #7]
   uint32_t free_tx_size=0;
 800386e:	2300      	movs	r3, #0
 8003870:	60bb      	str	r3, [r7, #8]
   uint32_t free_tx_size1=1;
 8003872:	2301      	movs	r3, #1
 8003874:	60fb      	str	r3, [r7, #12]
   while(1)
   {
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 8003876:	79fb      	ldrb	r3, [r7, #7]
 8003878:	3308      	adds	r3, #8
 800387a:	019b      	lsls	r3, r3, #6
 800387c:	3324      	adds	r3, #36	@ 0x24
 800387e:	4618      	mov	r0, r3
 8003880:	f7ff ff0e 	bl	80036a0 <WIZCHIP_READ>
 8003884:	4603      	mov	r3, r0
 8003886:	041c      	lsls	r4, r3, #16
                     (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),2))) & 0x0000FFFF);                           // read
 8003888:	79fb      	ldrb	r3, [r7, #7]
 800388a:	3308      	adds	r3, #8
 800388c:	019b      	lsls	r3, r3, #6
 800388e:	3326      	adds	r3, #38	@ 0x26
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff ff05 	bl	80036a0 <WIZCHIP_READ>
 8003896:	4603      	mov	r3, r0
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 8003898:	4323      	orrs	r3, r4
 800389a:	60bb      	str	r3, [r7, #8]
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d002      	beq.n	80038aa <getSn_TX_FSR+0x46>
      free_tx_size1 = free_tx_size;             // save second value into first                                                   
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	60fb      	str	r3, [r7, #12]
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 80038a8:	e7e5      	b.n	8003876 <getSn_TX_FSR+0x12>
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
 80038aa:	bf00      	nop
   }                                                                       
   return free_tx_size;                                                    
 80038ac:	68bb      	ldr	r3, [r7, #8]
}                                                                          
 80038ae:	4618      	mov	r0, r3
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd90      	pop	{r4, r7, pc}
	...

080038b8 <getSn_RX_RSR>:

uint32_t getSn_RX_RSR(uint8_t sn)
{
 80038b8:	b590      	push	{r4, r7, lr}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	71fb      	strb	r3, [r7, #7]
   uint32_t received_rx_size=0;
 80038c2:	2300      	movs	r3, #0
 80038c4:	60bb      	str	r3, [r7, #8]
   uint32_t received_rx_size1=1;
 80038c6:	2301      	movs	r3, #1
 80038c8:	60fb      	str	r3, [r7, #12]
   while(1)
   {
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 80038ca:	79fb      	ldrb	r3, [r7, #7]
 80038cc:	3308      	adds	r3, #8
 80038ce:	019b      	lsls	r3, r3, #6
 80038d0:	3328      	adds	r3, #40	@ 0x28
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff fee4 	bl	80036a0 <WIZCHIP_READ>
 80038d8:	4603      	mov	r3, r0
 80038da:	041c      	lsls	r4, r3, #16
                         (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),2))) & 0x0000FFFF);
 80038dc:	79fb      	ldrb	r3, [r7, #7]
 80038de:	3308      	adds	r3, #8
 80038e0:	019b      	lsls	r3, r3, #6
 80038e2:	332a      	adds	r3, #42	@ 0x2a
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff fedb 	bl	80036a0 <WIZCHIP_READ>
 80038ea:	4603      	mov	r3, r0
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 80038ec:	4323      	orrs	r3, r4
 80038ee:	60bb      	str	r3, [r7, #8]
      if(received_rx_size == received_rx_size1) break;                                                                         
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d002      	beq.n	80038fe <getSn_RX_RSR+0x46>
      received_rx_size1 = received_rx_size;                                      // if first == sencond, Sn_RX_RSR value is valid.
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	60fb      	str	r3, [r7, #12]
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 80038fc:	e7e5      	b.n	80038ca <getSn_RX_RSR+0x12>
      if(received_rx_size == received_rx_size1) break;                                                                         
 80038fe:	bf00      	nop
   }                                                                             // save second value into first                
   return received_rx_size + (uint32_t)((sock_pack_info[sn] & 0x02) ? 1 : 0);   
 8003900:	79fb      	ldrb	r3, [r7, #7]
 8003902:	4a05      	ldr	r2, [pc, #20]	@ (8003918 <getSn_RX_RSR+0x60>)
 8003904:	5cd3      	ldrb	r3, [r2, r3]
 8003906:	105b      	asrs	r3, r3, #1
 8003908:	f003 0201 	and.w	r2, r3, #1
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	4413      	add	r3, r2
}
 8003910:	4618      	mov	r0, r3
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	bd90      	pop	{r4, r7, pc}
 8003918:	200011f0 	.word	0x200011f0

0800391c <wiz_send_data>:


void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	4603      	mov	r3, r0
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
 8003928:	73fb      	strb	r3, [r7, #15]
   uint32_t i = 0;
 800392a:	2300      	movs	r3, #0
 800392c:	617b      	str	r3, [r7, #20]
   if(len == 0)  return;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d021      	beq.n	8003978 <wiz_send_data+0x5c>
   
   for(i = 0; i < len ; i += 2)
 8003934:	2300      	movs	r3, #0
 8003936:	617b      	str	r3, [r7, #20]
 8003938:	e019      	b.n	800396e <wiz_send_data+0x52>
      setSn_TX_FIFOR(sn, (((uint16_t)wizdata[i]) << 8) | (((uint16_t)wizdata[i+1]) & 0x00FF))
 800393a:	7bfb      	ldrb	r3, [r7, #15]
 800393c:	3308      	adds	r3, #8
 800393e:	019b      	lsls	r3, r3, #6
 8003940:	332e      	adds	r3, #46	@ 0x2e
 8003942:	4618      	mov	r0, r3
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	4413      	add	r3, r2
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	021b      	lsls	r3, r3, #8
 800394e:	b21a      	sxth	r2, r3
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	3301      	adds	r3, #1
 8003954:	68b9      	ldr	r1, [r7, #8]
 8003956:	440b      	add	r3, r1
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	b21b      	sxth	r3, r3
 800395c:	4313      	orrs	r3, r2
 800395e:	b21b      	sxth	r3, r3
 8003960:	b29b      	uxth	r3, r3
 8003962:	4619      	mov	r1, r3
 8003964:	f7ff fe72 	bl	800364c <WIZCHIP_WRITE>
   for(i = 0; i < len ; i += 2)
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	3302      	adds	r3, #2
 800396c:	617b      	str	r3, [r7, #20]
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	429a      	cmp	r2, r3
 8003974:	d3e1      	bcc.n	800393a <wiz_send_data+0x1e>
 8003976:	e000      	b.n	800397a <wiz_send_data+0x5e>
   if(len == 0)  return;
 8003978:	bf00      	nop
}
 800397a:	3718      	adds	r7, #24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
 800398c:	73fb      	strb	r3, [r7, #15]
   uint16_t rd = 0;
 800398e:	2300      	movs	r3, #0
 8003990:	82fb      	strh	r3, [r7, #22]
   uint32_t i = 0;
 8003992:	2300      	movs	r3, #0
 8003994:	613b      	str	r3, [r7, #16]
   
   if(len == 0) return;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d02c      	beq.n	80039f6 <wiz_recv_data+0x76>
      
   for(i = 0; i < len; i++)
 800399c:	2300      	movs	r3, #0
 800399e:	613b      	str	r3, [r7, #16]
 80039a0:	e01f      	b.n	80039e2 <wiz_recv_data+0x62>
   {
      if((i & 0x01)==0)
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d111      	bne.n	80039d0 <wiz_recv_data+0x50>
      {
         rd = getSn_RX_FIFOR(sn);
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
 80039ae:	3308      	adds	r3, #8
 80039b0:	019b      	lsls	r3, r3, #6
 80039b2:	3330      	adds	r3, #48	@ 0x30
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff fe73 	bl	80036a0 <WIZCHIP_READ>
 80039ba:	4603      	mov	r3, r0
 80039bc:	82fb      	strh	r3, [r7, #22]
         wizdata[i]   = (uint8_t)(rd >> 8);
 80039be:	8afb      	ldrh	r3, [r7, #22]
 80039c0:	0a1b      	lsrs	r3, r3, #8
 80039c2:	b299      	uxth	r1, r3
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	4413      	add	r3, r2
 80039ca:	b2ca      	uxtb	r2, r1
 80039cc:	701a      	strb	r2, [r3, #0]
 80039ce:	e005      	b.n	80039dc <wiz_recv_data+0x5c>
      }
      else  wizdata[i] = (uint8_t)rd;  // For checking the memory access violation
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	4413      	add	r3, r2
 80039d6:	8afa      	ldrh	r2, [r7, #22]
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < len; i++)
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	3301      	adds	r3, #1
 80039e0:	613b      	str	r3, [r7, #16]
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d3db      	bcc.n	80039a2 <wiz_recv_data+0x22>
   }
   sock_remained_byte[sn] = (uint8_t)rd; // back up the remaind fifo byte.
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
 80039ec:	8afa      	ldrh	r2, [r7, #22]
 80039ee:	b2d1      	uxtb	r1, r2
 80039f0:	4a03      	ldr	r2, [pc, #12]	@ (8003a00 <wiz_recv_data+0x80>)
 80039f2:	54d1      	strb	r1, [r2, r3]
 80039f4:	e000      	b.n	80039f8 <wiz_recv_data+0x78>
   if(len == 0) return;
 80039f6:	bf00      	nop
}
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	200011f8 	.word	0x200011f8

08003a04 <wiz_recv_ignore>:

void wiz_recv_ignore(uint8_t sn, uint32_t len)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	6039      	str	r1, [r7, #0]
 8003a0e:	71fb      	strb	r3, [r7, #7]
   uint32_t i = 0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	60fb      	str	r3, [r7, #12]
   for(i = 0; i < len ; i += 2) getSn_RX_FIFOR(sn);
 8003a14:	2300      	movs	r3, #0
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	e009      	b.n	8003a2e <wiz_recv_ignore+0x2a>
 8003a1a:	79fb      	ldrb	r3, [r7, #7]
 8003a1c:	3308      	adds	r3, #8
 8003a1e:	019b      	lsls	r3, r3, #6
 8003a20:	3330      	adds	r3, #48	@ 0x30
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7ff fe3c 	bl	80036a0 <WIZCHIP_READ>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	3302      	adds	r3, #2
 8003a2c:	60fb      	str	r3, [r7, #12]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d3f1      	bcc.n	8003a1a <wiz_recv_ignore+0x16>
}
 8003a36:	bf00      	nop
 8003a38:	bf00      	nop
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8003a40:	b590      	push	{r4, r7, lr}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	4604      	mov	r4, r0
 8003a48:	4608      	mov	r0, r1
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	4623      	mov	r3, r4
 8003a50:	71fb      	strb	r3, [r7, #7]
 8003a52:	4603      	mov	r3, r0
 8003a54:	71bb      	strb	r3, [r7, #6]
 8003a56:	460b      	mov	r3, r1
 8003a58:	80bb      	strh	r3, [r7, #4]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8003a5e:	79fb      	ldrb	r3, [r7, #7]
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d902      	bls.n	8003a6a <socket+0x2a>
 8003a64:	f04f 33ff 	mov.w	r3, #4294967295
 8003a68:	e0f6      	b.n	8003c58 <socket+0x218>
	switch(protocol)
 8003a6a:	79bb      	ldrb	r3, [r7, #6]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d005      	beq.n	8003a7c <socket+0x3c>
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	dd32      	ble.n	8003ada <socket+0x9a>
 8003a74:	3b02      	subs	r3, #2
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d82f      	bhi.n	8003ada <socket+0x9a>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8003a7a:	e032      	b.n	8003ae2 <socket+0xa2>
            getSIPR((uint8_t*)&taddr);
 8003a7c:	2018      	movs	r0, #24
 8003a7e:	f7ff fe0f 	bl	80036a0 <WIZCHIP_READ>
 8003a82:	4603      	mov	r3, r0
 8003a84:	0a1b      	lsrs	r3, r3, #8
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	f107 030c 	add.w	r3, r7, #12
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	701a      	strb	r2, [r3, #0]
 8003a90:	2018      	movs	r0, #24
 8003a92:	f7ff fe05 	bl	80036a0 <WIZCHIP_READ>
 8003a96:	4603      	mov	r3, r0
 8003a98:	461a      	mov	r2, r3
 8003a9a:	f107 030c 	add.w	r3, r7, #12
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	b2d2      	uxtb	r2, r2
 8003aa2:	701a      	strb	r2, [r3, #0]
 8003aa4:	201a      	movs	r0, #26
 8003aa6:	f7ff fdfb 	bl	80036a0 <WIZCHIP_READ>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	0a1b      	lsrs	r3, r3, #8
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	f107 030c 	add.w	r3, r7, #12
 8003ab4:	3302      	adds	r3, #2
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	701a      	strb	r2, [r3, #0]
 8003aba:	201a      	movs	r0, #26
 8003abc:	f7ff fdf0 	bl	80036a0 <WIZCHIP_READ>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	f107 030c 	add.w	r3, r7, #12
 8003ac8:	3303      	adds	r3, #3
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	701a      	strb	r2, [r3, #0]
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d105      	bne.n	8003ae0 <socket+0xa0>
 8003ad4:	f06f 0302 	mvn.w	r3, #2
 8003ad8:	e0be      	b.n	8003c58 <socket+0x218>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8003ada:	f06f 0304 	mvn.w	r3, #4
 8003ade:	e0bb      	b.n	8003c58 <socket+0x218>
	    break;
 8003ae0:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8003ae2:	78fb      	ldrb	r3, [r7, #3]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d002      	beq.n	8003af2 <socket+0xb2>
 8003aec:	f06f 0305 	mvn.w	r3, #5
 8003af0:	e0b2      	b.n	8003c58 <socket+0x218>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8003af2:	78fb      	ldrb	r3, [r7, #3]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d01c      	beq.n	8003b32 <socket+0xf2>
	{
   	switch(protocol)
 8003af8:	79bb      	ldrb	r3, [r7, #6]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d002      	beq.n	8003b04 <socket+0xc4>
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d008      	beq.n	8003b14 <socket+0xd4>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8003b02:	e016      	b.n	8003b32 <socket+0xf2>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK|SF_TCP_ALIGN))==0) return SOCKERR_SOCKFLAG;
 8003b04:	78fb      	ldrb	r3, [r7, #3]
 8003b06:	f003 0323 	and.w	r3, r3, #35	@ 0x23
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10e      	bne.n	8003b2c <socket+0xec>
 8003b0e:	f06f 0305 	mvn.w	r3, #5
 8003b12:	e0a1      	b.n	8003c58 <socket+0x218>
   	      if(flag & SF_IGMP_VER2)
 8003b14:	78fb      	ldrb	r3, [r7, #3]
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d008      	beq.n	8003b30 <socket+0xf0>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8003b1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	db04      	blt.n	8003b30 <socket+0xf0>
 8003b26:	f06f 0305 	mvn.w	r3, #5
 8003b2a:	e095      	b.n	8003c58 <socket+0x218>
   	      break;
 8003b2c:	bf00      	nop
 8003b2e:	e000      	b.n	8003b32 <socket+0xf2>
   	      break;
 8003b30:	bf00      	nop
   	}
   }
	close(sn);
 8003b32:	79fb      	ldrb	r3, [r7, #7]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 f89d 	bl	8003c74 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
 8003b3a:	79fb      	ldrb	r3, [r7, #7]
 8003b3c:	3308      	adds	r3, #8
 8003b3e:	019b      	lsls	r3, r3, #6
 8003b40:	4618      	mov	r0, r3
 8003b42:	79bb      	ldrb	r3, [r7, #6]
 8003b44:	b21a      	sxth	r2, r3
 8003b46:	78fb      	ldrb	r3, [r7, #3]
 8003b48:	b21b      	sxth	r3, r3
 8003b4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b4e:	b21b      	sxth	r3, r3
 8003b50:	4313      	orrs	r3, r2
 8003b52:	b21a      	sxth	r2, r3
 8003b54:	78fb      	ldrb	r3, [r7, #3]
 8003b56:	01db      	lsls	r3, r3, #7
 8003b58:	b21b      	sxth	r3, r3
 8003b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b5e:	b21b      	sxth	r3, r3
 8003b60:	4313      	orrs	r3, r2
 8003b62:	b21b      	sxth	r3, r3
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	4619      	mov	r1, r3
 8003b68:	f7ff fd70 	bl	800364c <WIZCHIP_WRITE>
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
    #endif
	if(!port)
 8003b6c:	88bb      	ldrh	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d110      	bne.n	8003b94 <socket+0x154>
	{
	   port = sock_any_port++;
 8003b72:	4b3b      	ldr	r3, [pc, #236]	@ (8003c60 <socket+0x220>)
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	1c5a      	adds	r2, r3, #1
 8003b78:	b291      	uxth	r1, r2
 8003b7a:	4a39      	ldr	r2, [pc, #228]	@ (8003c60 <socket+0x220>)
 8003b7c:	8011      	strh	r1, [r2, #0]
 8003b7e:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8003b80:	4b37      	ldr	r3, [pc, #220]	@ (8003c60 <socket+0x220>)
 8003b82:	881b      	ldrh	r3, [r3, #0]
 8003b84:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d103      	bne.n	8003b94 <socket+0x154>
 8003b8c:	4b34      	ldr	r3, [pc, #208]	@ (8003c60 <socket+0x220>)
 8003b8e:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8003b92:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8003b94:	79fb      	ldrb	r3, [r7, #7]
 8003b96:	3308      	adds	r3, #8
 8003b98:	019b      	lsls	r3, r3, #6
 8003b9a:	330a      	adds	r3, #10
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	88bb      	ldrh	r3, [r7, #4]
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4610      	mov	r0, r2
 8003ba4:	f7ff fd52 	bl	800364c <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8003ba8:	79fb      	ldrb	r3, [r7, #7]
 8003baa:	3308      	adds	r3, #8
 8003bac:	019b      	lsls	r3, r3, #6
 8003bae:	3302      	adds	r3, #2
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7ff fd4a 	bl	800364c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003bb8:	bf00      	nop
 8003bba:	79fb      	ldrb	r3, [r7, #7]
 8003bbc:	3308      	adds	r3, #8
 8003bbe:	019b      	lsls	r3, r3, #6
 8003bc0:	3302      	adds	r3, #2
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7ff fd6c 	bl	80036a0 <WIZCHIP_READ>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1f4      	bne.n	8003bba <socket+0x17a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8003bd0:	79fb      	ldrb	r3, [r7, #7]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	b21b      	sxth	r3, r3
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	b21a      	sxth	r2, r3
 8003bde:	4b21      	ldr	r3, [pc, #132]	@ (8003c64 <socket+0x224>)
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	b21b      	sxth	r3, r3
 8003be4:	4013      	ands	r3, r2
 8003be6:	b21b      	sxth	r3, r3
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	4b1e      	ldr	r3, [pc, #120]	@ (8003c64 <socket+0x224>)
 8003bec:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8003bee:	78fb      	ldrb	r3, [r7, #3]
 8003bf0:	f003 0201 	and.w	r2, r3, #1
 8003bf4:	79fb      	ldrb	r3, [r7, #7]
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	b21a      	sxth	r2, r3
 8003bfc:	4b19      	ldr	r3, [pc, #100]	@ (8003c64 <socket+0x224>)
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	b21b      	sxth	r3, r3
 8003c02:	4313      	orrs	r3, r2
 8003c04:	b21b      	sxth	r3, r3
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	4b16      	ldr	r3, [pc, #88]	@ (8003c64 <socket+0x224>)
 8003c0a:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8003c0c:	79fb      	ldrb	r3, [r7, #7]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	b21b      	sxth	r3, r3
 8003c16:	43db      	mvns	r3, r3
 8003c18:	b21a      	sxth	r2, r3
 8003c1a:	4b13      	ldr	r3, [pc, #76]	@ (8003c68 <socket+0x228>)
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	b21b      	sxth	r3, r3
 8003c20:	4013      	ands	r3, r2
 8003c22:	b21b      	sxth	r3, r3
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	4b10      	ldr	r3, [pc, #64]	@ (8003c68 <socket+0x228>)
 8003c28:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8003c2a:	79fb      	ldrb	r3, [r7, #7]
 8003c2c:	4a0f      	ldr	r2, [pc, #60]	@ (8003c6c <socket+0x22c>)
 8003c2e:	2100      	movs	r1, #0
 8003c30:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8003c34:	79fb      	ldrb	r3, [r7, #7]
 8003c36:	4a0e      	ldr	r2, [pc, #56]	@ (8003c70 <socket+0x230>)
 8003c38:	2100      	movs	r1, #0
 8003c3a:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8003c3c:	bf00      	nop
 8003c3e:	79fb      	ldrb	r3, [r7, #7]
 8003c40:	3308      	adds	r3, #8
 8003c42:	019b      	lsls	r3, r3, #6
 8003c44:	3308      	adds	r3, #8
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7ff fd2a 	bl	80036a0 <WIZCHIP_READ>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0f4      	beq.n	8003c3e <socket+0x1fe>
   return (int8_t)sn;
 8003c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd90      	pop	{r4, r7, pc}
 8003c60:	20000028 	.word	0x20000028
 8003c64:	200011dc 	.word	0x200011dc
 8003c68:	200011de 	.word	0x200011de
 8003c6c:	200011e0 	.word	0x200011e0
 8003c70:	200011f0 	.word	0x200011f0

08003c74 <close>:

int8_t close(uint8_t sn)
{
 8003c74:	b590      	push	{r4, r7, lr}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8003c7e:	79fb      	ldrb	r3, [r7, #7]
 8003c80:	2b08      	cmp	r3, #8
 8003c82:	d902      	bls.n	8003c8a <close+0x16>
 8003c84:	f04f 33ff 	mov.w	r3, #4294967295
 8003c88:	e0a5      	b.n	8003dd6 <close+0x162>
//A20160426 : Applied the erratum 1 of W5300
#if   (_WIZCHIP_ == 5300) 
   //M20160503 : Wrong socket parameter. s -> sn 
   //if( ((getSn_MR(s)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(s) != getSn_TxMAX(s)) ) 
   if( ((getSn_MR(sn)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(sn) != getSn_TxMAX(sn)) ) 
 8003c8a:	79fb      	ldrb	r3, [r7, #7]
 8003c8c:	3308      	adds	r3, #8
 8003c8e:	019b      	lsls	r3, r3, #6
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff fd05 	bl	80036a0 <WIZCHIP_READ>
 8003c96:	4603      	mov	r3, r0
 8003c98:	f003 030f 	and.w	r3, r3, #15
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d14a      	bne.n	8003d36 <close+0xc2>
 8003ca0:	79fb      	ldrb	r3, [r7, #7]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7ff fdde 	bl	8003864 <getSn_TX_FSR>
 8003ca8:	4604      	mov	r4, r0
 8003caa:	79fb      	ldrb	r3, [r7, #7]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7ff fd5a 	bl	8003766 <getTMSR>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	029b      	lsls	r3, r3, #10
 8003cb6:	429c      	cmp	r4, r3
 8003cb8:	d03d      	beq.n	8003d36 <close+0xc2>
   { 
      uint8_t destip[4] = {0, 0, 0, 1};
 8003cba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003cbe:	60fb      	str	r3, [r7, #12]
      //     if (getSn_TX_FSR(s) == getSn_TxMAX(s)) continue;
      // 
      //M20160503 : The socket() of close() calls close() itself again. It occures a infinite loop - close()->socket()->close()->socket()-> ~
      //socket(s,Sn_MR_UDP,0x3000,0);
      //sendto(s,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
      setSn_MR(sn,Sn_MR_UDP);
 8003cc0:	79fb      	ldrb	r3, [r7, #7]
 8003cc2:	3308      	adds	r3, #8
 8003cc4:	019b      	lsls	r3, r3, #6
 8003cc6:	2102      	movs	r1, #2
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff fcbf 	bl	800364c <WIZCHIP_WRITE>
      setSn_PORTR(sn, 0x3000);
 8003cce:	79fb      	ldrb	r3, [r7, #7]
 8003cd0:	3308      	adds	r3, #8
 8003cd2:	019b      	lsls	r3, r3, #6
 8003cd4:	330a      	adds	r3, #10
 8003cd6:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff fcb6 	bl	800364c <WIZCHIP_WRITE>
      setSn_CR(sn,Sn_CR_OPEN);
 8003ce0:	79fb      	ldrb	r3, [r7, #7]
 8003ce2:	3308      	adds	r3, #8
 8003ce4:	019b      	lsls	r3, r3, #6
 8003ce6:	3302      	adds	r3, #2
 8003ce8:	2101      	movs	r1, #1
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff fcae 	bl	800364c <WIZCHIP_WRITE>
      while(getSn_CR(sn) != 0);
 8003cf0:	bf00      	nop
 8003cf2:	79fb      	ldrb	r3, [r7, #7]
 8003cf4:	3308      	adds	r3, #8
 8003cf6:	019b      	lsls	r3, r3, #6
 8003cf8:	3302      	adds	r3, #2
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff fcd0 	bl	80036a0 <WIZCHIP_READ>
 8003d00:	4603      	mov	r3, r0
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1f4      	bne.n	8003cf2 <close+0x7e>
      while(getSn_SR(sn) != SOCK_UDP);
 8003d08:	bf00      	nop
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	3308      	adds	r3, #8
 8003d0e:	019b      	lsls	r3, r3, #6
 8003d10:	3308      	adds	r3, #8
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff fcc4 	bl	80036a0 <WIZCHIP_READ>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b22      	cmp	r3, #34	@ 0x22
 8003d1e:	d1f4      	bne.n	8003d0a <close+0x96>
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
 8003d20:	f107 030c 	add.w	r3, r7, #12
 8003d24:	f107 010c 	add.w	r1, r7, #12
 8003d28:	79f8      	ldrb	r0, [r7, #7]
 8003d2a:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8003d2e:	9200      	str	r2, [sp, #0]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f000 fc07 	bl	8004544 <sendto>
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8003d36:	79fb      	ldrb	r3, [r7, #7]
 8003d38:	3308      	adds	r3, #8
 8003d3a:	019b      	lsls	r3, r3, #6
 8003d3c:	3302      	adds	r3, #2
 8003d3e:	2110      	movs	r1, #16
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7ff fc83 	bl	800364c <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8003d46:	bf00      	nop
 8003d48:	79fb      	ldrb	r3, [r7, #7]
 8003d4a:	3308      	adds	r3, #8
 8003d4c:	019b      	lsls	r3, r3, #6
 8003d4e:	3302      	adds	r3, #2
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7ff fca5 	bl	80036a0 <WIZCHIP_READ>
 8003d56:	4603      	mov	r3, r0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1f4      	bne.n	8003d48 <close+0xd4>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8003d5e:	79fb      	ldrb	r3, [r7, #7]
 8003d60:	3308      	adds	r3, #8
 8003d62:	019b      	lsls	r3, r3, #6
 8003d64:	3306      	adds	r3, #6
 8003d66:	21ff      	movs	r1, #255	@ 0xff
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff fc6f 	bl	800364c <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8003d6e:	79fb      	ldrb	r3, [r7, #7]
 8003d70:	2201      	movs	r2, #1
 8003d72:	fa02 f303 	lsl.w	r3, r2, r3
 8003d76:	b21b      	sxth	r3, r3
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	b21a      	sxth	r2, r3
 8003d7c:	4b18      	ldr	r3, [pc, #96]	@ (8003de0 <close+0x16c>)
 8003d7e:	881b      	ldrh	r3, [r3, #0]
 8003d80:	b21b      	sxth	r3, r3
 8003d82:	4013      	ands	r3, r2
 8003d84:	b21b      	sxth	r3, r3
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	4b15      	ldr	r3, [pc, #84]	@ (8003de0 <close+0x16c>)
 8003d8a:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8003d8c:	79fb      	ldrb	r3, [r7, #7]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	b21b      	sxth	r3, r3
 8003d96:	43db      	mvns	r3, r3
 8003d98:	b21a      	sxth	r2, r3
 8003d9a:	4b12      	ldr	r3, [pc, #72]	@ (8003de4 <close+0x170>)
 8003d9c:	881b      	ldrh	r3, [r3, #0]
 8003d9e:	b21b      	sxth	r3, r3
 8003da0:	4013      	ands	r3, r2
 8003da2:	b21b      	sxth	r3, r3
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	4b0f      	ldr	r3, [pc, #60]	@ (8003de4 <close+0x170>)
 8003da8:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8003daa:	79fb      	ldrb	r3, [r7, #7]
 8003dac:	4a0e      	ldr	r2, [pc, #56]	@ (8003de8 <close+0x174>)
 8003dae:	2100      	movs	r1, #0
 8003db0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8003db4:	79fb      	ldrb	r3, [r7, #7]
 8003db6:	4a0d      	ldr	r2, [pc, #52]	@ (8003dec <close+0x178>)
 8003db8:	2100      	movs	r1, #0
 8003dba:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8003dbc:	bf00      	nop
 8003dbe:	79fb      	ldrb	r3, [r7, #7]
 8003dc0:	3308      	adds	r3, #8
 8003dc2:	019b      	lsls	r3, r3, #6
 8003dc4:	3308      	adds	r3, #8
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7ff fc6a 	bl	80036a0 <WIZCHIP_READ>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1f4      	bne.n	8003dbe <close+0x14a>
	return SOCK_OK;
 8003dd4:	2301      	movs	r3, #1
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3714      	adds	r7, #20
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd90      	pop	{r4, r7, pc}
 8003dde:	bf00      	nop
 8003de0:	200011dc 	.word	0x200011dc
 8003de4:	200011de 	.word	0x200011de
 8003de8:	200011e0 	.word	0x200011e0
 8003dec:	200011f0 	.word	0x200011f0

08003df0 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	4603      	mov	r3, r0
 8003df8:	6039      	str	r1, [r7, #0]
 8003dfa:	71fb      	strb	r3, [r7, #7]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8003e00:	79fb      	ldrb	r3, [r7, #7]
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d902      	bls.n	8003e0c <connect+0x1c>
 8003e06:	f04f 33ff 	mov.w	r3, #4294967295
 8003e0a:	e0c2      	b.n	8003f92 <connect+0x1a2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	3308      	adds	r3, #8
 8003e10:	019b      	lsls	r3, r3, #6
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff fc44 	bl	80036a0 <WIZCHIP_READ>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d002      	beq.n	8003e28 <connect+0x38>
 8003e22:	f06f 0304 	mvn.w	r3, #4
 8003e26:	e0b4      	b.n	8003f92 <connect+0x1a2>
   CHECK_SOCKINIT();
 8003e28:	79fb      	ldrb	r3, [r7, #7]
 8003e2a:	3308      	adds	r3, #8
 8003e2c:	019b      	lsls	r3, r3, #6
 8003e2e:	3308      	adds	r3, #8
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff fc35 	bl	80036a0 <WIZCHIP_READ>
 8003e36:	4603      	mov	r3, r0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b13      	cmp	r3, #19
 8003e3c:	d002      	beq.n	8003e44 <connect+0x54>
 8003e3e:	f06f 0302 	mvn.w	r3, #2
 8003e42:	e0a6      	b.n	8003f92 <connect+0x1a2>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	021b      	lsls	r3, r3, #8
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	3201      	adds	r2, #1
 8003e52:	7812      	ldrb	r2, [r2, #0]
 8003e54:	4413      	add	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	021b      	lsls	r3, r3, #8
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	3202      	adds	r2, #2
 8003e60:	7812      	ldrb	r2, [r2, #0]
 8003e62:	4413      	add	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	021b      	lsls	r3, r3, #8
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	3203      	adds	r2, #3
 8003e6e:	7812      	ldrb	r2, [r2, #0]
 8003e70:	4413      	add	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7a:	d002      	beq.n	8003e82 <connect+0x92>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d102      	bne.n	8003e88 <connect+0x98>
 8003e82:	f06f 030b 	mvn.w	r3, #11
 8003e86:	e084      	b.n	8003f92 <connect+0x1a2>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8003e88:	88bb      	ldrh	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d102      	bne.n	8003e94 <connect+0xa4>
 8003e8e:	f06f 030a 	mvn.w	r3, #10
 8003e92:	e07e      	b.n	8003f92 <connect+0x1a2>
	setSn_DIPR(sn,addr);
 8003e94:	79fb      	ldrb	r3, [r7, #7]
 8003e96:	3308      	adds	r3, #8
 8003e98:	019b      	lsls	r3, r3, #6
 8003e9a:	3314      	adds	r3, #20
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	021b      	lsls	r3, r3, #8
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	3201      	adds	r2, #1
 8003eaa:	7812      	ldrb	r2, [r2, #0]
 8003eac:	4413      	add	r3, r2
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	f7ff fbcb 	bl	800364c <WIZCHIP_WRITE>
 8003eb6:	79fb      	ldrb	r3, [r7, #7]
 8003eb8:	3308      	adds	r3, #8
 8003eba:	019b      	lsls	r3, r3, #6
 8003ebc:	3316      	adds	r3, #22
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	3302      	adds	r3, #2
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	021b      	lsls	r3, r3, #8
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	3203      	adds	r2, #3
 8003ece:	7812      	ldrb	r2, [r2, #0]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	f7ff fbb9 	bl	800364c <WIZCHIP_WRITE>
	setSn_DPORT(sn,port);
 8003eda:	79fb      	ldrb	r3, [r7, #7]
 8003edc:	3308      	adds	r3, #8
 8003ede:	019b      	lsls	r3, r3, #6
 8003ee0:	3312      	adds	r3, #18
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	88bb      	ldrh	r3, [r7, #4]
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	4610      	mov	r0, r2
 8003eea:	f7ff fbaf 	bl	800364c <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8003eee:	79fb      	ldrb	r3, [r7, #7]
 8003ef0:	3308      	adds	r3, #8
 8003ef2:	019b      	lsls	r3, r3, #6
 8003ef4:	3302      	adds	r3, #2
 8003ef6:	2104      	movs	r1, #4
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff fba7 	bl	800364c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003efe:	bf00      	nop
 8003f00:	79fb      	ldrb	r3, [r7, #7]
 8003f02:	3308      	adds	r3, #8
 8003f04:	019b      	lsls	r3, r3, #6
 8003f06:	3302      	adds	r3, #2
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff fbc9 	bl	80036a0 <WIZCHIP_READ>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f4      	bne.n	8003f00 <connect+0x110>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8003f16:	4b21      	ldr	r3, [pc, #132]	@ (8003f9c <connect+0x1ac>)
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	79fb      	ldrb	r3, [r7, #7]
 8003f1e:	fa42 f303 	asr.w	r3, r2, r3
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d027      	beq.n	8003f7a <connect+0x18a>
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	e031      	b.n	8003f92 <connect+0x1a2>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8003f2e:	79fb      	ldrb	r3, [r7, #7]
 8003f30:	3308      	adds	r3, #8
 8003f32:	019b      	lsls	r3, r3, #6
 8003f34:	3306      	adds	r3, #6
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff fbb2 	bl	80036a0 <WIZCHIP_READ>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <connect+0x16e>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8003f48:	79fb      	ldrb	r3, [r7, #7]
 8003f4a:	3308      	adds	r3, #8
 8003f4c:	019b      	lsls	r3, r3, #6
 8003f4e:	3306      	adds	r3, #6
 8003f50:	2108      	movs	r1, #8
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff fb7a 	bl	800364c <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8003f58:	f06f 030c 	mvn.w	r3, #12
 8003f5c:	e019      	b.n	8003f92 <connect+0x1a2>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8003f5e:	79fb      	ldrb	r3, [r7, #7]
 8003f60:	3308      	adds	r3, #8
 8003f62:	019b      	lsls	r3, r3, #6
 8003f64:	3308      	adds	r3, #8
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7ff fb9a 	bl	80036a0 <WIZCHIP_READ>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d102      	bne.n	8003f7a <connect+0x18a>
		{
			return SOCKERR_SOCKCLOSED;
 8003f74:	f06f 0303 	mvn.w	r3, #3
 8003f78:	e00b      	b.n	8003f92 <connect+0x1a2>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8003f7a:	79fb      	ldrb	r3, [r7, #7]
 8003f7c:	3308      	adds	r3, #8
 8003f7e:	019b      	lsls	r3, r3, #6
 8003f80:	3308      	adds	r3, #8
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff fb8c 	bl	80036a0 <WIZCHIP_READ>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b17      	cmp	r3, #23
 8003f8e:	d1ce      	bne.n	8003f2e <connect+0x13e>
		}
	}
   
   return SOCK_OK;
 8003f90:	2301      	movs	r3, #1
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	200011dc 	.word	0x200011dc

08003fa0 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8003faa:	79fb      	ldrb	r3, [r7, #7]
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	d902      	bls.n	8003fb6 <disconnect+0x16>
 8003fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb4:	e05c      	b.n	8004070 <disconnect+0xd0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003fb6:	79fb      	ldrb	r3, [r7, #7]
 8003fb8:	3308      	adds	r3, #8
 8003fba:	019b      	lsls	r3, r3, #6
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff fb6f 	bl	80036a0 <WIZCHIP_READ>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	f003 030f 	and.w	r3, r3, #15
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d002      	beq.n	8003fd2 <disconnect+0x32>
 8003fcc:	f06f 0304 	mvn.w	r3, #4
 8003fd0:	e04e      	b.n	8004070 <disconnect+0xd0>
	setSn_CR(sn,Sn_CR_DISCON);
 8003fd2:	79fb      	ldrb	r3, [r7, #7]
 8003fd4:	3308      	adds	r3, #8
 8003fd6:	019b      	lsls	r3, r3, #6
 8003fd8:	3302      	adds	r3, #2
 8003fda:	2108      	movs	r1, #8
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff fb35 	bl	800364c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8003fe2:	bf00      	nop
 8003fe4:	79fb      	ldrb	r3, [r7, #7]
 8003fe6:	3308      	adds	r3, #8
 8003fe8:	019b      	lsls	r3, r3, #6
 8003fea:	3302      	adds	r3, #2
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff fb57 	bl	80036a0 <WIZCHIP_READ>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f4      	bne.n	8003fe4 <disconnect+0x44>
	sock_is_sending &= ~(1<<sn);
 8003ffa:	79fb      	ldrb	r3, [r7, #7]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	b21b      	sxth	r3, r3
 8004004:	43db      	mvns	r3, r3
 8004006:	b21a      	sxth	r2, r3
 8004008:	4b1b      	ldr	r3, [pc, #108]	@ (8004078 <disconnect+0xd8>)
 800400a:	881b      	ldrh	r3, [r3, #0]
 800400c:	b21b      	sxth	r3, r3
 800400e:	4013      	ands	r3, r2
 8004010:	b21b      	sxth	r3, r3
 8004012:	b29a      	uxth	r2, r3
 8004014:	4b18      	ldr	r3, [pc, #96]	@ (8004078 <disconnect+0xd8>)
 8004016:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8004018:	4b18      	ldr	r3, [pc, #96]	@ (800407c <disconnect+0xdc>)
 800401a:	881b      	ldrh	r3, [r3, #0]
 800401c:	461a      	mov	r2, r3
 800401e:	79fb      	ldrb	r3, [r7, #7]
 8004020:	fa42 f303 	asr.w	r3, r2, r3
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d015      	beq.n	8004058 <disconnect+0xb8>
 800402c:	2300      	movs	r3, #0
 800402e:	e01f      	b.n	8004070 <disconnect+0xd0>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8004030:	79fb      	ldrb	r3, [r7, #7]
 8004032:	3308      	adds	r3, #8
 8004034:	019b      	lsls	r3, r3, #6
 8004036:	3306      	adds	r3, #6
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff fb31 	bl	80036a0 <WIZCHIP_READ>
 800403e:	4603      	mov	r3, r0
 8004040:	b2db      	uxtb	r3, r3
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b00      	cmp	r3, #0
 8004048:	d006      	beq.n	8004058 <disconnect+0xb8>
	   {
	      close(sn);
 800404a:	79fb      	ldrb	r3, [r7, #7]
 800404c:	4618      	mov	r0, r3
 800404e:	f7ff fe11 	bl	8003c74 <close>
	      return SOCKERR_TIMEOUT;
 8004052:	f06f 030c 	mvn.w	r3, #12
 8004056:	e00b      	b.n	8004070 <disconnect+0xd0>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8004058:	79fb      	ldrb	r3, [r7, #7]
 800405a:	3308      	adds	r3, #8
 800405c:	019b      	lsls	r3, r3, #6
 800405e:	3308      	adds	r3, #8
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff fb1d 	bl	80036a0 <WIZCHIP_READ>
 8004066:	4603      	mov	r3, r0
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1e0      	bne.n	8004030 <disconnect+0x90>
	   }
	}
	return SOCK_OK;
 800406e:	2301      	movs	r3, #1
}
 8004070:	4618      	mov	r0, r3
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	200011de 	.word	0x200011de
 800407c:	200011dc 	.word	0x200011dc

08004080 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	4603      	mov	r3, r0
 8004088:	6039      	str	r1, [r7, #0]
 800408a:	71fb      	strb	r3, [r7, #7]
 800408c:	4613      	mov	r3, r2
 800408e:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8004090:	2300      	movs	r3, #0
 8004092:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8004094:	2300      	movs	r3, #0
 8004096:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8004098:	79fb      	ldrb	r3, [r7, #7]
 800409a:	2b08      	cmp	r3, #8
 800409c:	d902      	bls.n	80040a4 <send+0x24>
 800409e:	f04f 33ff 	mov.w	r3, #4294967295
 80040a2:	e0e0      	b.n	8004266 <send+0x1e6>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80040a4:	79fb      	ldrb	r3, [r7, #7]
 80040a6:	3308      	adds	r3, #8
 80040a8:	019b      	lsls	r3, r3, #6
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff faf8 	bl	80036a0 <WIZCHIP_READ>
 80040b0:	4603      	mov	r3, r0
 80040b2:	f003 030f 	and.w	r3, r3, #15
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d002      	beq.n	80040c0 <send+0x40>
 80040ba:	f06f 0304 	mvn.w	r3, #4
 80040be:	e0d2      	b.n	8004266 <send+0x1e6>
   CHECK_SOCKDATA();
 80040c0:	88bb      	ldrh	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d102      	bne.n	80040cc <send+0x4c>
 80040c6:	f06f 030d 	mvn.w	r3, #13
 80040ca:	e0cc      	b.n	8004266 <send+0x1e6>
   tmp = getSn_SR(sn);
 80040cc:	79fb      	ldrb	r3, [r7, #7]
 80040ce:	3308      	adds	r3, #8
 80040d0:	019b      	lsls	r3, r3, #6
 80040d2:	3308      	adds	r3, #8
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff fae3 	bl	80036a0 <WIZCHIP_READ>
 80040da:	4603      	mov	r3, r0
 80040dc:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 80040de:	7bfb      	ldrb	r3, [r7, #15]
 80040e0:	2b17      	cmp	r3, #23
 80040e2:	d005      	beq.n	80040f0 <send+0x70>
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
 80040e6:	2b1c      	cmp	r3, #28
 80040e8:	d002      	beq.n	80040f0 <send+0x70>
 80040ea:	f06f 0306 	mvn.w	r3, #6
 80040ee:	e0ba      	b.n	8004266 <send+0x1e6>
   if( sock_is_sending & (1<<sn) )
 80040f0:	4b5f      	ldr	r3, [pc, #380]	@ (8004270 <send+0x1f0>)
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	461a      	mov	r2, r3
 80040f6:	79fb      	ldrb	r3, [r7, #7]
 80040f8:	fa42 f303 	asr.w	r3, r2, r3
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d033      	beq.n	800416c <send+0xec>
   {
      tmp = getSn_IR(sn);
 8004104:	79fb      	ldrb	r3, [r7, #7]
 8004106:	3308      	adds	r3, #8
 8004108:	019b      	lsls	r3, r3, #6
 800410a:	3306      	adds	r3, #6
 800410c:	4618      	mov	r0, r3
 800410e:	f7ff fac7 	bl	80036a0 <WIZCHIP_READ>
 8004112:	4603      	mov	r3, r0
 8004114:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8004116:	7bfb      	ldrb	r3, [r7, #15]
 8004118:	f003 0310 	and.w	r3, r3, #16
 800411c:	2b00      	cmp	r3, #0
 800411e:	d017      	beq.n	8004150 <send+0xd0>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8004120:	79fb      	ldrb	r3, [r7, #7]
 8004122:	3308      	adds	r3, #8
 8004124:	019b      	lsls	r3, r3, #6
 8004126:	3306      	adds	r3, #6
 8004128:	2110      	movs	r1, #16
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff fa8e 	bl	800364c <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8004130:	79fb      	ldrb	r3, [r7, #7]
 8004132:	2201      	movs	r2, #1
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	b21b      	sxth	r3, r3
 800413a:	43db      	mvns	r3, r3
 800413c:	b21a      	sxth	r2, r3
 800413e:	4b4c      	ldr	r3, [pc, #304]	@ (8004270 <send+0x1f0>)
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	b21b      	sxth	r3, r3
 8004144:	4013      	ands	r3, r2
 8004146:	b21b      	sxth	r3, r3
 8004148:	b29a      	uxth	r2, r3
 800414a:	4b49      	ldr	r3, [pc, #292]	@ (8004270 <send+0x1f0>)
 800414c:	801a      	strh	r2, [r3, #0]
 800414e:	e00d      	b.n	800416c <send+0xec>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8004150:	7bfb      	ldrb	r3, [r7, #15]
 8004152:	f003 0308 	and.w	r3, r3, #8
 8004156:	2b00      	cmp	r3, #0
 8004158:	d006      	beq.n	8004168 <send+0xe8>
      {
         close(sn);
 800415a:	79fb      	ldrb	r3, [r7, #7]
 800415c:	4618      	mov	r0, r3
 800415e:	f7ff fd89 	bl	8003c74 <close>
         return SOCKERR_TIMEOUT;
 8004162:	f06f 030c 	mvn.w	r3, #12
 8004166:	e07e      	b.n	8004266 <send+0x1e6>
      }
      else return SOCK_BUSY;
 8004168:	2300      	movs	r3, #0
 800416a:	e07c      	b.n	8004266 <send+0x1e6>
   }
   freesize = getSn_TxMAX(sn);
 800416c:	79fb      	ldrb	r3, [r7, #7]
 800416e:	4618      	mov	r0, r3
 8004170:	f7ff faf9 	bl	8003766 <getTMSR>
 8004174:	4603      	mov	r3, r0
 8004176:	029b      	lsls	r3, r3, #10
 8004178:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800417a:	88ba      	ldrh	r2, [r7, #4]
 800417c:	89bb      	ldrh	r3, [r7, #12]
 800417e:	429a      	cmp	r2, r3
 8004180:	d901      	bls.n	8004186 <send+0x106>
 8004182:	89bb      	ldrh	r3, [r7, #12]
 8004184:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8004186:	79fb      	ldrb	r3, [r7, #7]
 8004188:	4618      	mov	r0, r3
 800418a:	f7ff fb6b 	bl	8003864 <getSn_TX_FSR>
 800418e:	4603      	mov	r3, r0
 8004190:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8004192:	79fb      	ldrb	r3, [r7, #7]
 8004194:	3308      	adds	r3, #8
 8004196:	019b      	lsls	r3, r3, #6
 8004198:	3308      	adds	r3, #8
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff fa80 	bl	80036a0 <WIZCHIP_READ>
 80041a0:	4603      	mov	r3, r0
 80041a2:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80041a4:	7bfb      	ldrb	r3, [r7, #15]
 80041a6:	2b17      	cmp	r3, #23
 80041a8:	d009      	beq.n	80041be <send+0x13e>
 80041aa:	7bfb      	ldrb	r3, [r7, #15]
 80041ac:	2b1c      	cmp	r3, #28
 80041ae:	d006      	beq.n	80041be <send+0x13e>
      {
         close(sn);
 80041b0:	79fb      	ldrb	r3, [r7, #7]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7ff fd5e 	bl	8003c74 <close>
         return SOCKERR_SOCKSTATUS;
 80041b8:	f06f 0306 	mvn.w	r3, #6
 80041bc:	e053      	b.n	8004266 <send+0x1e6>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80041be:	4b2d      	ldr	r3, [pc, #180]	@ (8004274 <send+0x1f4>)
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	79fb      	ldrb	r3, [r7, #7]
 80041c6:	fa42 f303 	asr.w	r3, r2, r3
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d005      	beq.n	80041de <send+0x15e>
 80041d2:	88ba      	ldrh	r2, [r7, #4]
 80041d4:	89bb      	ldrh	r3, [r7, #12]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d901      	bls.n	80041de <send+0x15e>
 80041da:	2300      	movs	r3, #0
 80041dc:	e043      	b.n	8004266 <send+0x1e6>
      if(len <= freesize) break;
 80041de:	88ba      	ldrh	r2, [r7, #4]
 80041e0:	89bb      	ldrh	r3, [r7, #12]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d900      	bls.n	80041e8 <send+0x168>
      freesize = getSn_TX_FSR(sn);
 80041e6:	e7ce      	b.n	8004186 <send+0x106>
      if(len <= freesize) break;
 80041e8:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 80041ea:	88ba      	ldrh	r2, [r7, #4]
 80041ec:	79fb      	ldrb	r3, [r7, #7]
 80041ee:	6839      	ldr	r1, [r7, #0]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7ff fb93 	bl	800391c <wiz_send_data>
   #if _WIZCHIP_ == 5200
      sock_next_rd[sn] = getSn_TX_RD(sn) + len;
   #endif

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
 80041f6:	79fb      	ldrb	r3, [r7, #7]
 80041f8:	3308      	adds	r3, #8
 80041fa:	019b      	lsls	r3, r3, #6
 80041fc:	3320      	adds	r3, #32
 80041fe:	461a      	mov	r2, r3
 8004200:	88bb      	ldrh	r3, [r7, #4]
 8004202:	0c1b      	lsrs	r3, r3, #16
 8004204:	b29b      	uxth	r3, r3
 8004206:	4619      	mov	r1, r3
 8004208:	4610      	mov	r0, r2
 800420a:	f7ff fa1f 	bl	800364c <WIZCHIP_WRITE>
 800420e:	79fb      	ldrb	r3, [r7, #7]
 8004210:	3308      	adds	r3, #8
 8004212:	019b      	lsls	r3, r3, #6
 8004214:	3322      	adds	r3, #34	@ 0x22
 8004216:	461a      	mov	r2, r3
 8004218:	88bb      	ldrh	r3, [r7, #4]
 800421a:	4619      	mov	r1, r3
 800421c:	4610      	mov	r0, r2
 800421e:	f7ff fa15 	bl	800364c <WIZCHIP_WRITE>
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8004222:	79fb      	ldrb	r3, [r7, #7]
 8004224:	3308      	adds	r3, #8
 8004226:	019b      	lsls	r3, r3, #6
 8004228:	3302      	adds	r3, #2
 800422a:	2120      	movs	r1, #32
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff fa0d 	bl	800364c <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8004232:	bf00      	nop
 8004234:	79fb      	ldrb	r3, [r7, #7]
 8004236:	3308      	adds	r3, #8
 8004238:	019b      	lsls	r3, r3, #6
 800423a:	3302      	adds	r3, #2
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff fa2f 	bl	80036a0 <WIZCHIP_READ>
 8004242:	4603      	mov	r3, r0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f4      	bne.n	8004234 <send+0x1b4>
   sock_is_sending |= (1 << sn);
 800424a:	79fb      	ldrb	r3, [r7, #7]
 800424c:	2201      	movs	r2, #1
 800424e:	fa02 f303 	lsl.w	r3, r2, r3
 8004252:	b21a      	sxth	r2, r3
 8004254:	4b06      	ldr	r3, [pc, #24]	@ (8004270 <send+0x1f0>)
 8004256:	881b      	ldrh	r3, [r3, #0]
 8004258:	b21b      	sxth	r3, r3
 800425a:	4313      	orrs	r3, r2
 800425c:	b21b      	sxth	r3, r3
 800425e:	b29a      	uxth	r2, r3
 8004260:	4b03      	ldr	r3, [pc, #12]	@ (8004270 <send+0x1f0>)
 8004262:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004264:	88bb      	ldrh	r3, [r7, #4]
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	200011de 	.word	0x200011de
 8004274:	200011dc 	.word	0x200011dc

08004278 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8004278:	b590      	push	{r4, r7, lr}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	4603      	mov	r3, r0
 8004280:	6039      	str	r1, [r7, #0]
 8004282:	71fb      	strb	r3, [r7, #7]
 8004284:	4613      	mov	r3, r2
 8004286:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8004288:	2300      	movs	r3, #0
 800428a:	737b      	strb	r3, [r7, #13]
   uint16_t recvsize = 0;
 800428c:	2300      	movs	r3, #0
 800428e:	81fb      	strh	r3, [r7, #14]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8004290:	79fb      	ldrb	r3, [r7, #7]
 8004292:	2b08      	cmp	r3, #8
 8004294:	d902      	bls.n	800429c <recv+0x24>
 8004296:	f04f 33ff 	mov.w	r3, #4294967295
 800429a:	e147      	b.n	800452c <recv+0x2b4>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800429c:	79fb      	ldrb	r3, [r7, #7]
 800429e:	3308      	adds	r3, #8
 80042a0:	019b      	lsls	r3, r3, #6
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff f9fc 	bl	80036a0 <WIZCHIP_READ>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d002      	beq.n	80042b8 <recv+0x40>
 80042b2:	f06f 0304 	mvn.w	r3, #4
 80042b6:	e139      	b.n	800452c <recv+0x2b4>
   CHECK_SOCKDATA();
 80042b8:	88bb      	ldrh	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d102      	bne.n	80042c4 <recv+0x4c>
 80042be:	f06f 030d 	mvn.w	r3, #13
 80042c2:	e133      	b.n	800452c <recv+0x2b4>
   
   recvsize = getSn_RxMAX(sn);
 80042c4:	79fb      	ldrb	r3, [r7, #7]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7ff faa9 	bl	800381e <getRMSR>
 80042cc:	4603      	mov	r3, r0
 80042ce:	029b      	lsls	r3, r3, #10
 80042d0:	81fb      	strh	r3, [r7, #14]
   if(recvsize < len) len = recvsize;
 80042d2:	89fa      	ldrh	r2, [r7, #14]
 80042d4:	88bb      	ldrh	r3, [r7, #4]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d201      	bcs.n	80042de <recv+0x66>
 80042da:	89fb      	ldrh	r3, [r7, #14]
 80042dc:	80bb      	strh	r3, [r7, #4]
      
//A20150601 : For Integrating with W5300
#if _WIZCHIP_ == 5300
   //sock_pack_info[sn] = PACK_COMPLETED;    // for clear      
   if(sock_remained_size[sn] == 0)
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	4a94      	ldr	r2, [pc, #592]	@ (8004534 <recv+0x2bc>)
 80042e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d148      	bne.n	800437c <recv+0x104>
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 80042ea:	79fb      	ldrb	r3, [r7, #7]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7ff fae3 	bl	80038b8 <getSn_RX_RSR>
 80042f2:	4603      	mov	r3, r0
 80042f4:	81fb      	strh	r3, [r7, #14]
         tmp = getSn_SR(sn);
 80042f6:	79fb      	ldrb	r3, [r7, #7]
 80042f8:	3308      	adds	r3, #8
 80042fa:	019b      	lsls	r3, r3, #6
 80042fc:	3308      	adds	r3, #8
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff f9ce 	bl	80036a0 <WIZCHIP_READ>
 8004304:	4603      	mov	r3, r0
 8004306:	737b      	strb	r3, [r7, #13]
         if (tmp != SOCK_ESTABLISHED)
 8004308:	7b7b      	ldrb	r3, [r7, #13]
 800430a:	2b17      	cmp	r3, #23
 800430c:	d020      	beq.n	8004350 <recv+0xd8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 800430e:	7b7b      	ldrb	r3, [r7, #13]
 8004310:	2b1c      	cmp	r3, #28
 8004312:	d116      	bne.n	8004342 <recv+0xca>
            {
               if(recvsize != 0) break;
 8004314:	89fb      	ldrh	r3, [r7, #14]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d12d      	bne.n	8004376 <recv+0xfe>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 800431a:	79fb      	ldrb	r3, [r7, #7]
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff faa1 	bl	8003864 <getSn_TX_FSR>
 8004322:	4604      	mov	r4, r0
 8004324:	79fb      	ldrb	r3, [r7, #7]
 8004326:	4618      	mov	r0, r3
 8004328:	f7ff fa1d 	bl	8003766 <getTMSR>
 800432c:	4603      	mov	r3, r0
 800432e:	029b      	lsls	r3, r3, #10
 8004330:	429c      	cmp	r4, r3
 8004332:	d10d      	bne.n	8004350 <recv+0xd8>
               {
                  close(sn);
 8004334:	79fb      	ldrb	r3, [r7, #7]
 8004336:	4618      	mov	r0, r3
 8004338:	f7ff fc9c 	bl	8003c74 <close>
                  return SOCKERR_SOCKSTATUS;
 800433c:	f06f 0306 	mvn.w	r3, #6
 8004340:	e0f4      	b.n	800452c <recv+0x2b4>
               }
            }
            else
            {
               close(sn);
 8004342:	79fb      	ldrb	r3, [r7, #7]
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff fc95 	bl	8003c74 <close>
               return SOCKERR_SOCKSTATUS;
 800434a:	f06f 0306 	mvn.w	r3, #6
 800434e:	e0ed      	b.n	800452c <recv+0x2b4>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8004350:	4b79      	ldr	r3, [pc, #484]	@ (8004538 <recv+0x2c0>)
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	461a      	mov	r2, r3
 8004356:	79fb      	ldrb	r3, [r7, #7]
 8004358:	fa42 f303 	asr.w	r3, r2, r3
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b00      	cmp	r3, #0
 8004362:	d004      	beq.n	800436e <recv+0xf6>
 8004364:	89fb      	ldrh	r3, [r7, #14]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <recv+0xf6>
 800436a:	2300      	movs	r3, #0
 800436c:	e0de      	b.n	800452c <recv+0x2b4>
         if(recvsize != 0) break;
 800436e:	89fb      	ldrh	r3, [r7, #14]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d102      	bne.n	800437a <recv+0x102>
         recvsize = getSn_RX_RSR(sn);
 8004374:	e7b9      	b.n	80042ea <recv+0x72>
               if(recvsize != 0) break;
 8004376:	bf00      	nop
 8004378:	e000      	b.n	800437c <recv+0x104>
         if(recvsize != 0) break;
 800437a:	bf00      	nop
   }
#endif

//A20150601 : For integrating with W5300
#if _WIZCHIP_ == 5300
   if((sock_remained_size[sn] == 0) || (getSn_MR(sn) & Sn_MR_ALIGN))
 800437c:	79fb      	ldrb	r3, [r7, #7]
 800437e:	4a6d      	ldr	r2, [pc, #436]	@ (8004534 <recv+0x2bc>)
 8004380:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <recv+0x126>
 8004388:	79fb      	ldrb	r3, [r7, #7]
 800438a:	3308      	adds	r3, #8
 800438c:	019b      	lsls	r3, r3, #6
 800438e:	4618      	mov	r0, r3
 8004390:	f7ff f986 	bl	80036a0 <WIZCHIP_READ>
 8004394:	4603      	mov	r3, r0
 8004396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800439a:	2b00      	cmp	r3, #0
 800439c:	d038      	beq.n	8004410 <recv+0x198>
   {
      mr = getMR();
 800439e:	2300      	movs	r3, #0
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	021b      	lsls	r3, r3, #8
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	2201      	movs	r2, #1
 80043a8:	7812      	ldrb	r2, [r2, #0]
 80043aa:	4413      	add	r3, r2
 80043ac:	817b      	strh	r3, [r7, #10]
      if((getSn_MR(sn) & Sn_MR_ALIGN)==0)
 80043ae:	79fb      	ldrb	r3, [r7, #7]
 80043b0:	3308      	adds	r3, #8
 80043b2:	019b      	lsls	r3, r3, #6
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7ff f973 	bl	80036a0 <WIZCHIP_READ>
 80043ba:	4603      	mov	r3, r0
 80043bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d120      	bne.n	8004406 <recv+0x18e>
      {
         wiz_recv_data(sn,head,2);
 80043c4:	f107 0108 	add.w	r1, r7, #8
 80043c8:	79fb      	ldrb	r3, [r7, #7]
 80043ca:	2202      	movs	r2, #2
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7ff fad7 	bl	8003980 <wiz_recv_data>
         if(mr & MR_FS)
 80043d2:	897b      	ldrh	r3, [r7, #10]
 80043d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d008      	beq.n	80043ee <recv+0x176>
            recvsize = (((uint16_t)head[1]) << 8) | ((uint16_t)head[0]);
 80043dc:	7a7b      	ldrb	r3, [r7, #9]
 80043de:	021b      	lsls	r3, r3, #8
 80043e0:	b21a      	sxth	r2, r3
 80043e2:	7a3b      	ldrb	r3, [r7, #8]
 80043e4:	b21b      	sxth	r3, r3
 80043e6:	4313      	orrs	r3, r2
 80043e8:	b21b      	sxth	r3, r3
 80043ea:	81fb      	strh	r3, [r7, #14]
 80043ec:	e007      	b.n	80043fe <recv+0x186>
         else
            recvsize = (((uint16_t)head[0]) << 8) | ((uint16_t)head[1]);
 80043ee:	7a3b      	ldrb	r3, [r7, #8]
 80043f0:	021b      	lsls	r3, r3, #8
 80043f2:	b21a      	sxth	r2, r3
 80043f4:	7a7b      	ldrb	r3, [r7, #9]
 80043f6:	b21b      	sxth	r3, r3
 80043f8:	4313      	orrs	r3, r2
 80043fa:	b21b      	sxth	r3, r3
 80043fc:	81fb      	strh	r3, [r7, #14]
         sock_pack_info[sn] = PACK_FIRST;
 80043fe:	79fb      	ldrb	r3, [r7, #7]
 8004400:	4a4e      	ldr	r2, [pc, #312]	@ (800453c <recv+0x2c4>)
 8004402:	2180      	movs	r1, #128	@ 0x80
 8004404:	54d1      	strb	r1, [r2, r3]
      }
      sock_remained_size[sn] = recvsize;
 8004406:	79fb      	ldrb	r3, [r7, #7]
 8004408:	494a      	ldr	r1, [pc, #296]	@ (8004534 <recv+0x2bc>)
 800440a:	89fa      	ldrh	r2, [r7, #14]
 800440c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
   }
   if(len > sock_remained_size[sn]) len = sock_remained_size[sn];
 8004410:	79fb      	ldrb	r3, [r7, #7]
 8004412:	4a48      	ldr	r2, [pc, #288]	@ (8004534 <recv+0x2bc>)
 8004414:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004418:	88ba      	ldrh	r2, [r7, #4]
 800441a:	429a      	cmp	r2, r3
 800441c:	d904      	bls.n	8004428 <recv+0x1b0>
 800441e:	79fb      	ldrb	r3, [r7, #7]
 8004420:	4a44      	ldr	r2, [pc, #272]	@ (8004534 <recv+0x2bc>)
 8004422:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004426:	80bb      	strh	r3, [r7, #4]
   recvsize = len;   
 8004428:	88bb      	ldrh	r3, [r7, #4]
 800442a:	81fb      	strh	r3, [r7, #14]
   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 800442c:	79fb      	ldrb	r3, [r7, #7]
 800442e:	4a43      	ldr	r2, [pc, #268]	@ (800453c <recv+0x2c4>)
 8004430:	5cd3      	ldrb	r3, [r2, r3]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d01d      	beq.n	8004476 <recv+0x1fe>
   {
      *buf = sock_remained_byte[sn];
 800443a:	79fb      	ldrb	r3, [r7, #7]
 800443c:	4a40      	ldr	r2, [pc, #256]	@ (8004540 <recv+0x2c8>)
 800443e:	5cd2      	ldrb	r2, [r2, r3]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	701a      	strb	r2, [r3, #0]
      buf++;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	3301      	adds	r3, #1
 8004448:	603b      	str	r3, [r7, #0]
      sock_pack_info[sn] &= ~(PACK_FIFOBYTE);
 800444a:	79fb      	ldrb	r3, [r7, #7]
 800444c:	4a3b      	ldr	r2, [pc, #236]	@ (800453c <recv+0x2c4>)
 800444e:	5cd2      	ldrb	r2, [r2, r3]
 8004450:	79fb      	ldrb	r3, [r7, #7]
 8004452:	f022 0202 	bic.w	r2, r2, #2
 8004456:	b2d1      	uxtb	r1, r2
 8004458:	4a38      	ldr	r2, [pc, #224]	@ (800453c <recv+0x2c4>)
 800445a:	54d1      	strb	r1, [r2, r3]
      recvsize -= 1;
 800445c:	89fb      	ldrh	r3, [r7, #14]
 800445e:	3b01      	subs	r3, #1
 8004460:	81fb      	strh	r3, [r7, #14]
      sock_remained_size[sn] -= 1;
 8004462:	79fb      	ldrb	r3, [r7, #7]
 8004464:	4a33      	ldr	r2, [pc, #204]	@ (8004534 <recv+0x2bc>)
 8004466:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800446a:	79fb      	ldrb	r3, [r7, #7]
 800446c:	3a01      	subs	r2, #1
 800446e:	b291      	uxth	r1, r2
 8004470:	4a30      	ldr	r2, [pc, #192]	@ (8004534 <recv+0x2bc>)
 8004472:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   }
   if(recvsize != 0)
 8004476:	89fb      	ldrh	r3, [r7, #14]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d019      	beq.n	80044b0 <recv+0x238>
   {
      wiz_recv_data(sn, buf, recvsize);
 800447c:	89fa      	ldrh	r2, [r7, #14]
 800447e:	79fb      	ldrb	r3, [r7, #7]
 8004480:	6839      	ldr	r1, [r7, #0]
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff fa7c 	bl	8003980 <wiz_recv_data>
      setSn_CR(sn,Sn_CR_RECV);
 8004488:	79fb      	ldrb	r3, [r7, #7]
 800448a:	3308      	adds	r3, #8
 800448c:	019b      	lsls	r3, r3, #6
 800448e:	3302      	adds	r3, #2
 8004490:	2140      	movs	r1, #64	@ 0x40
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff f8da 	bl	800364c <WIZCHIP_WRITE>
      while(getSn_CR(sn));
 8004498:	bf00      	nop
 800449a:	79fb      	ldrb	r3, [r7, #7]
 800449c:	3308      	adds	r3, #8
 800449e:	019b      	lsls	r3, r3, #6
 80044a0:	3302      	adds	r3, #2
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7ff f8fc 	bl	80036a0 <WIZCHIP_READ>
 80044a8:	4603      	mov	r3, r0
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1f4      	bne.n	800449a <recv+0x222>
   }
   sock_remained_size[sn] -= recvsize;
 80044b0:	79fb      	ldrb	r3, [r7, #7]
 80044b2:	4a20      	ldr	r2, [pc, #128]	@ (8004534 <recv+0x2bc>)
 80044b4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80044b8:	79fb      	ldrb	r3, [r7, #7]
 80044ba:	89fa      	ldrh	r2, [r7, #14]
 80044bc:	1a8a      	subs	r2, r1, r2
 80044be:	b291      	uxth	r1, r2
 80044c0:	4a1c      	ldr	r2, [pc, #112]	@ (8004534 <recv+0x2bc>)
 80044c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   if(sock_remained_size[sn] != 0)
 80044c6:	79fb      	ldrb	r3, [r7, #7]
 80044c8:	4a1a      	ldr	r2, [pc, #104]	@ (8004534 <recv+0x2bc>)
 80044ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d017      	beq.n	8004502 <recv+0x28a>
   {
      sock_pack_info[sn] |= PACK_REMAINED;
 80044d2:	79fb      	ldrb	r3, [r7, #7]
 80044d4:	4a19      	ldr	r2, [pc, #100]	@ (800453c <recv+0x2c4>)
 80044d6:	5cd2      	ldrb	r2, [r2, r3]
 80044d8:	79fb      	ldrb	r3, [r7, #7]
 80044da:	f042 0201 	orr.w	r2, r2, #1
 80044de:	b2d1      	uxtb	r1, r2
 80044e0:	4a16      	ldr	r2, [pc, #88]	@ (800453c <recv+0x2c4>)
 80044e2:	54d1      	strb	r1, [r2, r3]
      if(recvsize & 0x1) sock_pack_info[sn] |= PACK_FIFOBYTE;
 80044e4:	89fb      	ldrh	r3, [r7, #14]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00d      	beq.n	800450a <recv+0x292>
 80044ee:	79fb      	ldrb	r3, [r7, #7]
 80044f0:	4a12      	ldr	r2, [pc, #72]	@ (800453c <recv+0x2c4>)
 80044f2:	5cd2      	ldrb	r2, [r2, r3]
 80044f4:	79fb      	ldrb	r3, [r7, #7]
 80044f6:	f042 0202 	orr.w	r2, r2, #2
 80044fa:	b2d1      	uxtb	r1, r2
 80044fc:	4a0f      	ldr	r2, [pc, #60]	@ (800453c <recv+0x2c4>)
 80044fe:	54d1      	strb	r1, [r2, r3]
 8004500:	e003      	b.n	800450a <recv+0x292>
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
 8004502:	79fb      	ldrb	r3, [r7, #7]
 8004504:	4a0d      	ldr	r2, [pc, #52]	@ (800453c <recv+0x2c4>)
 8004506:	2100      	movs	r1, #0
 8004508:	54d1      	strb	r1, [r2, r3]
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
 800450a:	79fb      	ldrb	r3, [r7, #7]
 800450c:	3308      	adds	r3, #8
 800450e:	019b      	lsls	r3, r3, #6
 8004510:	4618      	mov	r0, r3
 8004512:	f7ff f8c5 	bl	80036a0 <WIZCHIP_READ>
 8004516:	4603      	mov	r3, r0
 8004518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800451c:	2b00      	cmp	r3, #0
 800451e:	d004      	beq.n	800452a <recv+0x2b2>
 8004520:	79fb      	ldrb	r3, [r7, #7]
 8004522:	4a04      	ldr	r2, [pc, #16]	@ (8004534 <recv+0x2bc>)
 8004524:	2100      	movs	r1, #0
 8004526:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   while(getSn_CR(sn));
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800452a:	88bb      	ldrh	r3, [r7, #4]
}
 800452c:	4618      	mov	r0, r3
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	bd90      	pop	{r4, r7, pc}
 8004534:	200011e0 	.word	0x200011e0
 8004538:	200011dc 	.word	0x200011dc
 800453c:	200011f0 	.word	0x200011f0
 8004540:	200011f8 	.word	0x200011f8

08004544 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	60b9      	str	r1, [r7, #8]
 800454c:	607b      	str	r3, [r7, #4]
 800454e:	4603      	mov	r3, r0
 8004550:	73fb      	strb	r3, [r7, #15]
 8004552:	4613      	mov	r3, r2
 8004554:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8004556:	2300      	movs	r3, #0
 8004558:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 800455a:	2300      	movs	r3, #0
 800455c:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 800455e:	7bfb      	ldrb	r3, [r7, #15]
 8004560:	2b08      	cmp	r3, #8
 8004562:	d902      	bls.n	800456a <sendto+0x26>
 8004564:	f04f 33ff 	mov.w	r3, #4294967295
 8004568:	e1d5      	b.n	8004916 <sendto+0x3d2>
   switch(getSn_MR(sn) & 0x0F)
 800456a:	7bfb      	ldrb	r3, [r7, #15]
 800456c:	3308      	adds	r3, #8
 800456e:	019b      	lsls	r3, r3, #6
 8004570:	4618      	mov	r0, r3
 8004572:	f7ff f895 	bl	80036a0 <WIZCHIP_READ>
 8004576:	4603      	mov	r3, r0
 8004578:	f003 030f 	and.w	r3, r3, #15
 800457c:	3b02      	subs	r3, #2
 800457e:	2b02      	cmp	r3, #2
 8004580:	d902      	bls.n	8004588 <sendto+0x44>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8004582:	f06f 0304 	mvn.w	r3, #4
 8004586:	e1c6      	b.n	8004916 <sendto+0x3d2>
         break;
 8004588:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800458a:	89bb      	ldrh	r3, [r7, #12]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d102      	bne.n	8004596 <sendto+0x52>
 8004590:	f06f 030d 	mvn.w	r3, #13
 8004594:	e1bf      	b.n	8004916 <sendto+0x3d2>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	021b      	lsls	r3, r3, #8
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	3201      	adds	r2, #1
 80045a4:	7812      	ldrb	r2, [r2, #0]
 80045a6:	4413      	add	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	021b      	lsls	r3, r3, #8
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	3202      	adds	r2, #2
 80045b2:	7812      	ldrb	r2, [r2, #0]
 80045b4:	4413      	add	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	021b      	lsls	r3, r3, #8
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	3203      	adds	r2, #3
 80045c0:	7812      	ldrb	r2, [r2, #0]
 80045c2:	4413      	add	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10d      	bne.n	80045e8 <sendto+0xa4>
 80045cc:	7bfb      	ldrb	r3, [r7, #15]
 80045ce:	3308      	adds	r3, #8
 80045d0:	019b      	lsls	r3, r3, #6
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7ff f864 	bl	80036a0 <WIZCHIP_READ>
 80045d8:	4603      	mov	r3, r0
 80045da:	f003 0304 	and.w	r3, r3, #4
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d002      	beq.n	80045e8 <sendto+0xa4>
 80045e2:	f06f 030b 	mvn.w	r3, #11
 80045e6:	e196      	b.n	8004916 <sendto+0x3d2>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 80045e8:	8c3b      	ldrh	r3, [r7, #32]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10d      	bne.n	800460a <sendto+0xc6>
 80045ee:	7bfb      	ldrb	r3, [r7, #15]
 80045f0:	3308      	adds	r3, #8
 80045f2:	019b      	lsls	r3, r3, #6
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7ff f853 	bl	80036a0 <WIZCHIP_READ>
 80045fa:	4603      	mov	r3, r0
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b04      	cmp	r3, #4
 8004602:	d002      	beq.n	800460a <sendto+0xc6>
 8004604:	f06f 030a 	mvn.w	r3, #10
 8004608:	e185      	b.n	8004916 <sendto+0x3d2>
   tmp = getSn_SR(sn);
 800460a:	7bfb      	ldrb	r3, [r7, #15]
 800460c:	3308      	adds	r3, #8
 800460e:	019b      	lsls	r3, r3, #6
 8004610:	3308      	adds	r3, #8
 8004612:	4618      	mov	r0, r3
 8004614:	f7ff f844 	bl	80036a0 <WIZCHIP_READ>
 8004618:	4603      	mov	r3, r0
 800461a:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 800461c:	7dfb      	ldrb	r3, [r7, #23]
 800461e:	2b42      	cmp	r3, #66	@ 0x42
 8004620:	d008      	beq.n	8004634 <sendto+0xf0>
 8004622:	7dfb      	ldrb	r3, [r7, #23]
 8004624:	2b22      	cmp	r3, #34	@ 0x22
 8004626:	d005      	beq.n	8004634 <sendto+0xf0>
 8004628:	7dfb      	ldrb	r3, [r7, #23]
 800462a:	2b32      	cmp	r3, #50	@ 0x32
 800462c:	d002      	beq.n	8004634 <sendto+0xf0>
 800462e:	f06f 0306 	mvn.w	r3, #6
 8004632:	e170      	b.n	8004916 <sendto+0x3d2>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8004634:	7bfb      	ldrb	r3, [r7, #15]
 8004636:	3308      	adds	r3, #8
 8004638:	019b      	lsls	r3, r3, #6
 800463a:	3314      	adds	r3, #20
 800463c:	4618      	mov	r0, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	021b      	lsls	r3, r3, #8
 8004644:	b29b      	uxth	r3, r3
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	3201      	adds	r2, #1
 800464a:	7812      	ldrb	r2, [r2, #0]
 800464c:	4413      	add	r3, r2
 800464e:	b29b      	uxth	r3, r3
 8004650:	4619      	mov	r1, r3
 8004652:	f7fe fffb 	bl	800364c <WIZCHIP_WRITE>
 8004656:	7bfb      	ldrb	r3, [r7, #15]
 8004658:	3308      	adds	r3, #8
 800465a:	019b      	lsls	r3, r3, #6
 800465c:	3316      	adds	r3, #22
 800465e:	4618      	mov	r0, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3302      	adds	r3, #2
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	021b      	lsls	r3, r3, #8
 8004668:	b29b      	uxth	r3, r3
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	3203      	adds	r2, #3
 800466e:	7812      	ldrb	r2, [r2, #0]
 8004670:	4413      	add	r3, r2
 8004672:	b29b      	uxth	r3, r3
 8004674:	4619      	mov	r1, r3
 8004676:	f7fe ffe9 	bl	800364c <WIZCHIP_WRITE>
   setSn_DPORT(sn,port);      
 800467a:	7bfb      	ldrb	r3, [r7, #15]
 800467c:	3308      	adds	r3, #8
 800467e:	019b      	lsls	r3, r3, #6
 8004680:	3312      	adds	r3, #18
 8004682:	461a      	mov	r2, r3
 8004684:	8c3b      	ldrh	r3, [r7, #32]
 8004686:	4619      	mov	r1, r3
 8004688:	4610      	mov	r0, r2
 800468a:	f7fe ffdf 	bl	800364c <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 800468e:	7bfb      	ldrb	r3, [r7, #15]
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff f868 	bl	8003766 <getTMSR>
 8004696:	4603      	mov	r3, r0
 8004698:	029b      	lsls	r3, r3, #10
 800469a:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800469c:	89ba      	ldrh	r2, [r7, #12]
 800469e:	8abb      	ldrh	r3, [r7, #20]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d901      	bls.n	80046a8 <sendto+0x164>
 80046a4:	8abb      	ldrh	r3, [r7, #20]
 80046a6:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80046a8:	7bfb      	ldrb	r3, [r7, #15]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7ff f8da 	bl	8003864 <getSn_TX_FSR>
 80046b0:	4603      	mov	r3, r0
 80046b2:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80046b4:	7bfb      	ldrb	r3, [r7, #15]
 80046b6:	3308      	adds	r3, #8
 80046b8:	019b      	lsls	r3, r3, #6
 80046ba:	3308      	adds	r3, #8
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fe ffef 	bl	80036a0 <WIZCHIP_READ>
 80046c2:	4603      	mov	r3, r0
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d102      	bne.n	80046d0 <sendto+0x18c>
 80046ca:	f06f 0303 	mvn.w	r3, #3
 80046ce:	e122      	b.n	8004916 <sendto+0x3d2>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80046d0:	4b93      	ldr	r3, [pc, #588]	@ (8004920 <sendto+0x3dc>)
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	461a      	mov	r2, r3
 80046d6:	7bfb      	ldrb	r3, [r7, #15]
 80046d8:	fa42 f303 	asr.w	r3, r2, r3
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d005      	beq.n	80046f0 <sendto+0x1ac>
 80046e4:	89ba      	ldrh	r2, [r7, #12]
 80046e6:	8abb      	ldrh	r3, [r7, #20]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d901      	bls.n	80046f0 <sendto+0x1ac>
 80046ec:	2300      	movs	r3, #0
 80046ee:	e112      	b.n	8004916 <sendto+0x3d2>
      if(len <= freesize) break;
 80046f0:	89ba      	ldrh	r2, [r7, #12]
 80046f2:	8abb      	ldrh	r3, [r7, #20]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d900      	bls.n	80046fa <sendto+0x1b6>
      freesize = getSn_TX_FSR(sn);
 80046f8:	e7d6      	b.n	80046a8 <sendto+0x164>
      if(len <= freesize) break;
 80046fa:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 80046fc:	89ba      	ldrh	r2, [r7, #12]
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
 8004700:	68b9      	ldr	r1, [r7, #8]
 8004702:	4618      	mov	r0, r3
 8004704:	f7ff f90a 	bl	800391c <wiz_send_data>

   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      getSIPR((uint8_t*)&taddr);
 8004708:	2018      	movs	r0, #24
 800470a:	f7fe ffc9 	bl	80036a0 <WIZCHIP_READ>
 800470e:	4603      	mov	r3, r0
 8004710:	0a1b      	lsrs	r3, r3, #8
 8004712:	b29a      	uxth	r2, r3
 8004714:	f107 0310 	add.w	r3, r7, #16
 8004718:	b2d2      	uxtb	r2, r2
 800471a:	701a      	strb	r2, [r3, #0]
 800471c:	2018      	movs	r0, #24
 800471e:	f7fe ffbf 	bl	80036a0 <WIZCHIP_READ>
 8004722:	4603      	mov	r3, r0
 8004724:	461a      	mov	r2, r3
 8004726:	f107 0310 	add.w	r3, r7, #16
 800472a:	3301      	adds	r3, #1
 800472c:	b2d2      	uxtb	r2, r2
 800472e:	701a      	strb	r2, [r3, #0]
 8004730:	201a      	movs	r0, #26
 8004732:	f7fe ffb5 	bl	80036a0 <WIZCHIP_READ>
 8004736:	4603      	mov	r3, r0
 8004738:	0a1b      	lsrs	r3, r3, #8
 800473a:	b29a      	uxth	r2, r3
 800473c:	f107 0310 	add.w	r3, r7, #16
 8004740:	3302      	adds	r3, #2
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	701a      	strb	r2, [r3, #0]
 8004746:	201a      	movs	r0, #26
 8004748:	f7fe ffaa 	bl	80036a0 <WIZCHIP_READ>
 800474c:	4603      	mov	r3, r0
 800474e:	461a      	mov	r2, r3
 8004750:	f107 0310 	add.w	r3, r7, #16
 8004754:	3303      	adds	r3, #3
 8004756:	b2d2      	uxtb	r2, r2
 8004758:	701a      	strb	r2, [r3, #0]
      if(taddr == 0)
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d141      	bne.n	80047e4 <sendto+0x2a0>
      {
         getSUBR((uint8_t*)&taddr);
 8004760:	2014      	movs	r0, #20
 8004762:	f7fe ff9d 	bl	80036a0 <WIZCHIP_READ>
 8004766:	4603      	mov	r3, r0
 8004768:	0a1b      	lsrs	r3, r3, #8
 800476a:	b29a      	uxth	r2, r3
 800476c:	f107 0310 	add.w	r3, r7, #16
 8004770:	b2d2      	uxtb	r2, r2
 8004772:	701a      	strb	r2, [r3, #0]
 8004774:	2014      	movs	r0, #20
 8004776:	f7fe ff93 	bl	80036a0 <WIZCHIP_READ>
 800477a:	4603      	mov	r3, r0
 800477c:	461a      	mov	r2, r3
 800477e:	f107 0310 	add.w	r3, r7, #16
 8004782:	3301      	adds	r3, #1
 8004784:	b2d2      	uxtb	r2, r2
 8004786:	701a      	strb	r2, [r3, #0]
 8004788:	2016      	movs	r0, #22
 800478a:	f7fe ff89 	bl	80036a0 <WIZCHIP_READ>
 800478e:	4603      	mov	r3, r0
 8004790:	0a1b      	lsrs	r3, r3, #8
 8004792:	b29a      	uxth	r2, r3
 8004794:	f107 0310 	add.w	r3, r7, #16
 8004798:	3302      	adds	r3, #2
 800479a:	b2d2      	uxtb	r2, r2
 800479c:	701a      	strb	r2, [r3, #0]
 800479e:	2016      	movs	r0, #22
 80047a0:	f7fe ff7e 	bl	80036a0 <WIZCHIP_READ>
 80047a4:	4603      	mov	r3, r0
 80047a6:	461a      	mov	r2, r3
 80047a8:	f107 0310 	add.w	r3, r7, #16
 80047ac:	3303      	adds	r3, #3
 80047ae:	b2d2      	uxtb	r2, r2
 80047b0:	701a      	strb	r2, [r3, #0]
         setSUBR((uint8_t*)"\x00\x00\x00\x00");
 80047b2:	4b5c      	ldr	r3, [pc, #368]	@ (8004924 <sendto+0x3e0>)
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	021b      	lsls	r3, r3, #8
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	4a5b      	ldr	r2, [pc, #364]	@ (8004928 <sendto+0x3e4>)
 80047bc:	7812      	ldrb	r2, [r2, #0]
 80047be:	4413      	add	r3, r2
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	4619      	mov	r1, r3
 80047c4:	2014      	movs	r0, #20
 80047c6:	f7fe ff41 	bl	800364c <WIZCHIP_WRITE>
 80047ca:	4b58      	ldr	r3, [pc, #352]	@ (800492c <sendto+0x3e8>)
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	021b      	lsls	r3, r3, #8
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	4a57      	ldr	r2, [pc, #348]	@ (8004930 <sendto+0x3ec>)
 80047d4:	7812      	ldrb	r2, [r2, #0]
 80047d6:	4413      	add	r3, r2
 80047d8:	b29b      	uxth	r3, r3
 80047da:	4619      	mov	r1, r3
 80047dc:	2016      	movs	r0, #22
 80047de:	f7fe ff35 	bl	800364c <WIZCHIP_WRITE>
 80047e2:	e001      	b.n	80047e8 <sendto+0x2a4>
      }
      else taddr = 0;
 80047e4:	2300      	movs	r3, #0
 80047e6:	613b      	str	r3, [r7, #16]
   #endif

//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
 80047ea:	3308      	adds	r3, #8
 80047ec:	019b      	lsls	r3, r3, #6
 80047ee:	3320      	adds	r3, #32
 80047f0:	461a      	mov	r2, r3
 80047f2:	89bb      	ldrh	r3, [r7, #12]
 80047f4:	0c1b      	lsrs	r3, r3, #16
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	4619      	mov	r1, r3
 80047fa:	4610      	mov	r0, r2
 80047fc:	f7fe ff26 	bl	800364c <WIZCHIP_WRITE>
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	3308      	adds	r3, #8
 8004804:	019b      	lsls	r3, r3, #6
 8004806:	3322      	adds	r3, #34	@ 0x22
 8004808:	461a      	mov	r2, r3
 800480a:	89bb      	ldrh	r3, [r7, #12]
 800480c:	4619      	mov	r1, r3
 800480e:	4610      	mov	r0, r2
 8004810:	f7fe ff1c 	bl	800364c <WIZCHIP_WRITE>
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8004814:	7bfb      	ldrb	r3, [r7, #15]
 8004816:	3308      	adds	r3, #8
 8004818:	019b      	lsls	r3, r3, #6
 800481a:	3302      	adds	r3, #2
 800481c:	2120      	movs	r1, #32
 800481e:	4618      	mov	r0, r3
 8004820:	f7fe ff14 	bl	800364c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8004824:	bf00      	nop
 8004826:	7bfb      	ldrb	r3, [r7, #15]
 8004828:	3308      	adds	r3, #8
 800482a:	019b      	lsls	r3, r3, #6
 800482c:	3302      	adds	r3, #2
 800482e:	4618      	mov	r0, r3
 8004830:	f7fe ff36 	bl	80036a0 <WIZCHIP_READ>
 8004834:	4603      	mov	r3, r0
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1f4      	bne.n	8004826 <sendto+0x2e2>
   while(1)
   {
      tmp = getSn_IR(sn);
 800483c:	7bfb      	ldrb	r3, [r7, #15]
 800483e:	3308      	adds	r3, #8
 8004840:	019b      	lsls	r3, r3, #6
 8004842:	3306      	adds	r3, #6
 8004844:	4618      	mov	r0, r3
 8004846:	f7fe ff2b 	bl	80036a0 <WIZCHIP_READ>
 800484a:	4603      	mov	r3, r0
 800484c:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 800484e:	7dfb      	ldrb	r3, [r7, #23]
 8004850:	f003 0310 	and.w	r3, r3, #16
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00c      	beq.n	8004872 <sendto+0x32e>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8004858:	7bfb      	ldrb	r3, [r7, #15]
 800485a:	3308      	adds	r3, #8
 800485c:	019b      	lsls	r3, r3, #6
 800485e:	3306      	adds	r3, #6
 8004860:	2110      	movs	r1, #16
 8004862:	4618      	mov	r0, r3
 8004864:	f7fe fef2 	bl	800364c <WIZCHIP_WRITE>
         break;
 8004868:	bf00      	nop
         return SOCKERR_TIMEOUT;
      }
      ////////////
   }
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d051      	beq.n	8004914 <sendto+0x3d0>
 8004870:	e031      	b.n	80048d6 <sendto+0x392>
      else if(tmp & Sn_IR_TIMEOUT)
 8004872:	7dfb      	ldrb	r3, [r7, #23]
 8004874:	f003 0308 	and.w	r3, r3, #8
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0df      	beq.n	800483c <sendto+0x2f8>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 800487c:	7bfb      	ldrb	r3, [r7, #15]
 800487e:	3308      	adds	r3, #8
 8004880:	019b      	lsls	r3, r3, #6
 8004882:	3306      	adds	r3, #6
 8004884:	2108      	movs	r1, #8
 8004886:	4618      	mov	r0, r3
 8004888:	f7fe fee0 	bl	800364c <WIZCHIP_WRITE>
            if(taddr) setSUBR((uint8_t*)&taddr);
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d01e      	beq.n	80048d0 <sendto+0x38c>
 8004892:	f107 0310 	add.w	r3, r7, #16
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	021b      	lsls	r3, r3, #8
 800489a:	b29a      	uxth	r2, r3
 800489c:	f107 0310 	add.w	r3, r7, #16
 80048a0:	3301      	adds	r3, #1
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	4413      	add	r3, r2
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	4619      	mov	r1, r3
 80048aa:	2014      	movs	r0, #20
 80048ac:	f7fe fece 	bl	800364c <WIZCHIP_WRITE>
 80048b0:	f107 0310 	add.w	r3, r7, #16
 80048b4:	3302      	adds	r3, #2
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	021b      	lsls	r3, r3, #8
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	f107 0310 	add.w	r3, r7, #16
 80048c0:	3303      	adds	r3, #3
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	4413      	add	r3, r2
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	4619      	mov	r1, r3
 80048ca:	2016      	movs	r0, #22
 80048cc:	f7fe febe 	bl	800364c <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 80048d0:	f06f 030c 	mvn.w	r3, #12
 80048d4:	e01f      	b.n	8004916 <sendto+0x3d2>
      if(taddr) setSUBR((uint8_t*)&taddr);
 80048d6:	f107 0310 	add.w	r3, r7, #16
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	021b      	lsls	r3, r3, #8
 80048de:	b29a      	uxth	r2, r3
 80048e0:	f107 0310 	add.w	r3, r7, #16
 80048e4:	3301      	adds	r3, #1
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	4413      	add	r3, r2
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	4619      	mov	r1, r3
 80048ee:	2014      	movs	r0, #20
 80048f0:	f7fe feac 	bl	800364c <WIZCHIP_WRITE>
 80048f4:	f107 0310 	add.w	r3, r7, #16
 80048f8:	3302      	adds	r3, #2
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	021b      	lsls	r3, r3, #8
 80048fe:	b29a      	uxth	r2, r3
 8004900:	f107 0310 	add.w	r3, r7, #16
 8004904:	3303      	adds	r3, #3
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	4413      	add	r3, r2
 800490a:	b29b      	uxth	r3, r3
 800490c:	4619      	mov	r1, r3
 800490e:	2016      	movs	r0, #22
 8004910:	f7fe fe9c 	bl	800364c <WIZCHIP_WRITE>
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004914:	89bb      	ldrh	r3, [r7, #12]
}
 8004916:	4618      	mov	r0, r3
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	200011dc 	.word	0x200011dc
 8004924:	080085e0 	.word	0x080085e0
 8004928:	080085e1 	.word	0x080085e1
 800492c:	080085e2 	.word	0x080085e2
 8004930:	080085e3 	.word	0x080085e3

08004934 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b088      	sub	sp, #32
 8004938:	af00      	add	r7, sp, #0
 800493a:	60b9      	str	r1, [r7, #8]
 800493c:	607b      	str	r3, [r7, #4]
 800493e:	4603      	mov	r3, r0
 8004940:	73fb      	strb	r3, [r7, #15]
 8004942:	4613      	mov	r3, r2
 8004944:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8004946:	2300      	movs	r3, #0
 8004948:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 800494a:	7bfb      	ldrb	r3, [r7, #15]
 800494c:	2b08      	cmp	r3, #8
 800494e:	d902      	bls.n	8004956 <recvfrom+0x22>
 8004950:	f04f 33ff 	mov.w	r3, #4294967295
 8004954:	e257      	b.n	8004e06 <recvfrom+0x4d2>
   //CHECK_SOCKMODE(Sn_MR_UDP);
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
 8004956:	2300      	movs	r3, #0
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	021b      	lsls	r3, r3, #8
 800495c:	b29b      	uxth	r3, r3
 800495e:	2201      	movs	r2, #1
 8004960:	7812      	ldrb	r2, [r2, #0]
 8004962:	4413      	add	r3, r2
 8004964:	83bb      	strh	r3, [r7, #28]
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8004966:	7bfb      	ldrb	r3, [r7, #15]
 8004968:	3308      	adds	r3, #8
 800496a:	019b      	lsls	r3, r3, #6
 800496c:	4618      	mov	r0, r3
 800496e:	f7fe fe97 	bl	80036a0 <WIZCHIP_READ>
 8004972:	4603      	mov	r3, r0
 8004974:	837b      	strh	r3, [r7, #26]
 8004976:	8b7b      	ldrh	r3, [r7, #26]
 8004978:	f003 030f 	and.w	r3, r3, #15
 800497c:	3b02      	subs	r3, #2
 800497e:	2b02      	cmp	r3, #2
 8004980:	d902      	bls.n	8004988 <recvfrom+0x54>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8004982:	f06f 0304 	mvn.w	r3, #4
 8004986:	e23e      	b.n	8004e06 <recvfrom+0x4d2>
         break;
 8004988:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800498a:	89bb      	ldrh	r3, [r7, #12]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d102      	bne.n	8004996 <recvfrom+0x62>
 8004990:	f06f 030d 	mvn.w	r3, #13
 8004994:	e237      	b.n	8004e06 <recvfrom+0x4d2>
   if(sock_remained_size[sn] == 0)
 8004996:	7bfb      	ldrb	r3, [r7, #15]
 8004998:	4aa6      	ldr	r2, [pc, #664]	@ (8004c34 <recvfrom+0x300>)
 800499a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d127      	bne.n	80049f2 <recvfrom+0xbe>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 80049a2:	7bfb      	ldrb	r3, [r7, #15]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fe ff87 	bl	80038b8 <getSn_RX_RSR>
 80049aa:	4603      	mov	r3, r0
 80049ac:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80049ae:	7bfb      	ldrb	r3, [r7, #15]
 80049b0:	3308      	adds	r3, #8
 80049b2:	019b      	lsls	r3, r3, #6
 80049b4:	3308      	adds	r3, #8
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fe fe72 	bl	80036a0 <WIZCHIP_READ>
 80049bc:	4603      	mov	r3, r0
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d102      	bne.n	80049ca <recvfrom+0x96>
 80049c4:	f06f 0303 	mvn.w	r3, #3
 80049c8:	e21d      	b.n	8004e06 <recvfrom+0x4d2>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 80049ca:	4b9b      	ldr	r3, [pc, #620]	@ (8004c38 <recvfrom+0x304>)
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	461a      	mov	r2, r3
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
 80049d2:	fa42 f303 	asr.w	r3, r2, r3
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d004      	beq.n	80049e8 <recvfrom+0xb4>
 80049de:	8bfb      	ldrh	r3, [r7, #30]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d101      	bne.n	80049e8 <recvfrom+0xb4>
 80049e4:	2300      	movs	r3, #0
 80049e6:	e20e      	b.n	8004e06 <recvfrom+0x4d2>
         if(pack_len != 0) break;
 80049e8:	8bfb      	ldrh	r3, [r7, #30]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d100      	bne.n	80049f0 <recvfrom+0xbc>
         pack_len = getSn_RX_RSR(sn);
 80049ee:	e7d8      	b.n	80049a2 <recvfrom+0x6e>
         if(pack_len != 0) break;
 80049f0:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 80049f2:	8b7b      	ldrh	r3, [r7, #26]
 80049f4:	f003 0307 	and.w	r3, r3, #7
 80049f8:	2b04      	cmp	r3, #4
 80049fa:	f000 80d1 	beq.w	8004ba0 <recvfrom+0x26c>
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	f300 81b1 	bgt.w	8004d66 <recvfrom+0x432>
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d003      	beq.n	8004a10 <recvfrom+0xdc>
 8004a08:	2b03      	cmp	r3, #3
 8004a0a:	f000 814e 	beq.w	8004caa <recvfrom+0x376>
 8004a0e:	e1aa      	b.n	8004d66 <recvfrom+0x432>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
 8004a12:	4a88      	ldr	r2, [pc, #544]	@ (8004c34 <recvfrom+0x300>)
 8004a14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f040 8085 	bne.w	8004b28 <recvfrom+0x1f4>
	      {
   			wiz_recv_data(sn, head, 8);
 8004a1e:	f107 0110 	add.w	r1, r7, #16
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
 8004a24:	2208      	movs	r2, #8
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7fe ffaa 	bl	8003980 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
 8004a2e:	3308      	adds	r3, #8
 8004a30:	019b      	lsls	r3, r3, #6
 8004a32:	3302      	adds	r3, #2
 8004a34:	2140      	movs	r1, #64	@ 0x40
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7fe fe08 	bl	800364c <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8004a3c:	bf00      	nop
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
 8004a40:	3308      	adds	r3, #8
 8004a42:	019b      	lsls	r3, r3, #6
 8004a44:	3302      	adds	r3, #2
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fe fe2a 	bl	80036a0 <WIZCHIP_READ>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1f4      	bne.n	8004a3e <recvfrom+0x10a>
   			// read peer's IP address, port number & packet length
   	   //A20150601 : For W5300
   		#if _WIZCHIP_ == 5300
   		   if(mr1 & MR_FS)
 8004a54:	8bbb      	ldrh	r3, [r7, #28]
 8004a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d030      	beq.n	8004ac0 <recvfrom+0x18c>
   		   {
   		      addr[0] = head[1];
 8004a5e:	7c7a      	ldrb	r2, [r7, #17]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	701a      	strb	r2, [r3, #0]
   		      addr[1] = head[0];
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	3301      	adds	r3, #1
 8004a68:	7c3a      	ldrb	r2, [r7, #16]
 8004a6a:	701a      	strb	r2, [r3, #0]
   		      addr[2] = head[3];
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	3302      	adds	r3, #2
 8004a70:	7cfa      	ldrb	r2, [r7, #19]
 8004a72:	701a      	strb	r2, [r3, #0]
   		      addr[3] = head[2];
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	3303      	adds	r3, #3
 8004a78:	7cba      	ldrb	r2, [r7, #18]
 8004a7a:	701a      	strb	r2, [r3, #0]
   		      *port = head[5];
 8004a7c:	7d7b      	ldrb	r3, [r7, #21]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a82:	801a      	strh	r2, [r3, #0]
   		      *port = (*port << 8) + head[4];
 8004a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a86:	881b      	ldrh	r3, [r3, #0]
 8004a88:	021b      	lsls	r3, r3, #8
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	7d3a      	ldrb	r2, [r7, #20]
 8004a8e:	4413      	add	r3, r2
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a94:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[7];
 8004a96:	7dfa      	ldrb	r2, [r7, #23]
 8004a98:	7bfb      	ldrb	r3, [r7, #15]
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	4a65      	ldr	r2, [pc, #404]	@ (8004c34 <recvfrom+0x300>)
 8004a9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
 8004aa4:	4a63      	ldr	r2, [pc, #396]	@ (8004c34 <recvfrom+0x300>)
 8004aa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004aaa:	021b      	lsls	r3, r3, #8
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	7dbb      	ldrb	r3, [r7, #22]
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	7bfb      	ldrb	r3, [r7, #15]
 8004ab4:	440a      	add	r2, r1
 8004ab6:	b291      	uxth	r1, r2
 8004ab8:	4a5e      	ldr	r2, [pc, #376]	@ (8004c34 <recvfrom+0x300>)
 8004aba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004abe:	e02f      	b.n	8004b20 <recvfrom+0x1ec>
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8004ac0:	7c3a      	ldrb	r2, [r7, #16]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	7c7a      	ldrb	r2, [r7, #17]
 8004acc:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	3302      	adds	r3, #2
 8004ad2:	7cba      	ldrb	r2, [r7, #18]
 8004ad4:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	3303      	adds	r3, #3
 8004ada:	7cfa      	ldrb	r2, [r7, #19]
 8004adc:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8004ade:	7d3b      	ldrb	r3, [r7, #20]
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae4:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8004ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	021b      	lsls	r3, r3, #8
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	7d7a      	ldrb	r2, [r7, #21]
 8004af0:	4413      	add	r3, r2
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af6:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8004af8:	7dba      	ldrb	r2, [r7, #22]
 8004afa:	7bfb      	ldrb	r3, [r7, #15]
 8004afc:	4611      	mov	r1, r2
 8004afe:	4a4d      	ldr	r2, [pc, #308]	@ (8004c34 <recvfrom+0x300>)
 8004b00:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
 8004b06:	4a4b      	ldr	r2, [pc, #300]	@ (8004c34 <recvfrom+0x300>)
 8004b08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b0c:	021b      	lsls	r3, r3, #8
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	7dfb      	ldrb	r3, [r7, #23]
 8004b12:	4619      	mov	r1, r3
 8004b14:	7bfb      	ldrb	r3, [r7, #15]
 8004b16:	440a      	add	r2, r1
 8004b18:	b291      	uxth	r1, r2
 8004b1a:	4a46      	ldr	r2, [pc, #280]	@ (8004c34 <recvfrom+0x300>)
 8004b1c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8004b20:	7bfb      	ldrb	r3, [r7, #15]
 8004b22:	4a46      	ldr	r2, [pc, #280]	@ (8004c3c <recvfrom+0x308>)
 8004b24:	2180      	movs	r1, #128	@ 0x80
 8004b26:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
 8004b2a:	4a42      	ldr	r2, [pc, #264]	@ (8004c34 <recvfrom+0x300>)
 8004b2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b30:	89ba      	ldrh	r2, [r7, #12]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d202      	bcs.n	8004b3c <recvfrom+0x208>
 8004b36:	89bb      	ldrh	r3, [r7, #12]
 8004b38:	83fb      	strh	r3, [r7, #30]
 8004b3a:	e004      	b.n	8004b46 <recvfrom+0x212>
			else pack_len = sock_remained_size[sn];
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
 8004b3e:	4a3d      	ldr	r2, [pc, #244]	@ (8004c34 <recvfrom+0x300>)
 8004b40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b44:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8004b46:	8bfb      	ldrh	r3, [r7, #30]
 8004b48:	81bb      	strh	r3, [r7, #12]
			#if _WIZCHIP_ == 5300
			   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 8004b4a:	7bfb      	ldrb	r3, [r7, #15]
 8004b4c:	4a3b      	ldr	r2, [pc, #236]	@ (8004c3c <recvfrom+0x308>)
 8004b4e:	5cd3      	ldrb	r3, [r2, r3]
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d01c      	beq.n	8004b92 <recvfrom+0x25e>
			   {
			      *buf++ = sock_remained_byte[sn];
 8004b58:	7bfa      	ldrb	r2, [r7, #15]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	1c59      	adds	r1, r3, #1
 8004b5e:	60b9      	str	r1, [r7, #8]
 8004b60:	4937      	ldr	r1, [pc, #220]	@ (8004c40 <recvfrom+0x30c>)
 8004b62:	5c8a      	ldrb	r2, [r1, r2]
 8004b64:	701a      	strb	r2, [r3, #0]
			      pack_len -= 1;
 8004b66:	8bfb      	ldrh	r3, [r7, #30]
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	83fb      	strh	r3, [r7, #30]
			      sock_remained_size[sn] -= 1;
 8004b6c:	7bfb      	ldrb	r3, [r7, #15]
 8004b6e:	4a31      	ldr	r2, [pc, #196]	@ (8004c34 <recvfrom+0x300>)
 8004b70:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004b74:	7bfb      	ldrb	r3, [r7, #15]
 8004b76:	3a01      	subs	r2, #1
 8004b78:	b291      	uxth	r1, r2
 8004b7a:	4a2e      	ldr	r2, [pc, #184]	@ (8004c34 <recvfrom+0x300>)
 8004b7c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			      sock_pack_info[sn] &= ~PACK_FIFOBYTE;
 8004b80:	7bfb      	ldrb	r3, [r7, #15]
 8004b82:	4a2e      	ldr	r2, [pc, #184]	@ (8004c3c <recvfrom+0x308>)
 8004b84:	5cd2      	ldrb	r2, [r2, r3]
 8004b86:	7bfb      	ldrb	r3, [r7, #15]
 8004b88:	f022 0202 	bic.w	r2, r2, #2
 8004b8c:	b2d1      	uxtb	r1, r2
 8004b8e:	4a2b      	ldr	r2, [pc, #172]	@ (8004c3c <recvfrom+0x308>)
 8004b90:	54d1      	strb	r1, [r2, r3]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8004b92:	8bfa      	ldrh	r2, [r7, #30]
 8004b94:	7bfb      	ldrb	r3, [r7, #15]
 8004b96:	68b9      	ldr	r1, [r7, #8]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7fe fef1 	bl	8003980 <wiz_recv_data>
			break;
 8004b9e:	e0ee      	b.n	8004d7e <recvfrom+0x44a>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8004ba0:	7bfb      	ldrb	r3, [r7, #15]
 8004ba2:	4a24      	ldr	r2, [pc, #144]	@ (8004c34 <recvfrom+0x300>)
 8004ba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d168      	bne.n	8004c7e <recvfrom+0x34a>
	      {
   			wiz_recv_data(sn, head, 2);
 8004bac:	f107 0110 	add.w	r1, r7, #16
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7fe fee3 	bl	8003980 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
 8004bbc:	3308      	adds	r3, #8
 8004bbe:	019b      	lsls	r3, r3, #6
 8004bc0:	3302      	adds	r3, #2
 8004bc2:	2140      	movs	r1, #64	@ 0x40
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7fe fd41 	bl	800364c <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8004bca:	bf00      	nop
 8004bcc:	7bfb      	ldrb	r3, [r7, #15]
 8004bce:	3308      	adds	r3, #8
 8004bd0:	019b      	lsls	r3, r3, #6
 8004bd2:	3302      	adds	r3, #2
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7fe fd63 	bl	80036a0 <WIZCHIP_READ>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1f4      	bne.n	8004bcc <recvfrom+0x298>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8004be2:	7c3a      	ldrb	r2, [r7, #16]
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
 8004be6:	4611      	mov	r1, r2
 8004be8:	4a12      	ldr	r2, [pc, #72]	@ (8004c34 <recvfrom+0x300>)
 8004bea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
 8004bf0:	4a10      	ldr	r2, [pc, #64]	@ (8004c34 <recvfrom+0x300>)
 8004bf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bf6:	021b      	lsls	r3, r3, #8
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	7c7a      	ldrb	r2, [r7, #17]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	7bfb      	ldrb	r3, [r7, #15]
 8004c02:	3a02      	subs	r2, #2
 8004c04:	b291      	uxth	r1, r2
 8004c06:	4a0b      	ldr	r2, [pc, #44]	@ (8004c34 <recvfrom+0x300>)
 8004c08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			#if _WIZCHIP_ == W5300
   			if(sock_remained_size[sn] & 0x01)
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
 8004c0e:	4a09      	ldr	r2, [pc, #36]	@ (8004c34 <recvfrom+0x300>)
 8004c10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d013      	beq.n	8004c44 <recvfrom+0x310>
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	4a05      	ldr	r2, [pc, #20]	@ (8004c34 <recvfrom+0x300>)
 8004c20:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004c24:	7bfb      	ldrb	r3, [r7, #15]
 8004c26:	3a03      	subs	r2, #3
 8004c28:	b291      	uxth	r1, r2
 8004c2a:	4a02      	ldr	r2, [pc, #8]	@ (8004c34 <recvfrom+0x300>)
 8004c2c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004c30:	e012      	b.n	8004c58 <recvfrom+0x324>
 8004c32:	bf00      	nop
 8004c34:	200011e0 	.word	0x200011e0
 8004c38:	200011dc 	.word	0x200011dc
 8004c3c:	200011f0 	.word	0x200011f0
 8004c40:	200011f8 	.word	0x200011f8
   			else
   				sock_remained_size[sn] -= 4;
 8004c44:	7bfb      	ldrb	r3, [r7, #15]
 8004c46:	4a72      	ldr	r2, [pc, #456]	@ (8004e10 <recvfrom+0x4dc>)
 8004c48:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
 8004c4e:	3a04      	subs	r2, #4
 8004c50:	b291      	uxth	r1, r2
 8004c52:	4a6f      	ldr	r2, [pc, #444]	@ (8004e10 <recvfrom+0x4dc>)
 8004c54:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8004c58:	7bfb      	ldrb	r3, [r7, #15]
 8004c5a:	4a6d      	ldr	r2, [pc, #436]	@ (8004e10 <recvfrom+0x4dc>)
 8004c5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c60:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d906      	bls.n	8004c76 <recvfrom+0x342>
   			{
   			   close(sn);
 8004c68:	7bfb      	ldrb	r3, [r7, #15]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff f802 	bl	8003c74 <close>
   			   return SOCKFATAL_PACKLEN;
 8004c70:	f46f 737a 	mvn.w	r3, #1000	@ 0x3e8
 8004c74:	e0c7      	b.n	8004e06 <recvfrom+0x4d2>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8004c76:	7bfb      	ldrb	r3, [r7, #15]
 8004c78:	4a66      	ldr	r2, [pc, #408]	@ (8004e14 <recvfrom+0x4e0>)
 8004c7a:	2180      	movs	r1, #128	@ 0x80
 8004c7c:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8004c7e:	7bfb      	ldrb	r3, [r7, #15]
 8004c80:	4a63      	ldr	r2, [pc, #396]	@ (8004e10 <recvfrom+0x4dc>)
 8004c82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c86:	89ba      	ldrh	r2, [r7, #12]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d202      	bcs.n	8004c92 <recvfrom+0x35e>
 8004c8c:	89bb      	ldrh	r3, [r7, #12]
 8004c8e:	83fb      	strh	r3, [r7, #30]
 8004c90:	e004      	b.n	8004c9c <recvfrom+0x368>
			else pack_len = sock_remained_size[sn];
 8004c92:	7bfb      	ldrb	r3, [r7, #15]
 8004c94:	4a5e      	ldr	r2, [pc, #376]	@ (8004e10 <recvfrom+0x4dc>)
 8004c96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c9a:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8004c9c:	8bfa      	ldrh	r2, [r7, #30]
 8004c9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ca0:	68b9      	ldr	r1, [r7, #8]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fe fe6c 	bl	8003980 <wiz_recv_data>
		   break;
 8004ca8:	e069      	b.n	8004d7e <recvfrom+0x44a>
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8004caa:	7bfb      	ldrb	r3, [r7, #15]
 8004cac:	4a58      	ldr	r2, [pc, #352]	@ (8004e10 <recvfrom+0x4dc>)
 8004cae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d141      	bne.n	8004d3a <recvfrom+0x406>
		   {
   			wiz_recv_data(sn, head, 6);
 8004cb6:	f107 0110 	add.w	r1, r7, #16
 8004cba:	7bfb      	ldrb	r3, [r7, #15]
 8004cbc:	2206      	movs	r2, #6
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fe fe5e 	bl	8003980 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8004cc4:	7bfb      	ldrb	r3, [r7, #15]
 8004cc6:	3308      	adds	r3, #8
 8004cc8:	019b      	lsls	r3, r3, #6
 8004cca:	3302      	adds	r3, #2
 8004ccc:	2140      	movs	r1, #64	@ 0x40
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fe fcbc 	bl	800364c <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8004cd4:	bf00      	nop
 8004cd6:	7bfb      	ldrb	r3, [r7, #15]
 8004cd8:	3308      	adds	r3, #8
 8004cda:	019b      	lsls	r3, r3, #6
 8004cdc:	3302      	adds	r3, #2
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fe fcde 	bl	80036a0 <WIZCHIP_READ>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1f4      	bne.n	8004cd6 <recvfrom+0x3a2>
   			addr[0] = head[0];
 8004cec:	7c3a      	ldrb	r2, [r7, #16]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	7c7a      	ldrb	r2, [r7, #17]
 8004cf8:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3302      	adds	r3, #2
 8004cfe:	7cba      	ldrb	r2, [r7, #18]
 8004d00:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	3303      	adds	r3, #3
 8004d06:	7cfa      	ldrb	r2, [r7, #19]
 8004d08:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8004d0a:	7d3a      	ldrb	r2, [r7, #20]
 8004d0c:	7bfb      	ldrb	r3, [r7, #15]
 8004d0e:	4611      	mov	r1, r2
 8004d10:	4a3f      	ldr	r2, [pc, #252]	@ (8004e10 <recvfrom+0x4dc>)
 8004d12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8004d16:	7bfb      	ldrb	r3, [r7, #15]
 8004d18:	4a3d      	ldr	r2, [pc, #244]	@ (8004e10 <recvfrom+0x4dc>)
 8004d1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d1e:	021b      	lsls	r3, r3, #8
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	7d7b      	ldrb	r3, [r7, #21]
 8004d24:	4619      	mov	r1, r3
 8004d26:	7bfb      	ldrb	r3, [r7, #15]
 8004d28:	440a      	add	r2, r1
 8004d2a:	b291      	uxth	r1, r2
 8004d2c:	4a38      	ldr	r2, [pc, #224]	@ (8004e10 <recvfrom+0x4dc>)
 8004d2e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8004d32:	7bfb      	ldrb	r3, [r7, #15]
 8004d34:	4a37      	ldr	r2, [pc, #220]	@ (8004e14 <recvfrom+0x4e0>)
 8004d36:	2180      	movs	r1, #128	@ 0x80
 8004d38:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8004d3a:	7bfb      	ldrb	r3, [r7, #15]
 8004d3c:	4a34      	ldr	r2, [pc, #208]	@ (8004e10 <recvfrom+0x4dc>)
 8004d3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d42:	89ba      	ldrh	r2, [r7, #12]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d202      	bcs.n	8004d4e <recvfrom+0x41a>
 8004d48:	89bb      	ldrh	r3, [r7, #12]
 8004d4a:	83fb      	strh	r3, [r7, #30]
 8004d4c:	e004      	b.n	8004d58 <recvfrom+0x424>
			else pack_len = sock_remained_size[sn];
 8004d4e:	7bfb      	ldrb	r3, [r7, #15]
 8004d50:	4a2f      	ldr	r2, [pc, #188]	@ (8004e10 <recvfrom+0x4dc>)
 8004d52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d56:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8004d58:	8bfa      	ldrh	r2, [r7, #30]
 8004d5a:	7bfb      	ldrb	r3, [r7, #15]
 8004d5c:	68b9      	ldr	r1, [r7, #8]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7fe fe0e 	bl	8003980 <wiz_recv_data>
			break;
 8004d64:	e00b      	b.n	8004d7e <recvfrom+0x44a>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8004d66:	8bfa      	ldrh	r2, [r7, #30]
 8004d68:	7bfb      	ldrb	r3, [r7, #15]
 8004d6a:	4611      	mov	r1, r2
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7fe fe49 	bl	8003a04 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8004d72:	7bfb      	ldrb	r3, [r7, #15]
 8004d74:	4926      	ldr	r1, [pc, #152]	@ (8004e10 <recvfrom+0x4dc>)
 8004d76:	8bfa      	ldrh	r2, [r7, #30]
 8004d78:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8004d7c:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8004d7e:	7bfb      	ldrb	r3, [r7, #15]
 8004d80:	3308      	adds	r3, #8
 8004d82:	019b      	lsls	r3, r3, #6
 8004d84:	3302      	adds	r3, #2
 8004d86:	2140      	movs	r1, #64	@ 0x40
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7fe fc5f 	bl	800364c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8004d8e:	bf00      	nop
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
 8004d92:	3308      	adds	r3, #8
 8004d94:	019b      	lsls	r3, r3, #6
 8004d96:	3302      	adds	r3, #2
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7fe fc81 	bl	80036a0 <WIZCHIP_READ>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1f4      	bne.n	8004d90 <recvfrom+0x45c>
	sock_remained_size[sn] -= pack_len;
 8004da6:	7bfb      	ldrb	r3, [r7, #15]
 8004da8:	4a19      	ldr	r2, [pc, #100]	@ (8004e10 <recvfrom+0x4dc>)
 8004daa:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004dae:	7bfb      	ldrb	r3, [r7, #15]
 8004db0:	8bfa      	ldrh	r2, [r7, #30]
 8004db2:	1a8a      	subs	r2, r1, r2
 8004db4:	b291      	uxth	r1, r2
 8004db6:	4a16      	ldr	r2, [pc, #88]	@ (8004e10 <recvfrom+0x4dc>)
 8004db8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
 8004dbe:	4a14      	ldr	r2, [pc, #80]	@ (8004e10 <recvfrom+0x4dc>)
 8004dc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d017      	beq.n	8004df8 <recvfrom+0x4c4>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
 8004dca:	4a12      	ldr	r2, [pc, #72]	@ (8004e14 <recvfrom+0x4e0>)
 8004dcc:	5cd2      	ldrb	r2, [r2, r3]
 8004dce:	7bfb      	ldrb	r3, [r7, #15]
 8004dd0:	f042 0201 	orr.w	r2, r2, #1
 8004dd4:	b2d1      	uxtb	r1, r2
 8004dd6:	4a0f      	ldr	r2, [pc, #60]	@ (8004e14 <recvfrom+0x4e0>)
 8004dd8:	54d1      	strb	r1, [r2, r3]
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
 8004dda:	8bfb      	ldrh	r3, [r7, #30]
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00d      	beq.n	8004e00 <recvfrom+0x4cc>
 8004de4:	7bfb      	ldrb	r3, [r7, #15]
 8004de6:	4a0b      	ldr	r2, [pc, #44]	@ (8004e14 <recvfrom+0x4e0>)
 8004de8:	5cd2      	ldrb	r2, [r2, r3]
 8004dea:	7bfb      	ldrb	r3, [r7, #15]
 8004dec:	f042 0202 	orr.w	r2, r2, #2
 8004df0:	b2d1      	uxtb	r1, r2
 8004df2:	4a08      	ldr	r2, [pc, #32]	@ (8004e14 <recvfrom+0x4e0>)
 8004df4:	54d1      	strb	r1, [r2, r3]
 8004df6:	e003      	b.n	8004e00 <recvfrom+0x4cc>
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8004df8:	7bfb      	ldrb	r3, [r7, #15]
 8004dfa:	4a06      	ldr	r2, [pc, #24]	@ (8004e14 <recvfrom+0x4e0>)
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	54d1      	strb	r1, [r2, r3]
#if _WIZCHIP_ == 5300	   
   pack_len = len;
 8004e00:	89bb      	ldrh	r3, [r7, #12]
 8004e02:	83fb      	strh	r3, [r7, #30]
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8004e04:	8bfb      	ldrh	r3, [r7, #30]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3720      	adds	r7, #32
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	200011e0 	.word	0x200011e0
 8004e14:	200011f0 	.word	0x200011f0

08004e18 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	bf00      	nop
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8004e26:	b480      	push	{r7}
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	bf00      	nop
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8004e34:	b480      	push	{r7}
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	bf00      	nop
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8004e42:	b480      	push	{r7}
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	bf00      	nop
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	4618      	mov	r0, r3
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	460b      	mov	r3, r1
 8004e74:	70fb      	strb	r3, [r7, #3]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	78fa      	ldrb	r2, [r7, #3]
 8004e7a:	701a      	strb	r2, [r3, #0]
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d002      	beq.n	8004e9e <reg_wizchip_cs_cbfunc+0x16>
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d106      	bne.n	8004eac <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8004e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec8 <reg_wizchip_cs_cbfunc+0x40>)
 8004ea0:	4a0a      	ldr	r2, [pc, #40]	@ (8004ecc <reg_wizchip_cs_cbfunc+0x44>)
 8004ea2:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8004ea4:	4b08      	ldr	r3, [pc, #32]	@ (8004ec8 <reg_wizchip_cs_cbfunc+0x40>)
 8004ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ed0 <reg_wizchip_cs_cbfunc+0x48>)
 8004ea8:	619a      	str	r2, [r3, #24]
 8004eaa:	e006      	b.n	8004eba <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8004eac:	4a06      	ldr	r2, [pc, #24]	@ (8004ec8 <reg_wizchip_cs_cbfunc+0x40>)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8004eb2:	4a05      	ldr	r2, [pc, #20]	@ (8004ec8 <reg_wizchip_cs_cbfunc+0x40>)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	6193      	str	r3, [r2, #24]
   }
}
 8004eb8:	bf00      	nop
 8004eba:	bf00      	nop
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	2000002c 	.word	0x2000002c
 8004ecc:	08004e35 	.word	0x08004e35
 8004ed0:	08004e43 	.word	0x08004e43

08004ed4 <reg_wizchip_bus_cbfunc>:

//M20150515 : For integrating with W5300
//void reg_wizchip_bus_cbfunc(uint8_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, uint8_t wb))
void reg_wizchip_bus_cbfunc(iodata_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, iodata_t wb))
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_BUS_));
 8004ede:	bf00      	nop
 8004ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8004f20 <reg_wizchip_bus_cbfunc+0x4c>)
 8004ee2:	881b      	ldrh	r3, [r3, #0]
 8004ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0f9      	beq.n	8004ee0 <reg_wizchip_bus_cbfunc+0xc>
   {
      WIZCHIP.IF.BUS._read_byte   = bus_rb;
      WIZCHIP.IF.BUS._write_byte  = bus_wb;
   }
   */
   if(!bus_rb || !bus_wb)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <reg_wizchip_bus_cbfunc+0x24>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d106      	bne.n	8004f06 <reg_wizchip_bus_cbfunc+0x32>
   {
      WIZCHIP.IF.BUS._read_data   = wizchip_bus_readdata;
 8004ef8:	4b09      	ldr	r3, [pc, #36]	@ (8004f20 <reg_wizchip_bus_cbfunc+0x4c>)
 8004efa:	4a0a      	ldr	r2, [pc, #40]	@ (8004f24 <reg_wizchip_bus_cbfunc+0x50>)
 8004efc:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.BUS._write_data  = wizchip_bus_writedata;
 8004efe:	4b08      	ldr	r3, [pc, #32]	@ (8004f20 <reg_wizchip_bus_cbfunc+0x4c>)
 8004f00:	4a09      	ldr	r2, [pc, #36]	@ (8004f28 <reg_wizchip_bus_cbfunc+0x54>)
 8004f02:	621a      	str	r2, [r3, #32]
 8004f04:	e006      	b.n	8004f14 <reg_wizchip_bus_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.BUS._read_data   = bus_rb;
 8004f06:	4a06      	ldr	r2, [pc, #24]	@ (8004f20 <reg_wizchip_bus_cbfunc+0x4c>)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.BUS._write_data  = bus_wb;
 8004f0c:	4a04      	ldr	r2, [pc, #16]	@ (8004f20 <reg_wizchip_bus_cbfunc+0x4c>)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	6213      	str	r3, [r2, #32]
   }
}
 8004f12:	bf00      	nop
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	2000002c 	.word	0x2000002c
 8004f24:	08004e51 	.word	0x08004e51
 8004f28:	08004e6b 	.word	0x08004e6b

08004f2c <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	4603      	mov	r3, r0
 8004f34:	6039      	str	r1, [r7, #0]
 8004f36:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
#endif
   uint8_t* ptmp[2] = {0,0};
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60bb      	str	r3, [r7, #8]
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	60fb      	str	r3, [r7, #12]
   switch(cwtype)
 8004f40:	79fb      	ldrb	r3, [r7, #7]
 8004f42:	2b08      	cmp	r3, #8
 8004f44:	d863      	bhi.n	800500e <ctlwizchip+0xe2>
 8004f46:	a201      	add	r2, pc, #4	@ (adr r2, 8004f4c <ctlwizchip+0x20>)
 8004f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4c:	08004f71 	.word	0x08004f71
 8004f50:	08004f77 	.word	0x08004f77
 8004f54:	08004fa3 	.word	0x08004fa3
 8004f58:	08004f97 	.word	0x08004f97
 8004f5c:	08004fb1 	.word	0x08004fb1
 8004f60:	08004fbd 	.word	0x08004fbd
 8004f64:	0800500f 	.word	0x0800500f
 8004f68:	0800500f 	.word	0x0800500f
 8004f6c:	08004fcb 	.word	0x08004fcb
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8004f70:	f000 f896 	bl	80050a0 <wizchip_sw_reset>
         break;
 8004f74:	e04e      	b.n	8005014 <ctlwizchip+0xe8>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d004      	beq.n	8004f86 <ctlwizchip+0x5a>
         {
            ptmp[0] = (uint8_t*)arg;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	60bb      	str	r3, [r7, #8]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	3308      	adds	r3, #8
 8004f84:	60fb      	str	r3, [r7, #12]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4611      	mov	r1, r2
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f000 f96c 	bl	800526a <wizchip_init>
 8004f92:	4603      	mov	r3, r0
 8004f94:	e03f      	b.n	8005016 <ctlwizchip+0xea>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	881b      	ldrh	r3, [r3, #0]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 f9fb 	bl	8005396 <wizchip_clrinterrupt>
         break;
 8004fa0:	e038      	b.n	8005014 <ctlwizchip+0xe8>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8004fa2:	f000 fa1a 	bl	80053da <wizchip_getinterrupt>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	461a      	mov	r2, r3
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	801a      	strh	r2, [r3, #0]
         break;
 8004fae:	e031      	b.n	8005014 <ctlwizchip+0xe8>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f000 fa34 	bl	8005422 <wizchip_setinterruptmask>
         break;         
 8004fba:	e02b      	b.n	8005014 <ctlwizchip+0xe8>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8004fbc:	f000 fa53 	bl	8005466 <wizchip_getinterruptmask>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	801a      	strh	r2, [r3, #0]
         break;
 8004fc8:	e024      	b.n	8005014 <ctlwizchip+0xe8>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
         break;
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8004fca:	4b15      	ldr	r3, [pc, #84]	@ (8005020 <ctlwizchip+0xf4>)
 8004fcc:	789a      	ldrb	r2, [r3, #2]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	4a12      	ldr	r2, [pc, #72]	@ (8005020 <ctlwizchip+0xf4>)
 8004fd8:	78d2      	ldrb	r2, [r2, #3]
 8004fda:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	3302      	adds	r3, #2
 8004fe0:	4a0f      	ldr	r2, [pc, #60]	@ (8005020 <ctlwizchip+0xf4>)
 8004fe2:	7912      	ldrb	r2, [r2, #4]
 8004fe4:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	3303      	adds	r3, #3
 8004fea:	4a0d      	ldr	r2, [pc, #52]	@ (8005020 <ctlwizchip+0xf4>)
 8004fec:	7952      	ldrb	r2, [r2, #5]
 8004fee:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	4a0a      	ldr	r2, [pc, #40]	@ (8005020 <ctlwizchip+0xf4>)
 8004ff6:	7992      	ldrb	r2, [r2, #6]
 8004ff8:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	3305      	adds	r3, #5
 8004ffe:	4a08      	ldr	r2, [pc, #32]	@ (8005020 <ctlwizchip+0xf4>)
 8005000:	79d2      	ldrb	r2, [r2, #7]
 8005002:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	3306      	adds	r3, #6
 8005008:	2200      	movs	r2, #0
 800500a:	701a      	strb	r2, [r3, #0]
         break;
 800500c:	e002      	b.n	8005014 <ctlwizchip+0xe8>
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
   #endif      
      default:
         return -1;
 800500e:	f04f 33ff 	mov.w	r3, #4294967295
 8005012:	e000      	b.n	8005016 <ctlwizchip+0xea>
   }
   return 0;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	2000002c 	.word	0x2000002c

08005024 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	4603      	mov	r3, r0
 800502c:	6039      	str	r1, [r7, #0]
 800502e:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8005030:	79fb      	ldrb	r3, [r7, #7]
 8005032:	2b05      	cmp	r3, #5
 8005034:	d82c      	bhi.n	8005090 <ctlnetwork+0x6c>
 8005036:	a201      	add	r2, pc, #4	@ (adr r2, 800503c <ctlnetwork+0x18>)
 8005038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503c:	08005055 	.word	0x08005055
 8005040:	0800505d 	.word	0x0800505d
 8005044:	08005065 	.word	0x08005065
 8005048:	08005073 	.word	0x08005073
 800504c:	08005081 	.word	0x08005081
 8005050:	08005089 	.word	0x08005089
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8005054:	6838      	ldr	r0, [r7, #0]
 8005056:	f000 fa2f 	bl	80054b8 <wizchip_setnetinfo>
         break;
 800505a:	e01c      	b.n	8005096 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 800505c:	6838      	ldr	r0, [r7, #0]
 800505e:	f000 fab7 	bl	80055d0 <wizchip_getnetinfo>
         break;
 8005062:	e018      	b.n	8005096 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	4618      	mov	r0, r3
 800506a:	f000 fb61 	bl	8005730 <wizchip_setnetmode>
 800506e:	4603      	mov	r3, r0
 8005070:	e012      	b.n	8005098 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8005072:	f000 fb82 	bl	800577a <wizchip_getnetmode>
 8005076:	4603      	mov	r3, r0
 8005078:	461a      	mov	r2, r3
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	701a      	strb	r2, [r3, #0]
         break;
 800507e:	e00a      	b.n	8005096 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8005080:	6838      	ldr	r0, [r7, #0]
 8005082:	f000 fb83 	bl	800578c <wizchip_settimeout>
         break;
 8005086:	e006      	b.n	8005096 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8005088:	6838      	ldr	r0, [r7, #0]
 800508a:	f000 fb93 	bl	80057b4 <wizchip_gettimeout>
         break;
 800508e:	e002      	b.n	8005096 <ctlnetwork+0x72>
      default:
         return -1;
 8005090:	f04f 33ff 	mov.w	r3, #4294967295
 8005094:	e000      	b.n	8005098 <ctlnetwork+0x74>
   }
   return 0;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80050a6:	2008      	movs	r0, #8
 80050a8:	f7fe fafa 	bl	80036a0 <WIZCHIP_READ>
 80050ac:	4603      	mov	r3, r0
 80050ae:	0a1b      	lsrs	r3, r3, #8
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	713b      	strb	r3, [r7, #4]
 80050b6:	2008      	movs	r0, #8
 80050b8:	f7fe faf2 	bl	80036a0 <WIZCHIP_READ>
 80050bc:	4603      	mov	r3, r0
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	717b      	strb	r3, [r7, #5]
 80050c2:	200a      	movs	r0, #10
 80050c4:	f7fe faec 	bl	80036a0 <WIZCHIP_READ>
 80050c8:	4603      	mov	r3, r0
 80050ca:	0a1b      	lsrs	r3, r3, #8
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	71bb      	strb	r3, [r7, #6]
 80050d2:	200a      	movs	r0, #10
 80050d4:	f7fe fae4 	bl	80036a0 <WIZCHIP_READ>
 80050d8:	4603      	mov	r3, r0
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	71fb      	strb	r3, [r7, #7]
 80050de:	200c      	movs	r0, #12
 80050e0:	f7fe fade 	bl	80036a0 <WIZCHIP_READ>
 80050e4:	4603      	mov	r3, r0
 80050e6:	0a1b      	lsrs	r3, r3, #8
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	723b      	strb	r3, [r7, #8]
 80050ee:	200c      	movs	r0, #12
 80050f0:	f7fe fad6 	bl	80036a0 <WIZCHIP_READ>
 80050f4:	4603      	mov	r3, r0
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	727b      	strb	r3, [r7, #9]
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80050fa:	2010      	movs	r0, #16
 80050fc:	f7fe fad0 	bl	80036a0 <WIZCHIP_READ>
 8005100:	4603      	mov	r3, r0
 8005102:	0a1b      	lsrs	r3, r3, #8
 8005104:	b29b      	uxth	r3, r3
 8005106:	b2db      	uxtb	r3, r3
 8005108:	753b      	strb	r3, [r7, #20]
 800510a:	2010      	movs	r0, #16
 800510c:	f7fe fac8 	bl	80036a0 <WIZCHIP_READ>
 8005110:	4603      	mov	r3, r0
 8005112:	b2db      	uxtb	r3, r3
 8005114:	757b      	strb	r3, [r7, #21]
 8005116:	2012      	movs	r0, #18
 8005118:	f7fe fac2 	bl	80036a0 <WIZCHIP_READ>
 800511c:	4603      	mov	r3, r0
 800511e:	0a1b      	lsrs	r3, r3, #8
 8005120:	b29b      	uxth	r3, r3
 8005122:	b2db      	uxtb	r3, r3
 8005124:	75bb      	strb	r3, [r7, #22]
 8005126:	2012      	movs	r0, #18
 8005128:	f7fe faba 	bl	80036a0 <WIZCHIP_READ>
 800512c:	4603      	mov	r3, r0
 800512e:	b2db      	uxtb	r3, r3
 8005130:	75fb      	strb	r3, [r7, #23]
 8005132:	2014      	movs	r0, #20
 8005134:	f7fe fab4 	bl	80036a0 <WIZCHIP_READ>
 8005138:	4603      	mov	r3, r0
 800513a:	0a1b      	lsrs	r3, r3, #8
 800513c:	b29b      	uxth	r3, r3
 800513e:	b2db      	uxtb	r3, r3
 8005140:	743b      	strb	r3, [r7, #16]
 8005142:	2014      	movs	r0, #20
 8005144:	f7fe faac 	bl	80036a0 <WIZCHIP_READ>
 8005148:	4603      	mov	r3, r0
 800514a:	b2db      	uxtb	r3, r3
 800514c:	747b      	strb	r3, [r7, #17]
 800514e:	2016      	movs	r0, #22
 8005150:	f7fe faa6 	bl	80036a0 <WIZCHIP_READ>
 8005154:	4603      	mov	r3, r0
 8005156:	0a1b      	lsrs	r3, r3, #8
 8005158:	b29b      	uxth	r3, r3
 800515a:	b2db      	uxtb	r3, r3
 800515c:	74bb      	strb	r3, [r7, #18]
 800515e:	2016      	movs	r0, #22
 8005160:	f7fe fa9e 	bl	80036a0 <WIZCHIP_READ>
 8005164:	4603      	mov	r3, r0
 8005166:	b2db      	uxtb	r3, r3
 8005168:	74fb      	strb	r3, [r7, #19]
 800516a:	2018      	movs	r0, #24
 800516c:	f7fe fa98 	bl	80036a0 <WIZCHIP_READ>
 8005170:	4603      	mov	r3, r0
 8005172:	0a1b      	lsrs	r3, r3, #8
 8005174:	b29b      	uxth	r3, r3
 8005176:	b2db      	uxtb	r3, r3
 8005178:	733b      	strb	r3, [r7, #12]
 800517a:	2018      	movs	r0, #24
 800517c:	f7fe fa90 	bl	80036a0 <WIZCHIP_READ>
 8005180:	4603      	mov	r3, r0
 8005182:	b2db      	uxtb	r3, r3
 8005184:	737b      	strb	r3, [r7, #13]
 8005186:	201a      	movs	r0, #26
 8005188:	f7fe fa8a 	bl	80036a0 <WIZCHIP_READ>
 800518c:	4603      	mov	r3, r0
 800518e:	0a1b      	lsrs	r3, r3, #8
 8005190:	b29b      	uxth	r3, r3
 8005192:	b2db      	uxtb	r3, r3
 8005194:	73bb      	strb	r3, [r7, #14]
 8005196:	201a      	movs	r0, #26
 8005198:	f7fe fa82 	bl	80036a0 <WIZCHIP_READ>
 800519c:	4603      	mov	r3, r0
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	73fb      	strb	r3, [r7, #15]
   setMR(MR_RST);
 80051a2:	2300      	movs	r3, #0
 80051a4:	2200      	movs	r2, #0
 80051a6:	701a      	strb	r2, [r3, #0]
 80051a8:	2301      	movs	r3, #1
 80051aa:	2280      	movs	r2, #128	@ 0x80
 80051ac:	701a      	strb	r2, [r3, #0]
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80051ae:	793b      	ldrb	r3, [r7, #4]
 80051b0:	021b      	lsls	r3, r3, #8
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	797a      	ldrb	r2, [r7, #5]
 80051b6:	4413      	add	r3, r2
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	4619      	mov	r1, r3
 80051bc:	2008      	movs	r0, #8
 80051be:	f7fe fa45 	bl	800364c <WIZCHIP_WRITE>
 80051c2:	79bb      	ldrb	r3, [r7, #6]
 80051c4:	021b      	lsls	r3, r3, #8
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	79fa      	ldrb	r2, [r7, #7]
 80051ca:	4413      	add	r3, r2
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	4619      	mov	r1, r3
 80051d0:	200a      	movs	r0, #10
 80051d2:	f7fe fa3b 	bl	800364c <WIZCHIP_WRITE>
 80051d6:	7a3b      	ldrb	r3, [r7, #8]
 80051d8:	021b      	lsls	r3, r3, #8
 80051da:	b29b      	uxth	r3, r3
 80051dc:	7a7a      	ldrb	r2, [r7, #9]
 80051de:	4413      	add	r3, r2
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	4619      	mov	r1, r3
 80051e4:	200c      	movs	r0, #12
 80051e6:	f7fe fa31 	bl	800364c <WIZCHIP_WRITE>
   setGAR(gw);
 80051ea:	7d3b      	ldrb	r3, [r7, #20]
 80051ec:	021b      	lsls	r3, r3, #8
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	7d7a      	ldrb	r2, [r7, #21]
 80051f2:	4413      	add	r3, r2
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	4619      	mov	r1, r3
 80051f8:	2010      	movs	r0, #16
 80051fa:	f7fe fa27 	bl	800364c <WIZCHIP_WRITE>
 80051fe:	7dbb      	ldrb	r3, [r7, #22]
 8005200:	021b      	lsls	r3, r3, #8
 8005202:	b29b      	uxth	r3, r3
 8005204:	7dfa      	ldrb	r2, [r7, #23]
 8005206:	4413      	add	r3, r2
 8005208:	b29b      	uxth	r3, r3
 800520a:	4619      	mov	r1, r3
 800520c:	2012      	movs	r0, #18
 800520e:	f7fe fa1d 	bl	800364c <WIZCHIP_WRITE>
   setSUBR(sn);
 8005212:	7c3b      	ldrb	r3, [r7, #16]
 8005214:	021b      	lsls	r3, r3, #8
 8005216:	b29b      	uxth	r3, r3
 8005218:	7c7a      	ldrb	r2, [r7, #17]
 800521a:	4413      	add	r3, r2
 800521c:	b29b      	uxth	r3, r3
 800521e:	4619      	mov	r1, r3
 8005220:	2014      	movs	r0, #20
 8005222:	f7fe fa13 	bl	800364c <WIZCHIP_WRITE>
 8005226:	7cbb      	ldrb	r3, [r7, #18]
 8005228:	021b      	lsls	r3, r3, #8
 800522a:	b29b      	uxth	r3, r3
 800522c:	7cfa      	ldrb	r2, [r7, #19]
 800522e:	4413      	add	r3, r2
 8005230:	b29b      	uxth	r3, r3
 8005232:	4619      	mov	r1, r3
 8005234:	2016      	movs	r0, #22
 8005236:	f7fe fa09 	bl	800364c <WIZCHIP_WRITE>
   setSIPR(sip);
 800523a:	7b3b      	ldrb	r3, [r7, #12]
 800523c:	021b      	lsls	r3, r3, #8
 800523e:	b29b      	uxth	r3, r3
 8005240:	7b7a      	ldrb	r2, [r7, #13]
 8005242:	4413      	add	r3, r2
 8005244:	b29b      	uxth	r3, r3
 8005246:	4619      	mov	r1, r3
 8005248:	2018      	movs	r0, #24
 800524a:	f7fe f9ff 	bl	800364c <WIZCHIP_WRITE>
 800524e:	7bbb      	ldrb	r3, [r7, #14]
 8005250:	021b      	lsls	r3, r3, #8
 8005252:	b29b      	uxth	r3, r3
 8005254:	7bfa      	ldrb	r2, [r7, #15]
 8005256:	4413      	add	r3, r2
 8005258:	b29b      	uxth	r3, r3
 800525a:	4619      	mov	r1, r3
 800525c:	201a      	movs	r0, #26
 800525e:	f7fe f9f5 	bl	800364c <WIZCHIP_WRITE>
}
 8005262:	bf00      	nop
 8005264:	3718      	adds	r7, #24
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b084      	sub	sp, #16
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
 8005272:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8005274:	2300      	movs	r3, #0
 8005276:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8005278:	f7ff ff12 	bl	80050a0 <wizchip_sw_reset>
   if(txsize)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d040      	beq.n	8005304 <wizchip_init+0x9a>
   {
      tmp = 0;
 8005282:	2300      	movs	r3, #0
 8005284:	73bb      	strb	r3, [r7, #14]
//M20150601 : For integrating with W5300
#if _WIZCHIP_ == W5300
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005286:	2300      	movs	r3, #0
 8005288:	73fb      	strb	r3, [r7, #15]
 800528a:	e018      	b.n	80052be <wizchip_init+0x54>
		{
			if(txsize[i] > 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 800528c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	4413      	add	r3, r2
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	2b40      	cmp	r3, #64	@ 0x40
 8005298:	d902      	bls.n	80052a0 <wizchip_init+0x36>
 800529a:	f04f 33ff 	mov.w	r3, #4294967295
 800529e:	e076      	b.n	800538e <wizchip_init+0x124>
			tmp += txsize[i];
 80052a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	4413      	add	r3, r2
 80052a8:	781a      	ldrb	r2, [r3, #0]
 80052aa:	7bbb      	ldrb	r3, [r7, #14]
 80052ac:	4413      	add	r3, r2
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	73bb      	strb	r3, [r7, #14]
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80052b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	3301      	adds	r3, #1
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	73fb      	strb	r3, [r7, #15]
 80052be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052c2:	2b07      	cmp	r3, #7
 80052c4:	dde2      	ble.n	800528c <wizchip_init+0x22>
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 80052c6:	7bbb      	ldrb	r3, [r7, #14]
 80052c8:	f003 0307 	and.w	r3, r3, #7
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d002      	beq.n	80052d8 <wizchip_init+0x6e>
 80052d2:	f04f 33ff 	mov.w	r3, #4294967295
 80052d6:	e05a      	b.n	800538e <wizchip_init+0x124>
#else
			if(tmp > 16) return -1;
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80052d8:	2300      	movs	r3, #0
 80052da:	73fb      	strb	r3, [r7, #15]
 80052dc:	e00e      	b.n	80052fc <wizchip_init+0x92>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80052de:	7bf8      	ldrb	r0, [r7, #15]
 80052e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	4413      	add	r3, r2
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	4619      	mov	r1, r3
 80052ec:	f7fe fa02 	bl	80036f4 <setTMSR>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80052f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	3301      	adds	r3, #1
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	73fb      	strb	r3, [r7, #15]
 80052fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005300:	2b07      	cmp	r3, #7
 8005302:	ddec      	ble.n	80052de <wizchip_init+0x74>
#endif
		}	
   }

   if(rxsize)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d040      	beq.n	800538c <wizchip_init+0x122>
   {
      tmp = 0;
 800530a:	2300      	movs	r3, #0
 800530c:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ == W5300
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800530e:	2300      	movs	r3, #0
 8005310:	73fb      	strb	r3, [r7, #15]
 8005312:	e018      	b.n	8005346 <wizchip_init+0xdc>
		{
			if(rxsize[i] > 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8005314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	4413      	add	r3, r2
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	2b40      	cmp	r3, #64	@ 0x40
 8005320:	d902      	bls.n	8005328 <wizchip_init+0xbe>
 8005322:	f04f 33ff 	mov.w	r3, #4294967295
 8005326:	e032      	b.n	800538e <wizchip_init+0x124>
			tmp += rxsize[i];
 8005328:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	4413      	add	r3, r2
 8005330:	781a      	ldrb	r2, [r3, #0]
 8005332:	7bbb      	ldrb	r3, [r7, #14]
 8005334:	4413      	add	r3, r2
 8005336:	b2db      	uxtb	r3, r3
 8005338:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800533a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800533e:	b2db      	uxtb	r3, r3
 8005340:	3301      	adds	r3, #1
 8005342:	b2db      	uxtb	r3, r3
 8005344:	73fb      	strb	r3, [r7, #15]
 8005346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800534a:	2b07      	cmp	r3, #7
 800534c:	dde2      	ble.n	8005314 <wizchip_init+0xaa>
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 800534e:	7bbb      	ldrb	r3, [r7, #14]
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d002      	beq.n	8005360 <wizchip_init+0xf6>
 800535a:	f04f 33ff 	mov.w	r3, #4294967295
 800535e:	e016      	b.n	800538e <wizchip_init+0x124>
#else
			if(tmp > 16) return -1;
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005360:	2300      	movs	r3, #0
 8005362:	73fb      	strb	r3, [r7, #15]
 8005364:	e00e      	b.n	8005384 <wizchip_init+0x11a>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8005366:	7bf8      	ldrb	r0, [r7, #15]
 8005368:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	4413      	add	r3, r2
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	4619      	mov	r1, r3
 8005374:	f7fe fa1a 	bl	80037ac <setRMSR>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800537c:	b2db      	uxtb	r3, r3
 800537e:	3301      	adds	r3, #1
 8005380:	b2db      	uxtb	r3, r3
 8005382:	73fb      	strb	r3, [r7, #15]
 8005384:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005388:	2b07      	cmp	r3, #7
 800538a:	ddec      	ble.n	8005366 <wizchip_init+0xfc>
#endif
		}
   }
   return 0;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b084      	sub	sp, #16
 800539a:	af00      	add	r7, sp, #0
 800539c:	4603      	mov	r3, r0
 800539e:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 80053a0:	88fb      	ldrh	r3, [r7, #6]
 80053a2:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80053a4:	88fb      	ldrh	r3, [r7, #6]
 80053a6:	0a1b      	lsrs	r3, r3, #8
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   ir |= (1<<4); // IK_WOL
 80053ac:	7bfb      	ldrb	r3, [r7, #15]
 80053ae:	f043 0310 	orr.w	r3, r3, #16
 80053b2:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ <= W5100S
   ir |= sir;
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
 80053b4:	7bfb      	ldrb	r3, [r7, #15]
 80053b6:	021b      	lsls	r3, r3, #8
 80053b8:	b21a      	sxth	r2, r3
 80053ba:	7bbb      	ldrb	r3, [r7, #14]
 80053bc:	b21b      	sxth	r3, r3
 80053be:	4313      	orrs	r3, r2
 80053c0:	b21b      	sxth	r3, r3
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	4619      	mov	r1, r3
 80053cc:	2002      	movs	r0, #2
 80053ce:	f7fe f93d 	bl	800364c <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
   }

#endif   
}
 80053d2:	bf00      	nop
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b082      	sub	sp, #8
 80053de:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 80053e0:	2300      	movs	r3, #0
 80053e2:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 80053e4:	2300      	movs	r3, #0
 80053e6:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80053e8:	2300      	movs	r3, #0
 80053ea:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ <= W5100S
   ir = getIR();
   sir = ir & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_  == W5300
   ret = getIR();
 80053ec:	2002      	movs	r0, #2
 80053ee:	f7fe f957 	bl	80036a0 <WIZCHIP_READ>
 80053f2:	4603      	mov	r3, r0
 80053f4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80053f8:	80bb      	strh	r3, [r7, #4]
   ir = (uint8_t)(ret >> 8);
 80053fa:	88bb      	ldrh	r3, [r7, #4]
 80053fc:	0a1b      	lsrs	r3, r3, #8
 80053fe:	b29b      	uxth	r3, r3
 8005400:	71fb      	strb	r3, [r7, #7]
   sir = (uint8_t)ret;
 8005402:	88bb      	ldrh	r3, [r7, #4]
 8005404:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8005406:	79bb      	ldrb	r3, [r7, #6]
 8005408:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 800540a:	88bb      	ldrh	r3, [r7, #4]
 800540c:	021b      	lsls	r3, r3, #8
 800540e:	b29a      	uxth	r2, r3
 8005410:	79fb      	ldrb	r3, [r7, #7]
 8005412:	b29b      	uxth	r3, r3
 8005414:	4413      	add	r3, r2
 8005416:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8005418:	88bb      	ldrh	r3, [r7, #4]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3708      	adds	r7, #8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b084      	sub	sp, #16
 8005426:	af00      	add	r7, sp, #0
 8005428:	4603      	mov	r3, r0
 800542a:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 800542c:	88fb      	ldrh	r3, [r7, #6]
 800542e:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8005430:	88fb      	ldrh	r3, [r7, #6]
 8005432:	0a1b      	lsrs	r3, r3, #8
 8005434:	b29b      	uxth	r3, r3
 8005436:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 8005438:	7bfb      	ldrb	r3, [r7, #15]
 800543a:	f023 0310 	bic.w	r3, r3, #16
 800543e:	73fb      	strb	r3, [r7, #15]
   simr &= 0x0F;
   imr |= simr;
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
 8005440:	7bfb      	ldrb	r3, [r7, #15]
 8005442:	021b      	lsls	r3, r3, #8
 8005444:	b21a      	sxth	r2, r3
 8005446:	7bbb      	ldrb	r3, [r7, #14]
 8005448:	b21b      	sxth	r3, r3
 800544a:	4313      	orrs	r3, r2
 800544c:	b21b      	sxth	r3, r3
 800544e:	b29b      	uxth	r3, r3
 8005450:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005454:	b29b      	uxth	r3, r3
 8005456:	4619      	mov	r1, r3
 8005458:	2004      	movs	r0, #4
 800545a:	f7fe f8f7 	bl	800364c <WIZCHIP_WRITE>
#else
   setIMR(imr);
   setSIMR(simr);
#endif   
}
 800545e:	bf00      	nop
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b082      	sub	sp, #8
 800546a:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 800546c:	2300      	movs	r3, #0
 800546e:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8005470:	2300      	movs	r3, #0
 8005472:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8005474:	2300      	movs	r3, #0
 8005476:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ < W5200
   imr  = getIMR();
   simr = imr & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   ret = getIMR();
 8005478:	2004      	movs	r0, #4
 800547a:	f7fe f911 	bl	80036a0 <WIZCHIP_READ>
 800547e:	4603      	mov	r3, r0
 8005480:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005484:	80bb      	strh	r3, [r7, #4]
   imr = (uint8_t)(ret >> 8);
 8005486:	88bb      	ldrh	r3, [r7, #4]
 8005488:	0a1b      	lsrs	r3, r3, #8
 800548a:	b29b      	uxth	r3, r3
 800548c:	71fb      	strb	r3, [r7, #7]
   simr = (uint8_t)ret;
 800548e:	88bb      	ldrh	r3, [r7, #4]
 8005490:	71bb      	strb	r3, [r7, #6]
   imr  = getIMR();
   simr = getSIMR();
#endif         

#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 8005492:	79fb      	ldrb	r3, [r7, #7]
 8005494:	f023 0310 	bic.w	r3, r3, #16
 8005498:	71fb      	strb	r3, [r7, #7]
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 800549a:	79bb      	ldrb	r3, [r7, #6]
 800549c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 800549e:	88bb      	ldrh	r3, [r7, #4]
 80054a0:	021b      	lsls	r3, r3, #8
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	79fb      	ldrb	r3, [r7, #7]
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	4413      	add	r3, r2
 80054aa:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80054ac:	88bb      	ldrh	r3, [r7, #4]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
	...

080054b8 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	021b      	lsls	r3, r3, #8
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	7852      	ldrb	r2, [r2, #1]
 80054cc:	4413      	add	r3, r2
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	4619      	mov	r1, r3
 80054d2:	2008      	movs	r0, #8
 80054d4:	f7fe f8ba 	bl	800364c <WIZCHIP_WRITE>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	789b      	ldrb	r3, [r3, #2]
 80054dc:	021b      	lsls	r3, r3, #8
 80054de:	b29b      	uxth	r3, r3
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	78d2      	ldrb	r2, [r2, #3]
 80054e4:	4413      	add	r3, r2
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	4619      	mov	r1, r3
 80054ea:	200a      	movs	r0, #10
 80054ec:	f7fe f8ae 	bl	800364c <WIZCHIP_WRITE>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	791b      	ldrb	r3, [r3, #4]
 80054f4:	021b      	lsls	r3, r3, #8
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	7952      	ldrb	r2, [r2, #5]
 80054fc:	4413      	add	r3, r2
 80054fe:	b29b      	uxth	r3, r3
 8005500:	4619      	mov	r1, r3
 8005502:	200c      	movs	r0, #12
 8005504:	f7fe f8a2 	bl	800364c <WIZCHIP_WRITE>
   setGAR(pnetinfo->gw);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	7b9b      	ldrb	r3, [r3, #14]
 800550c:	021b      	lsls	r3, r3, #8
 800550e:	b29b      	uxth	r3, r3
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	7bd2      	ldrb	r2, [r2, #15]
 8005514:	4413      	add	r3, r2
 8005516:	b29b      	uxth	r3, r3
 8005518:	4619      	mov	r1, r3
 800551a:	2010      	movs	r0, #16
 800551c:	f7fe f896 	bl	800364c <WIZCHIP_WRITE>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	7c1b      	ldrb	r3, [r3, #16]
 8005524:	021b      	lsls	r3, r3, #8
 8005526:	b29b      	uxth	r3, r3
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	7c52      	ldrb	r2, [r2, #17]
 800552c:	4413      	add	r3, r2
 800552e:	b29b      	uxth	r3, r3
 8005530:	4619      	mov	r1, r3
 8005532:	2012      	movs	r0, #18
 8005534:	f7fe f88a 	bl	800364c <WIZCHIP_WRITE>
   setSUBR(pnetinfo->sn);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	7a9b      	ldrb	r3, [r3, #10]
 800553c:	021b      	lsls	r3, r3, #8
 800553e:	b29b      	uxth	r3, r3
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	7ad2      	ldrb	r2, [r2, #11]
 8005544:	4413      	add	r3, r2
 8005546:	b29b      	uxth	r3, r3
 8005548:	4619      	mov	r1, r3
 800554a:	2014      	movs	r0, #20
 800554c:	f7fe f87e 	bl	800364c <WIZCHIP_WRITE>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	7b1b      	ldrb	r3, [r3, #12]
 8005554:	021b      	lsls	r3, r3, #8
 8005556:	b29b      	uxth	r3, r3
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	7b52      	ldrb	r2, [r2, #13]
 800555c:	4413      	add	r3, r2
 800555e:	b29b      	uxth	r3, r3
 8005560:	4619      	mov	r1, r3
 8005562:	2016      	movs	r0, #22
 8005564:	f7fe f872 	bl	800364c <WIZCHIP_WRITE>
   setSIPR(pnetinfo->ip);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	799b      	ldrb	r3, [r3, #6]
 800556c:	021b      	lsls	r3, r3, #8
 800556e:	b29b      	uxth	r3, r3
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	79d2      	ldrb	r2, [r2, #7]
 8005574:	4413      	add	r3, r2
 8005576:	b29b      	uxth	r3, r3
 8005578:	4619      	mov	r1, r3
 800557a:	2018      	movs	r0, #24
 800557c:	f7fe f866 	bl	800364c <WIZCHIP_WRITE>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	7a1b      	ldrb	r3, [r3, #8]
 8005584:	021b      	lsls	r3, r3, #8
 8005586:	b29b      	uxth	r3, r3
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	7a52      	ldrb	r2, [r2, #9]
 800558c:	4413      	add	r3, r2
 800558e:	b29b      	uxth	r3, r3
 8005590:	4619      	mov	r1, r3
 8005592:	201a      	movs	r0, #26
 8005594:	f7fe f85a 	bl	800364c <WIZCHIP_WRITE>
   _DNS_[0] = pnetinfo->dns[0];
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	7c9a      	ldrb	r2, [r3, #18]
 800559c:	4b0a      	ldr	r3, [pc, #40]	@ (80055c8 <wizchip_setnetinfo+0x110>)
 800559e:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	7cda      	ldrb	r2, [r3, #19]
 80055a4:	4b08      	ldr	r3, [pc, #32]	@ (80055c8 <wizchip_setnetinfo+0x110>)
 80055a6:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	7d1a      	ldrb	r2, [r3, #20]
 80055ac:	4b06      	ldr	r3, [pc, #24]	@ (80055c8 <wizchip_setnetinfo+0x110>)
 80055ae:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	7d5a      	ldrb	r2, [r3, #21]
 80055b4:	4b04      	ldr	r3, [pc, #16]	@ (80055c8 <wizchip_setnetinfo+0x110>)
 80055b6:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	7d9a      	ldrb	r2, [r3, #22]
 80055bc:	4b03      	ldr	r3, [pc, #12]	@ (80055cc <wizchip_setnetinfo+0x114>)
 80055be:	701a      	strb	r2, [r3, #0]
}
 80055c0:	bf00      	nop
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	20001200 	.word	0x20001200
 80055cc:	20001204 	.word	0x20001204

080055d0 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80055d8:	2008      	movs	r0, #8
 80055da:	f7fe f861 	bl	80036a0 <WIZCHIP_READ>
 80055de:	4603      	mov	r3, r0
 80055e0:	0a1b      	lsrs	r3, r3, #8
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	701a      	strb	r2, [r3, #0]
 80055ea:	2008      	movs	r0, #8
 80055ec:	f7fe f858 	bl	80036a0 <WIZCHIP_READ>
 80055f0:	4603      	mov	r3, r0
 80055f2:	b2da      	uxtb	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	705a      	strb	r2, [r3, #1]
 80055f8:	200a      	movs	r0, #10
 80055fa:	f7fe f851 	bl	80036a0 <WIZCHIP_READ>
 80055fe:	4603      	mov	r3, r0
 8005600:	0a1b      	lsrs	r3, r3, #8
 8005602:	b29b      	uxth	r3, r3
 8005604:	b2da      	uxtb	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	709a      	strb	r2, [r3, #2]
 800560a:	200a      	movs	r0, #10
 800560c:	f7fe f848 	bl	80036a0 <WIZCHIP_READ>
 8005610:	4603      	mov	r3, r0
 8005612:	b2da      	uxtb	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	70da      	strb	r2, [r3, #3]
 8005618:	200c      	movs	r0, #12
 800561a:	f7fe f841 	bl	80036a0 <WIZCHIP_READ>
 800561e:	4603      	mov	r3, r0
 8005620:	0a1b      	lsrs	r3, r3, #8
 8005622:	b29b      	uxth	r3, r3
 8005624:	b2da      	uxtb	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	711a      	strb	r2, [r3, #4]
 800562a:	200c      	movs	r0, #12
 800562c:	f7fe f838 	bl	80036a0 <WIZCHIP_READ>
 8005630:	4603      	mov	r3, r0
 8005632:	b2da      	uxtb	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	715a      	strb	r2, [r3, #5]
   getGAR(pnetinfo->gw);
 8005638:	2010      	movs	r0, #16
 800563a:	f7fe f831 	bl	80036a0 <WIZCHIP_READ>
 800563e:	4603      	mov	r3, r0
 8005640:	0a1b      	lsrs	r3, r3, #8
 8005642:	b29b      	uxth	r3, r3
 8005644:	b2da      	uxtb	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	739a      	strb	r2, [r3, #14]
 800564a:	2010      	movs	r0, #16
 800564c:	f7fe f828 	bl	80036a0 <WIZCHIP_READ>
 8005650:	4603      	mov	r3, r0
 8005652:	b2da      	uxtb	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	73da      	strb	r2, [r3, #15]
 8005658:	2012      	movs	r0, #18
 800565a:	f7fe f821 	bl	80036a0 <WIZCHIP_READ>
 800565e:	4603      	mov	r3, r0
 8005660:	0a1b      	lsrs	r3, r3, #8
 8005662:	b29b      	uxth	r3, r3
 8005664:	b2da      	uxtb	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	741a      	strb	r2, [r3, #16]
 800566a:	2012      	movs	r0, #18
 800566c:	f7fe f818 	bl	80036a0 <WIZCHIP_READ>
 8005670:	4603      	mov	r3, r0
 8005672:	b2da      	uxtb	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	745a      	strb	r2, [r3, #17]
   getSUBR(pnetinfo->sn);
 8005678:	2014      	movs	r0, #20
 800567a:	f7fe f811 	bl	80036a0 <WIZCHIP_READ>
 800567e:	4603      	mov	r3, r0
 8005680:	0a1b      	lsrs	r3, r3, #8
 8005682:	b29b      	uxth	r3, r3
 8005684:	b2da      	uxtb	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	729a      	strb	r2, [r3, #10]
 800568a:	2014      	movs	r0, #20
 800568c:	f7fe f808 	bl	80036a0 <WIZCHIP_READ>
 8005690:	4603      	mov	r3, r0
 8005692:	b2da      	uxtb	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	72da      	strb	r2, [r3, #11]
 8005698:	2016      	movs	r0, #22
 800569a:	f7fe f801 	bl	80036a0 <WIZCHIP_READ>
 800569e:	4603      	mov	r3, r0
 80056a0:	0a1b      	lsrs	r3, r3, #8
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	731a      	strb	r2, [r3, #12]
 80056aa:	2016      	movs	r0, #22
 80056ac:	f7fd fff8 	bl	80036a0 <WIZCHIP_READ>
 80056b0:	4603      	mov	r3, r0
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	735a      	strb	r2, [r3, #13]
   getSIPR(pnetinfo->ip);
 80056b8:	2018      	movs	r0, #24
 80056ba:	f7fd fff1 	bl	80036a0 <WIZCHIP_READ>
 80056be:	4603      	mov	r3, r0
 80056c0:	0a1b      	lsrs	r3, r3, #8
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	b2da      	uxtb	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	719a      	strb	r2, [r3, #6]
 80056ca:	2018      	movs	r0, #24
 80056cc:	f7fd ffe8 	bl	80036a0 <WIZCHIP_READ>
 80056d0:	4603      	mov	r3, r0
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	71da      	strb	r2, [r3, #7]
 80056d8:	201a      	movs	r0, #26
 80056da:	f7fd ffe1 	bl	80036a0 <WIZCHIP_READ>
 80056de:	4603      	mov	r3, r0
 80056e0:	0a1b      	lsrs	r3, r3, #8
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	721a      	strb	r2, [r3, #8]
 80056ea:	201a      	movs	r0, #26
 80056ec:	f7fd ffd8 	bl	80036a0 <WIZCHIP_READ>
 80056f0:	4603      	mov	r3, r0
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	725a      	strb	r2, [r3, #9]
   pnetinfo->dns[0]= _DNS_[0];
 80056f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005728 <wizchip_getnetinfo+0x158>)
 80056fa:	781a      	ldrb	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8005700:	4b09      	ldr	r3, [pc, #36]	@ (8005728 <wizchip_getnetinfo+0x158>)
 8005702:	785a      	ldrb	r2, [r3, #1]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8005708:	4b07      	ldr	r3, [pc, #28]	@ (8005728 <wizchip_getnetinfo+0x158>)
 800570a:	789a      	ldrb	r2, [r3, #2]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8005710:	4b05      	ldr	r3, [pc, #20]	@ (8005728 <wizchip_getnetinfo+0x158>)
 8005712:	78da      	ldrb	r2, [r3, #3]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8005718:	4b04      	ldr	r3, [pc, #16]	@ (800572c <wizchip_getnetinfo+0x15c>)
 800571a:	781a      	ldrb	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	759a      	strb	r2, [r3, #22]
}
 8005720:	bf00      	nop
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	20001200 	.word	0x20001200
 800572c:	20001204 	.word	0x20001204

08005730 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	4603      	mov	r3, r0
 8005738:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800573a:	2300      	movs	r3, #0
 800573c:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
 800573e:	79fb      	ldrb	r3, [r7, #7]
 8005740:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8005744:	2b00      	cmp	r3, #0
 8005746:	d002      	beq.n	800574e <wizchip_setnetmode+0x1e>
 8005748:	f04f 33ff 	mov.w	r3, #4294967295
 800574c:	e00f      	b.n	800576e <wizchip_setnetmode+0x3e>
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
#endif      
   tmp = getMR();
 800574e:	2301      	movs	r3, #1
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8005754:	7bfa      	ldrb	r2, [r7, #15]
 8005756:	79fb      	ldrb	r3, [r7, #7]
 8005758:	4313      	orrs	r3, r2
 800575a:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 800575c:	7bfb      	ldrb	r3, [r7, #15]
 800575e:	121a      	asrs	r2, r3, #8
 8005760:	2300      	movs	r3, #0
 8005762:	b2d2      	uxtb	r2, r2
 8005764:	701a      	strb	r2, [r3, #0]
 8005766:	2201      	movs	r2, #1
 8005768:	7bfb      	ldrb	r3, [r7, #15]
 800576a:	7013      	strb	r3, [r2, #0]
   return 0;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 800577a:	b480      	push	{r7}
 800577c:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 800577e:	2301      	movs	r3, #1
 8005780:	781b      	ldrb	r3, [r3, #0]
}
 8005782:	4618      	mov	r0, r3
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	4619      	mov	r1, r3
 800579a:	201e      	movs	r0, #30
 800579c:	f7fd ff56 	bl	800364c <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	885b      	ldrh	r3, [r3, #2]
 80057a4:	4619      	mov	r1, r3
 80057a6:	201c      	movs	r0, #28
 80057a8:	f7fd ff50 	bl	800364c <WIZCHIP_WRITE>
}
 80057ac:	bf00      	nop
 80057ae:	3708      	adds	r7, #8
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 80057bc:	201e      	movs	r0, #30
 80057be:	f7fd ff6f 	bl	80036a0 <WIZCHIP_READ>
 80057c2:	4603      	mov	r3, r0
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 80057ca:	201c      	movs	r0, #28
 80057cc:	f7fd ff68 	bl	80036a0 <WIZCHIP_READ>
 80057d0:	4603      	mov	r3, r0
 80057d2:	461a      	mov	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	805a      	strh	r2, [r3, #2]
}
 80057d8:	bf00      	nop
 80057da:	3708      	adds	r7, #8
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 80057e4:	4b24      	ldr	r3, [pc, #144]	@ (8005878 <default_ip_assign+0x98>)
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	021b      	lsls	r3, r3, #8
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	4a22      	ldr	r2, [pc, #136]	@ (8005878 <default_ip_assign+0x98>)
 80057ee:	7852      	ldrb	r2, [r2, #1]
 80057f0:	4413      	add	r3, r2
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	4619      	mov	r1, r3
 80057f6:	2018      	movs	r0, #24
 80057f8:	f7fd ff28 	bl	800364c <WIZCHIP_WRITE>
 80057fc:	4b1e      	ldr	r3, [pc, #120]	@ (8005878 <default_ip_assign+0x98>)
 80057fe:	789b      	ldrb	r3, [r3, #2]
 8005800:	021b      	lsls	r3, r3, #8
 8005802:	b29b      	uxth	r3, r3
 8005804:	4a1c      	ldr	r2, [pc, #112]	@ (8005878 <default_ip_assign+0x98>)
 8005806:	78d2      	ldrb	r2, [r2, #3]
 8005808:	4413      	add	r3, r2
 800580a:	b29b      	uxth	r3, r3
 800580c:	4619      	mov	r1, r3
 800580e:	201a      	movs	r0, #26
 8005810:	f7fd ff1c 	bl	800364c <WIZCHIP_WRITE>
   setSUBR(DHCP_allocated_sn);
 8005814:	4b19      	ldr	r3, [pc, #100]	@ (800587c <default_ip_assign+0x9c>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	021b      	lsls	r3, r3, #8
 800581a:	b29b      	uxth	r3, r3
 800581c:	4a17      	ldr	r2, [pc, #92]	@ (800587c <default_ip_assign+0x9c>)
 800581e:	7852      	ldrb	r2, [r2, #1]
 8005820:	4413      	add	r3, r2
 8005822:	b29b      	uxth	r3, r3
 8005824:	4619      	mov	r1, r3
 8005826:	2014      	movs	r0, #20
 8005828:	f7fd ff10 	bl	800364c <WIZCHIP_WRITE>
 800582c:	4b13      	ldr	r3, [pc, #76]	@ (800587c <default_ip_assign+0x9c>)
 800582e:	789b      	ldrb	r3, [r3, #2]
 8005830:	021b      	lsls	r3, r3, #8
 8005832:	b29b      	uxth	r3, r3
 8005834:	4a11      	ldr	r2, [pc, #68]	@ (800587c <default_ip_assign+0x9c>)
 8005836:	78d2      	ldrb	r2, [r2, #3]
 8005838:	4413      	add	r3, r2
 800583a:	b29b      	uxth	r3, r3
 800583c:	4619      	mov	r1, r3
 800583e:	2016      	movs	r0, #22
 8005840:	f7fd ff04 	bl	800364c <WIZCHIP_WRITE>
   setGAR (DHCP_allocated_gw);
 8005844:	4b0e      	ldr	r3, [pc, #56]	@ (8005880 <default_ip_assign+0xa0>)
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	021b      	lsls	r3, r3, #8
 800584a:	b29b      	uxth	r3, r3
 800584c:	4a0c      	ldr	r2, [pc, #48]	@ (8005880 <default_ip_assign+0xa0>)
 800584e:	7852      	ldrb	r2, [r2, #1]
 8005850:	4413      	add	r3, r2
 8005852:	b29b      	uxth	r3, r3
 8005854:	4619      	mov	r1, r3
 8005856:	2010      	movs	r0, #16
 8005858:	f7fd fef8 	bl	800364c <WIZCHIP_WRITE>
 800585c:	4b08      	ldr	r3, [pc, #32]	@ (8005880 <default_ip_assign+0xa0>)
 800585e:	789b      	ldrb	r3, [r3, #2]
 8005860:	021b      	lsls	r3, r3, #8
 8005862:	b29b      	uxth	r3, r3
 8005864:	4a06      	ldr	r2, [pc, #24]	@ (8005880 <default_ip_assign+0xa0>)
 8005866:	78d2      	ldrb	r2, [r2, #3]
 8005868:	4413      	add	r3, r2
 800586a:	b29b      	uxth	r3, r3
 800586c:	4619      	mov	r1, r3
 800586e:	2012      	movs	r0, #18
 8005870:	f7fd feec 	bl	800364c <WIZCHIP_WRITE>
}
 8005874:	bf00      	nop
 8005876:	bd80      	pop	{r7, pc}
 8005878:	20001214 	.word	0x20001214
 800587c:	2000121c 	.word	0x2000121c
 8005880:	20001218 	.word	0x20001218

08005884 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8005888:	2300      	movs	r3, #0
 800588a:	2200      	movs	r2, #0
 800588c:	701a      	strb	r2, [r3, #0]
 800588e:	2301      	movs	r3, #1
 8005890:	2280      	movs	r2, #128	@ 0x80
 8005892:	701a      	strb	r2, [r3, #0]
   getMR(); // for delay
   default_ip_assign();
 8005894:	f7ff ffa4 	bl	80057e0 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8005898:	4b12      	ldr	r3, [pc, #72]	@ (80058e4 <default_ip_update+0x60>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	021b      	lsls	r3, r3, #8
 800589e:	b29b      	uxth	r3, r3
 80058a0:	4a10      	ldr	r2, [pc, #64]	@ (80058e4 <default_ip_update+0x60>)
 80058a2:	7852      	ldrb	r2, [r2, #1]
 80058a4:	4413      	add	r3, r2
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	4619      	mov	r1, r3
 80058aa:	2008      	movs	r0, #8
 80058ac:	f7fd fece 	bl	800364c <WIZCHIP_WRITE>
 80058b0:	4b0c      	ldr	r3, [pc, #48]	@ (80058e4 <default_ip_update+0x60>)
 80058b2:	789b      	ldrb	r3, [r3, #2]
 80058b4:	021b      	lsls	r3, r3, #8
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	4a0a      	ldr	r2, [pc, #40]	@ (80058e4 <default_ip_update+0x60>)
 80058ba:	78d2      	ldrb	r2, [r2, #3]
 80058bc:	4413      	add	r3, r2
 80058be:	b29b      	uxth	r3, r3
 80058c0:	4619      	mov	r1, r3
 80058c2:	200a      	movs	r0, #10
 80058c4:	f7fd fec2 	bl	800364c <WIZCHIP_WRITE>
 80058c8:	4b06      	ldr	r3, [pc, #24]	@ (80058e4 <default_ip_update+0x60>)
 80058ca:	791b      	ldrb	r3, [r3, #4]
 80058cc:	021b      	lsls	r3, r3, #8
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	4a04      	ldr	r2, [pc, #16]	@ (80058e4 <default_ip_update+0x60>)
 80058d2:	7952      	ldrb	r2, [r2, #5]
 80058d4:	4413      	add	r3, r2
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	4619      	mov	r1, r3
 80058da:	200c      	movs	r0, #12
 80058dc:	f7fd feb6 	bl	800364c <WIZCHIP_WRITE>
}
 80058e0:	bf00      	nop
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	20001234 	.word	0x20001234

080058e8 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 80058ec:	2300      	movs	r3, #0
 80058ee:	2200      	movs	r2, #0
 80058f0:	701a      	strb	r2, [r3, #0]
 80058f2:	2301      	movs	r3, #1
 80058f4:	2280      	movs	r2, #128	@ 0x80
 80058f6:	701a      	strb	r2, [r3, #0]
	getMR(); // for delay
	setSHAR(DHCP_CHADDR);
 80058f8:	4b12      	ldr	r3, [pc, #72]	@ (8005944 <default_ip_conflict+0x5c>)
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	021b      	lsls	r3, r3, #8
 80058fe:	b29b      	uxth	r3, r3
 8005900:	4a10      	ldr	r2, [pc, #64]	@ (8005944 <default_ip_conflict+0x5c>)
 8005902:	7852      	ldrb	r2, [r2, #1]
 8005904:	4413      	add	r3, r2
 8005906:	b29b      	uxth	r3, r3
 8005908:	4619      	mov	r1, r3
 800590a:	2008      	movs	r0, #8
 800590c:	f7fd fe9e 	bl	800364c <WIZCHIP_WRITE>
 8005910:	4b0c      	ldr	r3, [pc, #48]	@ (8005944 <default_ip_conflict+0x5c>)
 8005912:	789b      	ldrb	r3, [r3, #2]
 8005914:	021b      	lsls	r3, r3, #8
 8005916:	b29b      	uxth	r3, r3
 8005918:	4a0a      	ldr	r2, [pc, #40]	@ (8005944 <default_ip_conflict+0x5c>)
 800591a:	78d2      	ldrb	r2, [r2, #3]
 800591c:	4413      	add	r3, r2
 800591e:	b29b      	uxth	r3, r3
 8005920:	4619      	mov	r1, r3
 8005922:	200a      	movs	r0, #10
 8005924:	f7fd fe92 	bl	800364c <WIZCHIP_WRITE>
 8005928:	4b06      	ldr	r3, [pc, #24]	@ (8005944 <default_ip_conflict+0x5c>)
 800592a:	791b      	ldrb	r3, [r3, #4]
 800592c:	021b      	lsls	r3, r3, #8
 800592e:	b29b      	uxth	r3, r3
 8005930:	4a04      	ldr	r2, [pc, #16]	@ (8005944 <default_ip_conflict+0x5c>)
 8005932:	7952      	ldrb	r2, [r2, #5]
 8005934:	4413      	add	r3, r2
 8005936:	b29b      	uxth	r3, r3
 8005938:	4619      	mov	r1, r3
 800593a:	200c      	movs	r0, #12
 800593c:	f7fd fe86 	bl	800364c <WIZCHIP_WRITE>
}
 8005940:	bf00      	nop
 8005942:	bd80      	pop	{r7, pc}
 8005944:	20001234 	.word	0x20001234

08005948 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 8005954:	4b10      	ldr	r3, [pc, #64]	@ (8005998 <reg_dhcp_cbfunc+0x50>)
 8005956:	4a11      	ldr	r2, [pc, #68]	@ (800599c <reg_dhcp_cbfunc+0x54>)
 8005958:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 800595a:	4b11      	ldr	r3, [pc, #68]	@ (80059a0 <reg_dhcp_cbfunc+0x58>)
 800595c:	4a11      	ldr	r2, [pc, #68]	@ (80059a4 <reg_dhcp_cbfunc+0x5c>)
 800595e:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 8005960:	4b11      	ldr	r3, [pc, #68]	@ (80059a8 <reg_dhcp_cbfunc+0x60>)
 8005962:	4a12      	ldr	r2, [pc, #72]	@ (80059ac <reg_dhcp_cbfunc+0x64>)
 8005964:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d002      	beq.n	8005972 <reg_dhcp_cbfunc+0x2a>
 800596c:	4a0a      	ldr	r2, [pc, #40]	@ (8005998 <reg_dhcp_cbfunc+0x50>)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <reg_dhcp_cbfunc+0x36>
 8005978:	4a09      	ldr	r2, [pc, #36]	@ (80059a0 <reg_dhcp_cbfunc+0x58>)
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <reg_dhcp_cbfunc+0x42>
 8005984:	4a08      	ldr	r2, [pc, #32]	@ (80059a8 <reg_dhcp_cbfunc+0x60>)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6013      	str	r3, [r2, #0]
}
 800598a:	bf00      	nop
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	20000068 	.word	0x20000068
 800599c:	080057e1 	.word	0x080057e1
 80059a0:	2000006c 	.word	0x2000006c
 80059a4:	08005885 	.word	0x08005885
 80059a8:	20000070 	.word	0x20000070
 80059ac:	080058e9 	.word	0x080058e9

080059b0 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 80059b6:	2008      	movs	r0, #8
 80059b8:	f7fd fe72 	bl	80036a0 <WIZCHIP_READ>
 80059bc:	4603      	mov	r3, r0
 80059be:	0a1b      	lsrs	r3, r3, #8
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	703b      	strb	r3, [r7, #0]
 80059c6:	2008      	movs	r0, #8
 80059c8:	f7fd fe6a 	bl	80036a0 <WIZCHIP_READ>
 80059cc:	4603      	mov	r3, r0
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	707b      	strb	r3, [r7, #1]
 80059d2:	200a      	movs	r0, #10
 80059d4:	f7fd fe64 	bl	80036a0 <WIZCHIP_READ>
 80059d8:	4603      	mov	r3, r0
 80059da:	0a1b      	lsrs	r3, r3, #8
 80059dc:	b29b      	uxth	r3, r3
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	70bb      	strb	r3, [r7, #2]
 80059e2:	200a      	movs	r0, #10
 80059e4:	f7fd fe5c 	bl	80036a0 <WIZCHIP_READ>
 80059e8:	4603      	mov	r3, r0
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	70fb      	strb	r3, [r7, #3]
 80059ee:	200c      	movs	r0, #12
 80059f0:	f7fd fe56 	bl	80036a0 <WIZCHIP_READ>
 80059f4:	4603      	mov	r3, r0
 80059f6:	0a1b      	lsrs	r3, r3, #8
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	713b      	strb	r3, [r7, #4]
 80059fe:	200c      	movs	r0, #12
 8005a00:	f7fd fe4e 	bl	80036a0 <WIZCHIP_READ>
 8005a04:	4603      	mov	r3, r0
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	717b      	strb	r3, [r7, #5]
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8005a0a:	4b72      	ldr	r3, [pc, #456]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8005a12:	4b70      	ldr	r3, [pc, #448]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2201      	movs	r2, #1
 8005a18:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8005a1a:	4b6e      	ldr	r3, [pc, #440]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2206      	movs	r2, #6
 8005a20:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8005a22:	4b6c      	ldr	r3, [pc, #432]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2200      	movs	r2, #0
 8005a28:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8005a2a:	4b6a      	ldr	r3, [pc, #424]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3304      	adds	r3, #4
 8005a30:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8005a32:	4b69      	ldr	r3, [pc, #420]	@ (8005bd8 <makeDHCPMSG+0x228>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	0e1b      	lsrs	r3, r3, #24
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8005a3e:	4b66      	ldr	r3, [pc, #408]	@ (8005bd8 <makeDHCPMSG+0x228>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	0c1a      	lsrs	r2, r3, #16
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	3301      	adds	r3, #1
 8005a48:	b2d2      	uxtb	r2, r2
 8005a4a:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8005a4c:	4b62      	ldr	r3, [pc, #392]	@ (8005bd8 <makeDHCPMSG+0x228>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	0a1a      	lsrs	r2, r3, #8
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	3302      	adds	r3, #2
 8005a56:	b2d2      	uxtb	r2, r2
 8005a58:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 8005a5a:	4b5f      	ldr	r3, [pc, #380]	@ (8005bd8 <makeDHCPMSG+0x228>)
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	3303      	adds	r3, #3
 8005a62:	b2d2      	uxtb	r2, r2
 8005a64:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 8005a66:	4b5b      	ldr	r3, [pc, #364]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8005a6e:	4b59      	ldr	r3, [pc, #356]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	330a      	adds	r3, #10
 8005a74:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	2280      	movs	r2, #128	@ 0x80
 8005a7a:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	2200      	movs	r2, #0
 8005a82:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 8005a84:	4b53      	ldr	r3, [pc, #332]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 8005a8c:	4b51      	ldr	r3, [pc, #324]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2200      	movs	r2, #0
 8005a92:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 8005a94:	4b4f      	ldr	r3, [pc, #316]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 8005a9c:	4b4d      	ldr	r3, [pc, #308]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 8005aa4:	4b4b      	ldr	r3, [pc, #300]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 8005aac:	4b49      	ldr	r3, [pc, #292]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8005ab4:	4b47      	ldr	r3, [pc, #284]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 8005abc:	4b45      	ldr	r3, [pc, #276]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 8005ac4:	4b43      	ldr	r3, [pc, #268]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 8005acc:	4b41      	ldr	r3, [pc, #260]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 8005ad4:	4b3f      	ldr	r3, [pc, #252]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 8005adc:	4b3d      	ldr	r3, [pc, #244]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8005ae4:	4b3b      	ldr	r3, [pc, #236]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 8005aec:	4b39      	ldr	r3, [pc, #228]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2200      	movs	r2, #0
 8005af2:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 8005af4:	4b37      	ldr	r3, [pc, #220]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2200      	movs	r2, #0
 8005afa:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 8005afc:	4b35      	ldr	r3, [pc, #212]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2200      	movs	r2, #0
 8005b02:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8005b04:	4b33      	ldr	r3, [pc, #204]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a34      	ldr	r2, [pc, #208]	@ (8005bdc <makeDHCPMSG+0x22c>)
 8005b0a:	7812      	ldrb	r2, [r2, #0]
 8005b0c:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8005b0e:	4b31      	ldr	r3, [pc, #196]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a32      	ldr	r2, [pc, #200]	@ (8005bdc <makeDHCPMSG+0x22c>)
 8005b14:	7852      	ldrb	r2, [r2, #1]
 8005b16:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8005b18:	4b2e      	ldr	r3, [pc, #184]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a2f      	ldr	r2, [pc, #188]	@ (8005bdc <makeDHCPMSG+0x22c>)
 8005b1e:	7892      	ldrb	r2, [r2, #2]
 8005b20:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8005b22:	4b2c      	ldr	r3, [pc, #176]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a2d      	ldr	r2, [pc, #180]	@ (8005bdc <makeDHCPMSG+0x22c>)
 8005b28:	78d2      	ldrb	r2, [r2, #3]
 8005b2a:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 8005b2c:	4b29      	ldr	r3, [pc, #164]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a2a      	ldr	r2, [pc, #168]	@ (8005bdc <makeDHCPMSG+0x22c>)
 8005b32:	7912      	ldrb	r2, [r2, #4]
 8005b34:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 8005b38:	4b26      	ldr	r3, [pc, #152]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a27      	ldr	r2, [pc, #156]	@ (8005bdc <makeDHCPMSG+0x22c>)
 8005b3e:	7952      	ldrb	r2, [r2, #5]
 8005b40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8005b44:	2306      	movs	r3, #6
 8005b46:	73fb      	strb	r3, [r7, #15]
 8005b48:	e008      	b.n	8005b5c <makeDHCPMSG+0x1ac>
 8005b4a:	4b22      	ldr	r3, [pc, #136]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	7bfb      	ldrb	r3, [r7, #15]
 8005b50:	4413      	add	r3, r2
 8005b52:	2200      	movs	r2, #0
 8005b54:	771a      	strb	r2, [r3, #28]
 8005b56:	7bfb      	ldrb	r3, [r7, #15]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	73fb      	strb	r3, [r7, #15]
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
 8005b5e:	2b0f      	cmp	r3, #15
 8005b60:	d9f3      	bls.n	8005b4a <makeDHCPMSG+0x19a>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8005b62:	2300      	movs	r3, #0
 8005b64:	73fb      	strb	r3, [r7, #15]
 8005b66:	e009      	b.n	8005b7c <makeDHCPMSG+0x1cc>
 8005b68:	4b1a      	ldr	r3, [pc, #104]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
 8005b6e:	4413      	add	r3, r2
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8005b76:	7bfb      	ldrb	r3, [r7, #15]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	73fb      	strb	r3, [r7, #15]
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
 8005b7e:	2b3f      	cmp	r3, #63	@ 0x3f
 8005b80:	d9f2      	bls.n	8005b68 <makeDHCPMSG+0x1b8>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8005b82:	2300      	movs	r3, #0
 8005b84:	73fb      	strb	r3, [r7, #15]
 8005b86:	e009      	b.n	8005b9c <makeDHCPMSG+0x1ec>
 8005b88:	4b12      	ldr	r3, [pc, #72]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
 8005b8e:	4413      	add	r3, r2
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 8005b96:	7bfb      	ldrb	r3, [r7, #15]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	73fb      	strb	r3, [r7, #15]
 8005b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	daf1      	bge.n	8005b88 <makeDHCPMSG+0x1d8>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8005ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2263      	movs	r2, #99	@ 0x63
 8005baa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8005bae:	4b09      	ldr	r3, [pc, #36]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2282      	movs	r2, #130	@ 0x82
 8005bb4:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 8005bb8:	4b06      	ldr	r3, [pc, #24]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2253      	movs	r2, #83	@ 0x53
 8005bbe:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8005bc2:	4b04      	ldr	r3, [pc, #16]	@ (8005bd4 <makeDHCPMSG+0x224>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2263      	movs	r2, #99	@ 0x63
 8005bc8:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
}
 8005bcc:	bf00      	nop
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	20001230 	.word	0x20001230
 8005bd8:	2000122c 	.word	0x2000122c
 8005bdc:	20001234 	.word	0x20001234

08005be0 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8005be0:	b5b0      	push	{r4, r5, r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 8005be6:	2300      	movs	r3, #0
 8005be8:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 8005bea:	f7ff fee1 	bl	80059b0 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 8005bee:	4b56      	ldr	r3, [pc, #344]	@ (8005d48 <send_DHCP_DISCOVER+0x168>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 8005bf4:	4b54      	ldr	r3, [pc, #336]	@ (8005d48 <send_DHCP_DISCOVER+0x168>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 8005bfa:	4b53      	ldr	r3, [pc, #332]	@ (8005d48 <send_DHCP_DISCOVER+0x168>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 8005c00:	4b51      	ldr	r3, [pc, #324]	@ (8005d48 <send_DHCP_DISCOVER+0x168>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 8005c06:	4b51      	ldr	r3, [pc, #324]	@ (8005d4c <send_DHCP_DISCOVER+0x16c>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 8005c0c:	4b4f      	ldr	r3, [pc, #316]	@ (8005d4c <send_DHCP_DISCOVER+0x16c>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 8005c12:	4b4e      	ldr	r3, [pc, #312]	@ (8005d4c <send_DHCP_DISCOVER+0x16c>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 8005c18:	4b4c      	ldr	r3, [pc, #304]	@ (8005d4c <send_DHCP_DISCOVER+0x16c>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 8005c1e:	2304      	movs	r3, #4
 8005c20:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8005c22:	4b4b      	ldr	r3, [pc, #300]	@ (8005d50 <send_DHCP_DISCOVER+0x170>)
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	88bb      	ldrh	r3, [r7, #4]
 8005c28:	1c59      	adds	r1, r3, #1
 8005c2a:	80b9      	strh	r1, [r7, #4]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	2235      	movs	r2, #53	@ 0x35
 8005c30:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8005c34:	4b46      	ldr	r3, [pc, #280]	@ (8005d50 <send_DHCP_DISCOVER+0x170>)
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	88bb      	ldrh	r3, [r7, #4]
 8005c3a:	1c59      	adds	r1, r3, #1
 8005c3c:	80b9      	strh	r1, [r7, #4]
 8005c3e:	4413      	add	r3, r2
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 8005c46:	4b42      	ldr	r3, [pc, #264]	@ (8005d50 <send_DHCP_DISCOVER+0x170>)
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	88bb      	ldrh	r3, [r7, #4]
 8005c4c:	1c59      	adds	r1, r3, #1
 8005c4e:	80b9      	strh	r1, [r7, #4]
 8005c50:	4413      	add	r3, r2
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8005c58:	4b3d      	ldr	r3, [pc, #244]	@ (8005d50 <send_DHCP_DISCOVER+0x170>)
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	88bb      	ldrh	r3, [r7, #4]
 8005c5e:	1c59      	adds	r1, r3, #1
 8005c60:	80b9      	strh	r1, [r7, #4]
 8005c62:	4413      	add	r3, r2
 8005c64:	223d      	movs	r2, #61	@ 0x3d
 8005c66:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8005c6a:	4b39      	ldr	r3, [pc, #228]	@ (8005d50 <send_DHCP_DISCOVER+0x170>)
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	88bb      	ldrh	r3, [r7, #4]
 8005c70:	1c59      	adds	r1, r3, #1
 8005c72:	80b9      	strh	r1, [r7, #4]
 8005c74:	4413      	add	r3, r2
 8005c76:	2207      	movs	r2, #7
 8005c78:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8005c7c:	4b34      	ldr	r3, [pc, #208]	@ (8005d50 <send_DHCP_DISCOVER+0x170>)
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	88bb      	ldrh	r3, [r7, #4]
 8005c82:	1c59      	adds	r1, r3, #1
 8005c84:	80b9      	strh	r1, [r7, #4]
 8005c86:	4413      	add	r3, r2
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8005c8e:	4b30      	ldr	r3, [pc, #192]	@ (8005d50 <send_DHCP_DISCOVER+0x170>)
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	88bb      	ldrh	r3, [r7, #4]
 8005c94:	1c59      	adds	r1, r3, #1
 8005c96:	80b9      	strh	r1, [r7, #4]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	4b2e      	ldr	r3, [pc, #184]	@ (8005d54 <send_DHCP_DISCOVER+0x174>)
 8005c9c:	7819      	ldrb	r1, [r3, #0]
 8005c9e:	1813      	adds	r3, r2, r0
 8005ca0:	460a      	mov	r2, r1
 8005ca2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8005ca6:	4b2a      	ldr	r3, [pc, #168]	@ (8005d50 <send_DHCP_DISCOVER+0x170>)
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	88bb      	ldrh	r3, [r7, #4]
 8005cac:	1c59      	adds	r1, r3, #1
 8005cae:	80b9      	strh	r1, [r7, #4]
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	4b28      	ldr	r3, [pc, #160]	@ (8005d54 <send_DHCP_DISCOVER+0x174>)
 8005cb4:	7859      	ldrb	r1, [r3, #1]
 8005cb6:	1813      	adds	r3, r2, r0
 8005cb8:	460a      	mov	r2, r1
 8005cba:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8005cbe:	4b24      	ldr	r3, [pc, #144]	@ (8005d50 <send_DHCP_DISCOVER+0x170>)
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	88bb      	ldrh	r3, [r7, #4]
 8005cc4:	1c59      	adds	r1, r3, #1
 8005cc6:	80b9      	strh	r1, [r7, #4]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	4b22      	ldr	r3, [pc, #136]	@ (8005d54 <send_DHCP_DISCOVER+0x174>)
 8005ccc:	7899      	ldrb	r1, [r3, #2]
 8005cce:	1813      	adds	r3, r2, r0
 8005cd0:	460a      	mov	r2, r1
 8005cd2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8005cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8005d50 <send_DHCP_DISCOVER+0x170>)
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	88bb      	ldrh	r3, [r7, #4]
 8005cdc:	1c59      	adds	r1, r3, #1
 8005cde:	80b9      	strh	r1, [r7, #4]
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8005d54 <send_DHCP_DISCOVER+0x174>)
 8005ce4:	78d9      	ldrb	r1, [r3, #3]
 8005ce6:	1813      	adds	r3, r2, r0
 8005ce8:	460a      	mov	r2, r1
 8005cea:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8005cee:	4b18      	ldr	r3, [pc, #96]	@ (8005d50 <send_DHCP_DISCOVER+0x170>)
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	88bb      	ldrh	r3, [r7, #4]
 8005cf4:	1c59      	adds	r1, r3, #1
 8005cf6:	80b9      	strh	r1, [r7, #4]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	4b16      	ldr	r3, [pc, #88]	@ (8005d54 <send_DHCP_DISCOVER+0x174>)
 8005cfc:	7919      	ldrb	r1, [r3, #4]
 8005cfe:	1813      	adds	r3, r2, r0
 8005d00:	460a      	mov	r2, r1
 8005d02:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8005d06:	4b12      	ldr	r3, [pc, #72]	@ (8005d50 <send_DHCP_DISCOVER+0x170>)
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	88bb      	ldrh	r3, [r7, #4]
 8005d0c:	1c59      	adds	r1, r3, #1
 8005d0e:	80b9      	strh	r1, [r7, #4]
 8005d10:	4618      	mov	r0, r3
 8005d12:	4b10      	ldr	r3, [pc, #64]	@ (8005d54 <send_DHCP_DISCOVER+0x174>)
 8005d14:	7959      	ldrb	r1, [r3, #5]
 8005d16:	1813      	adds	r3, r2, r0
 8005d18:	460a      	mov	r2, r1
 8005d1a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8005d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8005d50 <send_DHCP_DISCOVER+0x170>)
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	88bb      	ldrh	r3, [r7, #4]
 8005d24:	1c59      	adds	r1, r3, #1
 8005d26:	80b9      	strh	r1, [r7, #4]
 8005d28:	4413      	add	r3, r2
 8005d2a:	220c      	movs	r2, #12
 8005d2c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8005d30:	4b07      	ldr	r3, [pc, #28]	@ (8005d50 <send_DHCP_DISCOVER+0x170>)
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	88bb      	ldrh	r3, [r7, #4]
 8005d36:	1c59      	adds	r1, r3, #1
 8005d38:	80b9      	strh	r1, [r7, #4]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8005d42:	2300      	movs	r3, #0
 8005d44:	80fb      	strh	r3, [r7, #6]
 8005d46:	e017      	b.n	8005d78 <send_DHCP_DISCOVER+0x198>
 8005d48:	20001208 	.word	0x20001208
 8005d4c:	2000120c 	.word	0x2000120c
 8005d50:	20001230 	.word	0x20001230
 8005d54:	20001234 	.word	0x20001234
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8005d58:	88f9      	ldrh	r1, [r7, #6]
 8005d5a:	4b80      	ldr	r3, [pc, #512]	@ (8005f5c <send_DHCP_DISCOVER+0x37c>)
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	88bb      	ldrh	r3, [r7, #4]
 8005d60:	1c58      	adds	r0, r3, #1
 8005d62:	80b8      	strh	r0, [r7, #4]
 8005d64:	4618      	mov	r0, r3
 8005d66:	4b7e      	ldr	r3, [pc, #504]	@ (8005f60 <send_DHCP_DISCOVER+0x380>)
 8005d68:	5c59      	ldrb	r1, [r3, r1]
 8005d6a:	1813      	adds	r3, r2, r0
 8005d6c:	460a      	mov	r2, r1
 8005d6e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8005d72:	88fb      	ldrh	r3, [r7, #6]
 8005d74:	3301      	adds	r3, #1
 8005d76:	80fb      	strh	r3, [r7, #6]
 8005d78:	88fb      	ldrh	r3, [r7, #6]
 8005d7a:	4a79      	ldr	r2, [pc, #484]	@ (8005f60 <send_DHCP_DISCOVER+0x380>)
 8005d7c:	5cd3      	ldrb	r3, [r2, r3]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1ea      	bne.n	8005d58 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8005d82:	4b78      	ldr	r3, [pc, #480]	@ (8005f64 <send_DHCP_DISCOVER+0x384>)
 8005d84:	78db      	ldrb	r3, [r3, #3]
 8005d86:	091b      	lsrs	r3, r3, #4
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	4b74      	ldr	r3, [pc, #464]	@ (8005f5c <send_DHCP_DISCOVER+0x37c>)
 8005d8c:	681c      	ldr	r4, [r3, #0]
 8005d8e:	88bb      	ldrh	r3, [r7, #4]
 8005d90:	1c59      	adds	r1, r3, #1
 8005d92:	80b9      	strh	r1, [r7, #4]
 8005d94:	461d      	mov	r5, r3
 8005d96:	4610      	mov	r0, r2
 8005d98:	f001 fa4a 	bl	8007230 <NibbleToHex>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	461a      	mov	r2, r3
 8005da0:	1963      	adds	r3, r4, r5
 8005da2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8005da6:	4b6f      	ldr	r3, [pc, #444]	@ (8005f64 <send_DHCP_DISCOVER+0x384>)
 8005da8:	78da      	ldrb	r2, [r3, #3]
 8005daa:	4b6c      	ldr	r3, [pc, #432]	@ (8005f5c <send_DHCP_DISCOVER+0x37c>)
 8005dac:	681c      	ldr	r4, [r3, #0]
 8005dae:	88bb      	ldrh	r3, [r7, #4]
 8005db0:	1c59      	adds	r1, r3, #1
 8005db2:	80b9      	strh	r1, [r7, #4]
 8005db4:	461d      	mov	r5, r3
 8005db6:	4610      	mov	r0, r2
 8005db8:	f001 fa3a 	bl	8007230 <NibbleToHex>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	1963      	adds	r3, r4, r5
 8005dc2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8005dc6:	4b67      	ldr	r3, [pc, #412]	@ (8005f64 <send_DHCP_DISCOVER+0x384>)
 8005dc8:	791b      	ldrb	r3, [r3, #4]
 8005dca:	091b      	lsrs	r3, r3, #4
 8005dcc:	b2da      	uxtb	r2, r3
 8005dce:	4b63      	ldr	r3, [pc, #396]	@ (8005f5c <send_DHCP_DISCOVER+0x37c>)
 8005dd0:	681c      	ldr	r4, [r3, #0]
 8005dd2:	88bb      	ldrh	r3, [r7, #4]
 8005dd4:	1c59      	adds	r1, r3, #1
 8005dd6:	80b9      	strh	r1, [r7, #4]
 8005dd8:	461d      	mov	r5, r3
 8005dda:	4610      	mov	r0, r2
 8005ddc:	f001 fa28 	bl	8007230 <NibbleToHex>
 8005de0:	4603      	mov	r3, r0
 8005de2:	461a      	mov	r2, r3
 8005de4:	1963      	adds	r3, r4, r5
 8005de6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8005dea:	4b5e      	ldr	r3, [pc, #376]	@ (8005f64 <send_DHCP_DISCOVER+0x384>)
 8005dec:	791a      	ldrb	r2, [r3, #4]
 8005dee:	4b5b      	ldr	r3, [pc, #364]	@ (8005f5c <send_DHCP_DISCOVER+0x37c>)
 8005df0:	681c      	ldr	r4, [r3, #0]
 8005df2:	88bb      	ldrh	r3, [r7, #4]
 8005df4:	1c59      	adds	r1, r3, #1
 8005df6:	80b9      	strh	r1, [r7, #4]
 8005df8:	461d      	mov	r5, r3
 8005dfa:	4610      	mov	r0, r2
 8005dfc:	f001 fa18 	bl	8007230 <NibbleToHex>
 8005e00:	4603      	mov	r3, r0
 8005e02:	461a      	mov	r2, r3
 8005e04:	1963      	adds	r3, r4, r5
 8005e06:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8005e0a:	4b56      	ldr	r3, [pc, #344]	@ (8005f64 <send_DHCP_DISCOVER+0x384>)
 8005e0c:	795b      	ldrb	r3, [r3, #5]
 8005e0e:	091b      	lsrs	r3, r3, #4
 8005e10:	b2da      	uxtb	r2, r3
 8005e12:	4b52      	ldr	r3, [pc, #328]	@ (8005f5c <send_DHCP_DISCOVER+0x37c>)
 8005e14:	681c      	ldr	r4, [r3, #0]
 8005e16:	88bb      	ldrh	r3, [r7, #4]
 8005e18:	1c59      	adds	r1, r3, #1
 8005e1a:	80b9      	strh	r1, [r7, #4]
 8005e1c:	461d      	mov	r5, r3
 8005e1e:	4610      	mov	r0, r2
 8005e20:	f001 fa06 	bl	8007230 <NibbleToHex>
 8005e24:	4603      	mov	r3, r0
 8005e26:	461a      	mov	r2, r3
 8005e28:	1963      	adds	r3, r4, r5
 8005e2a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8005e2e:	4b4d      	ldr	r3, [pc, #308]	@ (8005f64 <send_DHCP_DISCOVER+0x384>)
 8005e30:	795a      	ldrb	r2, [r3, #5]
 8005e32:	4b4a      	ldr	r3, [pc, #296]	@ (8005f5c <send_DHCP_DISCOVER+0x37c>)
 8005e34:	681c      	ldr	r4, [r3, #0]
 8005e36:	88bb      	ldrh	r3, [r7, #4]
 8005e38:	1c59      	adds	r1, r3, #1
 8005e3a:	80b9      	strh	r1, [r7, #4]
 8005e3c:	461d      	mov	r5, r3
 8005e3e:	4610      	mov	r0, r2
 8005e40:	f001 f9f6 	bl	8007230 <NibbleToHex>
 8005e44:	4603      	mov	r3, r0
 8005e46:	461a      	mov	r2, r3
 8005e48:	1963      	adds	r3, r4, r5
 8005e4a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8005e4e:	88fb      	ldrh	r3, [r7, #6]
 8005e50:	b2d9      	uxtb	r1, r3
 8005e52:	4b42      	ldr	r3, [pc, #264]	@ (8005f5c <send_DHCP_DISCOVER+0x37c>)
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	88b8      	ldrh	r0, [r7, #4]
 8005e58:	88fb      	ldrh	r3, [r7, #6]
 8005e5a:	3307      	adds	r3, #7
 8005e5c:	1ac3      	subs	r3, r0, r3
 8005e5e:	3106      	adds	r1, #6
 8005e60:	b2c9      	uxtb	r1, r1
 8005e62:	4413      	add	r3, r2
 8005e64:	460a      	mov	r2, r1
 8005e66:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8005e6a:	4b3c      	ldr	r3, [pc, #240]	@ (8005f5c <send_DHCP_DISCOVER+0x37c>)
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	88bb      	ldrh	r3, [r7, #4]
 8005e70:	1c59      	adds	r1, r3, #1
 8005e72:	80b9      	strh	r1, [r7, #4]
 8005e74:	4413      	add	r3, r2
 8005e76:	2237      	movs	r2, #55	@ 0x37
 8005e78:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8005e7c:	4b37      	ldr	r3, [pc, #220]	@ (8005f5c <send_DHCP_DISCOVER+0x37c>)
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	88bb      	ldrh	r3, [r7, #4]
 8005e82:	1c59      	adds	r1, r3, #1
 8005e84:	80b9      	strh	r1, [r7, #4]
 8005e86:	4413      	add	r3, r2
 8005e88:	2206      	movs	r2, #6
 8005e8a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8005e8e:	4b33      	ldr	r3, [pc, #204]	@ (8005f5c <send_DHCP_DISCOVER+0x37c>)
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	88bb      	ldrh	r3, [r7, #4]
 8005e94:	1c59      	adds	r1, r3, #1
 8005e96:	80b9      	strh	r1, [r7, #4]
 8005e98:	4413      	add	r3, r2
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8005ea0:	4b2e      	ldr	r3, [pc, #184]	@ (8005f5c <send_DHCP_DISCOVER+0x37c>)
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	88bb      	ldrh	r3, [r7, #4]
 8005ea6:	1c59      	adds	r1, r3, #1
 8005ea8:	80b9      	strh	r1, [r7, #4]
 8005eaa:	4413      	add	r3, r2
 8005eac:	2203      	movs	r2, #3
 8005eae:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8005eb2:	4b2a      	ldr	r3, [pc, #168]	@ (8005f5c <send_DHCP_DISCOVER+0x37c>)
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	88bb      	ldrh	r3, [r7, #4]
 8005eb8:	1c59      	adds	r1, r3, #1
 8005eba:	80b9      	strh	r1, [r7, #4]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	2206      	movs	r2, #6
 8005ec0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8005ec4:	4b25      	ldr	r3, [pc, #148]	@ (8005f5c <send_DHCP_DISCOVER+0x37c>)
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	88bb      	ldrh	r3, [r7, #4]
 8005eca:	1c59      	adds	r1, r3, #1
 8005ecc:	80b9      	strh	r1, [r7, #4]
 8005ece:	4413      	add	r3, r2
 8005ed0:	220f      	movs	r2, #15
 8005ed2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8005ed6:	4b21      	ldr	r3, [pc, #132]	@ (8005f5c <send_DHCP_DISCOVER+0x37c>)
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	88bb      	ldrh	r3, [r7, #4]
 8005edc:	1c59      	adds	r1, r3, #1
 8005ede:	80b9      	strh	r1, [r7, #4]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	223a      	movs	r2, #58	@ 0x3a
 8005ee4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8005ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8005f5c <send_DHCP_DISCOVER+0x37c>)
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	88bb      	ldrh	r3, [r7, #4]
 8005eee:	1c59      	adds	r1, r3, #1
 8005ef0:	80b9      	strh	r1, [r7, #4]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	223b      	movs	r2, #59	@ 0x3b
 8005ef6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8005efa:	4b18      	ldr	r3, [pc, #96]	@ (8005f5c <send_DHCP_DISCOVER+0x37c>)
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	88bb      	ldrh	r3, [r7, #4]
 8005f00:	1c59      	adds	r1, r3, #1
 8005f02:	80b9      	strh	r1, [r7, #4]
 8005f04:	4413      	add	r3, r2
 8005f06:	22ff      	movs	r2, #255	@ 0xff
 8005f08:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8005f0c:	88bb      	ldrh	r3, [r7, #4]
 8005f0e:	80fb      	strh	r3, [r7, #6]
 8005f10:	e009      	b.n	8005f26 <send_DHCP_DISCOVER+0x346>
 8005f12:	4b12      	ldr	r3, [pc, #72]	@ (8005f5c <send_DHCP_DISCOVER+0x37c>)
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	88fb      	ldrh	r3, [r7, #6]
 8005f18:	4413      	add	r3, r2
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8005f20:	88fb      	ldrh	r3, [r7, #6]
 8005f22:	3301      	adds	r3, #1
 8005f24:	80fb      	strh	r3, [r7, #6]
 8005f26:	88fb      	ldrh	r3, [r7, #6]
 8005f28:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8005f2c:	d3f1      	bcc.n	8005f12 <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 8005f2e:	23ff      	movs	r3, #255	@ 0xff
 8005f30:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 8005f32:	23ff      	movs	r3, #255	@ 0xff
 8005f34:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 8005f36:	23ff      	movs	r3, #255	@ 0xff
 8005f38:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 8005f3a:	23ff      	movs	r3, #255	@ 0xff
 8005f3c:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8005f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8005f68 <send_DHCP_DISCOVER+0x388>)
 8005f40:	7818      	ldrb	r0, [r3, #0]
 8005f42:	4b06      	ldr	r3, [pc, #24]	@ (8005f5c <send_DHCP_DISCOVER+0x37c>)
 8005f44:	6819      	ldr	r1, [r3, #0]
 8005f46:	463b      	mov	r3, r7
 8005f48:	2243      	movs	r2, #67	@ 0x43
 8005f4a:	9200      	str	r2, [sp, #0]
 8005f4c:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8005f50:	f7fe faf8 	bl	8004544 <sendto>
}
 8005f54:	bf00      	nop
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bdb0      	pop	{r4, r5, r7, pc}
 8005f5c:	20001230 	.word	0x20001230
 8005f60:	20000060 	.word	0x20000060
 8005f64:	20001234 	.word	0x20001234
 8005f68:	20001205 	.word	0x20001205

08005f6c <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 8005f6c:	b5b0      	push	{r4, r5, r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8005f72:	2300      	movs	r3, #0
 8005f74:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 8005f76:	f7ff fd1b 	bl	80059b0 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 8005f7a:	4b1b      	ldr	r3, [pc, #108]	@ (8005fe8 <send_DHCP_REQUEST+0x7c>)
 8005f7c:	f993 3000 	ldrsb.w	r3, [r3]
 8005f80:	2b03      	cmp	r3, #3
 8005f82:	d004      	beq.n	8005f8e <send_DHCP_REQUEST+0x22>
 8005f84:	4b18      	ldr	r3, [pc, #96]	@ (8005fe8 <send_DHCP_REQUEST+0x7c>)
 8005f86:	f993 3000 	ldrsb.w	r3, [r3]
 8005f8a:	2b04      	cmp	r3, #4
 8005f8c:	d134      	bne.n	8005ff8 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8005f8e:	4b17      	ldr	r3, [pc, #92]	@ (8005fec <send_DHCP_REQUEST+0x80>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	330a      	adds	r3, #10
 8005f94:	2200      	movs	r2, #0
 8005f96:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8005f98:	4b14      	ldr	r3, [pc, #80]	@ (8005fec <send_DHCP_REQUEST+0x80>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	330a      	adds	r3, #10
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8005fa4:	4b11      	ldr	r3, [pc, #68]	@ (8005fec <send_DHCP_REQUEST+0x80>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a11      	ldr	r2, [pc, #68]	@ (8005ff0 <send_DHCP_REQUEST+0x84>)
 8005faa:	7812      	ldrb	r2, [r2, #0]
 8005fac:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 8005fae:	4b0f      	ldr	r3, [pc, #60]	@ (8005fec <send_DHCP_REQUEST+0x80>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a0f      	ldr	r2, [pc, #60]	@ (8005ff0 <send_DHCP_REQUEST+0x84>)
 8005fb4:	7852      	ldrb	r2, [r2, #1]
 8005fb6:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 8005fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8005fec <send_DHCP_REQUEST+0x80>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a0c      	ldr	r2, [pc, #48]	@ (8005ff0 <send_DHCP_REQUEST+0x84>)
 8005fbe:	7892      	ldrb	r2, [r2, #2]
 8005fc0:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 8005fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8005fec <send_DHCP_REQUEST+0x80>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8005ff0 <send_DHCP_REQUEST+0x84>)
 8005fc8:	78d2      	ldrb	r2, [r2, #3]
 8005fca:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 8005fcc:	4b09      	ldr	r3, [pc, #36]	@ (8005ff4 <send_DHCP_REQUEST+0x88>)
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 8005fd2:	4b08      	ldr	r3, [pc, #32]	@ (8005ff4 <send_DHCP_REQUEST+0x88>)
 8005fd4:	785b      	ldrb	r3, [r3, #1]
 8005fd6:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 8005fd8:	4b06      	ldr	r3, [pc, #24]	@ (8005ff4 <send_DHCP_REQUEST+0x88>)
 8005fda:	789b      	ldrb	r3, [r3, #2]
 8005fdc:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 8005fde:	4b05      	ldr	r3, [pc, #20]	@ (8005ff4 <send_DHCP_REQUEST+0x88>)
 8005fe0:	78db      	ldrb	r3, [r3, #3]
 8005fe2:	71fb      	strb	r3, [r7, #7]
 8005fe4:	e010      	b.n	8006008 <send_DHCP_REQUEST+0x9c>
 8005fe6:	bf00      	nop
 8005fe8:	20001224 	.word	0x20001224
 8005fec:	20001230 	.word	0x20001230
 8005ff0:	20001214 	.word	0x20001214
 8005ff4:	20001208 	.word	0x20001208
   }
   else
   {
   	ip[0] = 255;
 8005ff8:	23ff      	movs	r3, #255	@ 0xff
 8005ffa:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 8005ffc:	23ff      	movs	r3, #255	@ 0xff
 8005ffe:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 8006000:	23ff      	movs	r3, #255	@ 0xff
 8006002:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 8006004:	23ff      	movs	r3, #255	@ 0xff
 8006006:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8006008:	2304      	movs	r3, #4
 800600a:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 800600c:	4b8d      	ldr	r3, [pc, #564]	@ (8006244 <send_DHCP_REQUEST+0x2d8>)
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	897b      	ldrh	r3, [r7, #10]
 8006012:	1c59      	adds	r1, r3, #1
 8006014:	8179      	strh	r1, [r7, #10]
 8006016:	4413      	add	r3, r2
 8006018:	2235      	movs	r2, #53	@ 0x35
 800601a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800601e:	4b89      	ldr	r3, [pc, #548]	@ (8006244 <send_DHCP_REQUEST+0x2d8>)
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	897b      	ldrh	r3, [r7, #10]
 8006024:	1c59      	adds	r1, r3, #1
 8006026:	8179      	strh	r1, [r7, #10]
 8006028:	4413      	add	r3, r2
 800602a:	2201      	movs	r2, #1
 800602c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 8006030:	4b84      	ldr	r3, [pc, #528]	@ (8006244 <send_DHCP_REQUEST+0x2d8>)
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	897b      	ldrh	r3, [r7, #10]
 8006036:	1c59      	adds	r1, r3, #1
 8006038:	8179      	strh	r1, [r7, #10]
 800603a:	4413      	add	r3, r2
 800603c:	2203      	movs	r2, #3
 800603e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8006042:	4b80      	ldr	r3, [pc, #512]	@ (8006244 <send_DHCP_REQUEST+0x2d8>)
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	897b      	ldrh	r3, [r7, #10]
 8006048:	1c59      	adds	r1, r3, #1
 800604a:	8179      	strh	r1, [r7, #10]
 800604c:	4413      	add	r3, r2
 800604e:	223d      	movs	r2, #61	@ 0x3d
 8006050:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8006054:	4b7b      	ldr	r3, [pc, #492]	@ (8006244 <send_DHCP_REQUEST+0x2d8>)
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	897b      	ldrh	r3, [r7, #10]
 800605a:	1c59      	adds	r1, r3, #1
 800605c:	8179      	strh	r1, [r7, #10]
 800605e:	4413      	add	r3, r2
 8006060:	2207      	movs	r2, #7
 8006062:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8006066:	4b77      	ldr	r3, [pc, #476]	@ (8006244 <send_DHCP_REQUEST+0x2d8>)
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	897b      	ldrh	r3, [r7, #10]
 800606c:	1c59      	adds	r1, r3, #1
 800606e:	8179      	strh	r1, [r7, #10]
 8006070:	4413      	add	r3, r2
 8006072:	2201      	movs	r2, #1
 8006074:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8006078:	4b72      	ldr	r3, [pc, #456]	@ (8006244 <send_DHCP_REQUEST+0x2d8>)
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	897b      	ldrh	r3, [r7, #10]
 800607e:	1c59      	adds	r1, r3, #1
 8006080:	8179      	strh	r1, [r7, #10]
 8006082:	4618      	mov	r0, r3
 8006084:	4b70      	ldr	r3, [pc, #448]	@ (8006248 <send_DHCP_REQUEST+0x2dc>)
 8006086:	7819      	ldrb	r1, [r3, #0]
 8006088:	1813      	adds	r3, r2, r0
 800608a:	460a      	mov	r2, r1
 800608c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8006090:	4b6c      	ldr	r3, [pc, #432]	@ (8006244 <send_DHCP_REQUEST+0x2d8>)
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	897b      	ldrh	r3, [r7, #10]
 8006096:	1c59      	adds	r1, r3, #1
 8006098:	8179      	strh	r1, [r7, #10]
 800609a:	4618      	mov	r0, r3
 800609c:	4b6a      	ldr	r3, [pc, #424]	@ (8006248 <send_DHCP_REQUEST+0x2dc>)
 800609e:	7859      	ldrb	r1, [r3, #1]
 80060a0:	1813      	adds	r3, r2, r0
 80060a2:	460a      	mov	r2, r1
 80060a4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80060a8:	4b66      	ldr	r3, [pc, #408]	@ (8006244 <send_DHCP_REQUEST+0x2d8>)
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	897b      	ldrh	r3, [r7, #10]
 80060ae:	1c59      	adds	r1, r3, #1
 80060b0:	8179      	strh	r1, [r7, #10]
 80060b2:	4618      	mov	r0, r3
 80060b4:	4b64      	ldr	r3, [pc, #400]	@ (8006248 <send_DHCP_REQUEST+0x2dc>)
 80060b6:	7899      	ldrb	r1, [r3, #2]
 80060b8:	1813      	adds	r3, r2, r0
 80060ba:	460a      	mov	r2, r1
 80060bc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80060c0:	4b60      	ldr	r3, [pc, #384]	@ (8006244 <send_DHCP_REQUEST+0x2d8>)
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	897b      	ldrh	r3, [r7, #10]
 80060c6:	1c59      	adds	r1, r3, #1
 80060c8:	8179      	strh	r1, [r7, #10]
 80060ca:	4618      	mov	r0, r3
 80060cc:	4b5e      	ldr	r3, [pc, #376]	@ (8006248 <send_DHCP_REQUEST+0x2dc>)
 80060ce:	78d9      	ldrb	r1, [r3, #3]
 80060d0:	1813      	adds	r3, r2, r0
 80060d2:	460a      	mov	r2, r1
 80060d4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80060d8:	4b5a      	ldr	r3, [pc, #360]	@ (8006244 <send_DHCP_REQUEST+0x2d8>)
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	897b      	ldrh	r3, [r7, #10]
 80060de:	1c59      	adds	r1, r3, #1
 80060e0:	8179      	strh	r1, [r7, #10]
 80060e2:	4618      	mov	r0, r3
 80060e4:	4b58      	ldr	r3, [pc, #352]	@ (8006248 <send_DHCP_REQUEST+0x2dc>)
 80060e6:	7919      	ldrb	r1, [r3, #4]
 80060e8:	1813      	adds	r3, r2, r0
 80060ea:	460a      	mov	r2, r1
 80060ec:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80060f0:	4b54      	ldr	r3, [pc, #336]	@ (8006244 <send_DHCP_REQUEST+0x2d8>)
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	897b      	ldrh	r3, [r7, #10]
 80060f6:	1c59      	adds	r1, r3, #1
 80060f8:	8179      	strh	r1, [r7, #10]
 80060fa:	4618      	mov	r0, r3
 80060fc:	4b52      	ldr	r3, [pc, #328]	@ (8006248 <send_DHCP_REQUEST+0x2dc>)
 80060fe:	7959      	ldrb	r1, [r3, #5]
 8006100:	1813      	adds	r3, r2, r0
 8006102:	460a      	mov	r2, r1
 8006104:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8006108:	79fb      	ldrb	r3, [r7, #7]
 800610a:	2bff      	cmp	r3, #255	@ 0xff
 800610c:	f040 8084 	bne.w	8006218 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8006110:	4b4c      	ldr	r3, [pc, #304]	@ (8006244 <send_DHCP_REQUEST+0x2d8>)
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	897b      	ldrh	r3, [r7, #10]
 8006116:	1c59      	adds	r1, r3, #1
 8006118:	8179      	strh	r1, [r7, #10]
 800611a:	4413      	add	r3, r2
 800611c:	2232      	movs	r2, #50	@ 0x32
 800611e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8006122:	4b48      	ldr	r3, [pc, #288]	@ (8006244 <send_DHCP_REQUEST+0x2d8>)
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	897b      	ldrh	r3, [r7, #10]
 8006128:	1c59      	adds	r1, r3, #1
 800612a:	8179      	strh	r1, [r7, #10]
 800612c:	4413      	add	r3, r2
 800612e:	2204      	movs	r2, #4
 8006130:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8006134:	4b43      	ldr	r3, [pc, #268]	@ (8006244 <send_DHCP_REQUEST+0x2d8>)
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	897b      	ldrh	r3, [r7, #10]
 800613a:	1c59      	adds	r1, r3, #1
 800613c:	8179      	strh	r1, [r7, #10]
 800613e:	4618      	mov	r0, r3
 8006140:	4b42      	ldr	r3, [pc, #264]	@ (800624c <send_DHCP_REQUEST+0x2e0>)
 8006142:	7819      	ldrb	r1, [r3, #0]
 8006144:	1813      	adds	r3, r2, r0
 8006146:	460a      	mov	r2, r1
 8006148:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 800614c:	4b3d      	ldr	r3, [pc, #244]	@ (8006244 <send_DHCP_REQUEST+0x2d8>)
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	897b      	ldrh	r3, [r7, #10]
 8006152:	1c59      	adds	r1, r3, #1
 8006154:	8179      	strh	r1, [r7, #10]
 8006156:	4618      	mov	r0, r3
 8006158:	4b3c      	ldr	r3, [pc, #240]	@ (800624c <send_DHCP_REQUEST+0x2e0>)
 800615a:	7859      	ldrb	r1, [r3, #1]
 800615c:	1813      	adds	r3, r2, r0
 800615e:	460a      	mov	r2, r1
 8006160:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8006164:	4b37      	ldr	r3, [pc, #220]	@ (8006244 <send_DHCP_REQUEST+0x2d8>)
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	897b      	ldrh	r3, [r7, #10]
 800616a:	1c59      	adds	r1, r3, #1
 800616c:	8179      	strh	r1, [r7, #10]
 800616e:	4618      	mov	r0, r3
 8006170:	4b36      	ldr	r3, [pc, #216]	@ (800624c <send_DHCP_REQUEST+0x2e0>)
 8006172:	7899      	ldrb	r1, [r3, #2]
 8006174:	1813      	adds	r3, r2, r0
 8006176:	460a      	mov	r2, r1
 8006178:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 800617c:	4b31      	ldr	r3, [pc, #196]	@ (8006244 <send_DHCP_REQUEST+0x2d8>)
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	897b      	ldrh	r3, [r7, #10]
 8006182:	1c59      	adds	r1, r3, #1
 8006184:	8179      	strh	r1, [r7, #10]
 8006186:	4618      	mov	r0, r3
 8006188:	4b30      	ldr	r3, [pc, #192]	@ (800624c <send_DHCP_REQUEST+0x2e0>)
 800618a:	78d9      	ldrb	r1, [r3, #3]
 800618c:	1813      	adds	r3, r2, r0
 800618e:	460a      	mov	r2, r1
 8006190:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8006194:	4b2b      	ldr	r3, [pc, #172]	@ (8006244 <send_DHCP_REQUEST+0x2d8>)
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	897b      	ldrh	r3, [r7, #10]
 800619a:	1c59      	adds	r1, r3, #1
 800619c:	8179      	strh	r1, [r7, #10]
 800619e:	4413      	add	r3, r2
 80061a0:	2236      	movs	r2, #54	@ 0x36
 80061a2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 80061a6:	4b27      	ldr	r3, [pc, #156]	@ (8006244 <send_DHCP_REQUEST+0x2d8>)
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	897b      	ldrh	r3, [r7, #10]
 80061ac:	1c59      	adds	r1, r3, #1
 80061ae:	8179      	strh	r1, [r7, #10]
 80061b0:	4413      	add	r3, r2
 80061b2:	2204      	movs	r2, #4
 80061b4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 80061b8:	4b22      	ldr	r3, [pc, #136]	@ (8006244 <send_DHCP_REQUEST+0x2d8>)
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	897b      	ldrh	r3, [r7, #10]
 80061be:	1c59      	adds	r1, r3, #1
 80061c0:	8179      	strh	r1, [r7, #10]
 80061c2:	4618      	mov	r0, r3
 80061c4:	4b22      	ldr	r3, [pc, #136]	@ (8006250 <send_DHCP_REQUEST+0x2e4>)
 80061c6:	7819      	ldrb	r1, [r3, #0]
 80061c8:	1813      	adds	r3, r2, r0
 80061ca:	460a      	mov	r2, r1
 80061cc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 80061d0:	4b1c      	ldr	r3, [pc, #112]	@ (8006244 <send_DHCP_REQUEST+0x2d8>)
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	897b      	ldrh	r3, [r7, #10]
 80061d6:	1c59      	adds	r1, r3, #1
 80061d8:	8179      	strh	r1, [r7, #10]
 80061da:	4618      	mov	r0, r3
 80061dc:	4b1c      	ldr	r3, [pc, #112]	@ (8006250 <send_DHCP_REQUEST+0x2e4>)
 80061de:	7859      	ldrb	r1, [r3, #1]
 80061e0:	1813      	adds	r3, r2, r0
 80061e2:	460a      	mov	r2, r1
 80061e4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 80061e8:	4b16      	ldr	r3, [pc, #88]	@ (8006244 <send_DHCP_REQUEST+0x2d8>)
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	897b      	ldrh	r3, [r7, #10]
 80061ee:	1c59      	adds	r1, r3, #1
 80061f0:	8179      	strh	r1, [r7, #10]
 80061f2:	4618      	mov	r0, r3
 80061f4:	4b16      	ldr	r3, [pc, #88]	@ (8006250 <send_DHCP_REQUEST+0x2e4>)
 80061f6:	7899      	ldrb	r1, [r3, #2]
 80061f8:	1813      	adds	r3, r2, r0
 80061fa:	460a      	mov	r2, r1
 80061fc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8006200:	4b10      	ldr	r3, [pc, #64]	@ (8006244 <send_DHCP_REQUEST+0x2d8>)
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	897b      	ldrh	r3, [r7, #10]
 8006206:	1c59      	adds	r1, r3, #1
 8006208:	8179      	strh	r1, [r7, #10]
 800620a:	4618      	mov	r0, r3
 800620c:	4b10      	ldr	r3, [pc, #64]	@ (8006250 <send_DHCP_REQUEST+0x2e4>)
 800620e:	78d9      	ldrb	r1, [r3, #3]
 8006210:	1813      	adds	r3, r2, r0
 8006212:	460a      	mov	r2, r1
 8006214:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8006218:	4b0a      	ldr	r3, [pc, #40]	@ (8006244 <send_DHCP_REQUEST+0x2d8>)
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	897b      	ldrh	r3, [r7, #10]
 800621e:	1c59      	adds	r1, r3, #1
 8006220:	8179      	strh	r1, [r7, #10]
 8006222:	4413      	add	r3, r2
 8006224:	220c      	movs	r2, #12
 8006226:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 800622a:	4b06      	ldr	r3, [pc, #24]	@ (8006244 <send_DHCP_REQUEST+0x2d8>)
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	897b      	ldrh	r3, [r7, #10]
 8006230:	1c59      	adds	r1, r3, #1
 8006232:	8179      	strh	r1, [r7, #10]
 8006234:	4413      	add	r3, r2
 8006236:	2200      	movs	r2, #0
 8006238:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800623c:	2300      	movs	r3, #0
 800623e:	60fb      	str	r3, [r7, #12]
 8006240:	e019      	b.n	8006276 <send_DHCP_REQUEST+0x30a>
 8006242:	bf00      	nop
 8006244:	20001230 	.word	0x20001230
 8006248:	20001234 	.word	0x20001234
 800624c:	20001214 	.word	0x20001214
 8006250:	20001208 	.word	0x20001208
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8006254:	4b86      	ldr	r3, [pc, #536]	@ (8006470 <send_DHCP_REQUEST+0x504>)
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	897b      	ldrh	r3, [r7, #10]
 800625a:	1c59      	adds	r1, r3, #1
 800625c:	8179      	strh	r1, [r7, #10]
 800625e:	4618      	mov	r0, r3
 8006260:	4984      	ldr	r1, [pc, #528]	@ (8006474 <send_DHCP_REQUEST+0x508>)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	440b      	add	r3, r1
 8006266:	7819      	ldrb	r1, [r3, #0]
 8006268:	1813      	adds	r3, r2, r0
 800626a:	460a      	mov	r2, r1
 800626c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	3301      	adds	r3, #1
 8006274:	60fb      	str	r3, [r7, #12]
 8006276:	4a7f      	ldr	r2, [pc, #508]	@ (8006474 <send_DHCP_REQUEST+0x508>)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	4413      	add	r3, r2
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1e8      	bne.n	8006254 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8006282:	4b7d      	ldr	r3, [pc, #500]	@ (8006478 <send_DHCP_REQUEST+0x50c>)
 8006284:	78db      	ldrb	r3, [r3, #3]
 8006286:	091b      	lsrs	r3, r3, #4
 8006288:	b2da      	uxtb	r2, r3
 800628a:	4b79      	ldr	r3, [pc, #484]	@ (8006470 <send_DHCP_REQUEST+0x504>)
 800628c:	681c      	ldr	r4, [r3, #0]
 800628e:	897b      	ldrh	r3, [r7, #10]
 8006290:	1c59      	adds	r1, r3, #1
 8006292:	8179      	strh	r1, [r7, #10]
 8006294:	461d      	mov	r5, r3
 8006296:	4610      	mov	r0, r2
 8006298:	f000 ffca 	bl	8007230 <NibbleToHex>
 800629c:	4603      	mov	r3, r0
 800629e:	461a      	mov	r2, r3
 80062a0:	1963      	adds	r3, r4, r5
 80062a2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 80062a6:	4b74      	ldr	r3, [pc, #464]	@ (8006478 <send_DHCP_REQUEST+0x50c>)
 80062a8:	78da      	ldrb	r2, [r3, #3]
 80062aa:	4b71      	ldr	r3, [pc, #452]	@ (8006470 <send_DHCP_REQUEST+0x504>)
 80062ac:	681c      	ldr	r4, [r3, #0]
 80062ae:	897b      	ldrh	r3, [r7, #10]
 80062b0:	1c59      	adds	r1, r3, #1
 80062b2:	8179      	strh	r1, [r7, #10]
 80062b4:	461d      	mov	r5, r3
 80062b6:	4610      	mov	r0, r2
 80062b8:	f000 ffba 	bl	8007230 <NibbleToHex>
 80062bc:	4603      	mov	r3, r0
 80062be:	461a      	mov	r2, r3
 80062c0:	1963      	adds	r3, r4, r5
 80062c2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 80062c6:	4b6c      	ldr	r3, [pc, #432]	@ (8006478 <send_DHCP_REQUEST+0x50c>)
 80062c8:	791b      	ldrb	r3, [r3, #4]
 80062ca:	091b      	lsrs	r3, r3, #4
 80062cc:	b2da      	uxtb	r2, r3
 80062ce:	4b68      	ldr	r3, [pc, #416]	@ (8006470 <send_DHCP_REQUEST+0x504>)
 80062d0:	681c      	ldr	r4, [r3, #0]
 80062d2:	897b      	ldrh	r3, [r7, #10]
 80062d4:	1c59      	adds	r1, r3, #1
 80062d6:	8179      	strh	r1, [r7, #10]
 80062d8:	461d      	mov	r5, r3
 80062da:	4610      	mov	r0, r2
 80062dc:	f000 ffa8 	bl	8007230 <NibbleToHex>
 80062e0:	4603      	mov	r3, r0
 80062e2:	461a      	mov	r2, r3
 80062e4:	1963      	adds	r3, r4, r5
 80062e6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 80062ea:	4b63      	ldr	r3, [pc, #396]	@ (8006478 <send_DHCP_REQUEST+0x50c>)
 80062ec:	791a      	ldrb	r2, [r3, #4]
 80062ee:	4b60      	ldr	r3, [pc, #384]	@ (8006470 <send_DHCP_REQUEST+0x504>)
 80062f0:	681c      	ldr	r4, [r3, #0]
 80062f2:	897b      	ldrh	r3, [r7, #10]
 80062f4:	1c59      	adds	r1, r3, #1
 80062f6:	8179      	strh	r1, [r7, #10]
 80062f8:	461d      	mov	r5, r3
 80062fa:	4610      	mov	r0, r2
 80062fc:	f000 ff98 	bl	8007230 <NibbleToHex>
 8006300:	4603      	mov	r3, r0
 8006302:	461a      	mov	r2, r3
 8006304:	1963      	adds	r3, r4, r5
 8006306:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 800630a:	4b5b      	ldr	r3, [pc, #364]	@ (8006478 <send_DHCP_REQUEST+0x50c>)
 800630c:	795b      	ldrb	r3, [r3, #5]
 800630e:	091b      	lsrs	r3, r3, #4
 8006310:	b2da      	uxtb	r2, r3
 8006312:	4b57      	ldr	r3, [pc, #348]	@ (8006470 <send_DHCP_REQUEST+0x504>)
 8006314:	681c      	ldr	r4, [r3, #0]
 8006316:	897b      	ldrh	r3, [r7, #10]
 8006318:	1c59      	adds	r1, r3, #1
 800631a:	8179      	strh	r1, [r7, #10]
 800631c:	461d      	mov	r5, r3
 800631e:	4610      	mov	r0, r2
 8006320:	f000 ff86 	bl	8007230 <NibbleToHex>
 8006324:	4603      	mov	r3, r0
 8006326:	461a      	mov	r2, r3
 8006328:	1963      	adds	r3, r4, r5
 800632a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 800632e:	4b52      	ldr	r3, [pc, #328]	@ (8006478 <send_DHCP_REQUEST+0x50c>)
 8006330:	795a      	ldrb	r2, [r3, #5]
 8006332:	4b4f      	ldr	r3, [pc, #316]	@ (8006470 <send_DHCP_REQUEST+0x504>)
 8006334:	681c      	ldr	r4, [r3, #0]
 8006336:	897b      	ldrh	r3, [r7, #10]
 8006338:	1c59      	adds	r1, r3, #1
 800633a:	8179      	strh	r1, [r7, #10]
 800633c:	461d      	mov	r5, r3
 800633e:	4610      	mov	r0, r2
 8006340:	f000 ff76 	bl	8007230 <NibbleToHex>
 8006344:	4603      	mov	r3, r0
 8006346:	461a      	mov	r2, r3
 8006348:	1963      	adds	r3, r4, r5
 800634a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	b2d9      	uxtb	r1, r3
 8006352:	4b47      	ldr	r3, [pc, #284]	@ (8006470 <send_DHCP_REQUEST+0x504>)
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	8978      	ldrh	r0, [r7, #10]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	3307      	adds	r3, #7
 800635c:	1ac3      	subs	r3, r0, r3
 800635e:	3106      	adds	r1, #6
 8006360:	b2c9      	uxtb	r1, r1
 8006362:	4413      	add	r3, r2
 8006364:	460a      	mov	r2, r1
 8006366:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 800636a:	4b41      	ldr	r3, [pc, #260]	@ (8006470 <send_DHCP_REQUEST+0x504>)
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	897b      	ldrh	r3, [r7, #10]
 8006370:	1c59      	adds	r1, r3, #1
 8006372:	8179      	strh	r1, [r7, #10]
 8006374:	4413      	add	r3, r2
 8006376:	2237      	movs	r2, #55	@ 0x37
 8006378:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 800637c:	4b3c      	ldr	r3, [pc, #240]	@ (8006470 <send_DHCP_REQUEST+0x504>)
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	897b      	ldrh	r3, [r7, #10]
 8006382:	1c59      	adds	r1, r3, #1
 8006384:	8179      	strh	r1, [r7, #10]
 8006386:	4413      	add	r3, r2
 8006388:	2208      	movs	r2, #8
 800638a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 800638e:	4b38      	ldr	r3, [pc, #224]	@ (8006470 <send_DHCP_REQUEST+0x504>)
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	897b      	ldrh	r3, [r7, #10]
 8006394:	1c59      	adds	r1, r3, #1
 8006396:	8179      	strh	r1, [r7, #10]
 8006398:	4413      	add	r3, r2
 800639a:	2201      	movs	r2, #1
 800639c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 80063a0:	4b33      	ldr	r3, [pc, #204]	@ (8006470 <send_DHCP_REQUEST+0x504>)
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	897b      	ldrh	r3, [r7, #10]
 80063a6:	1c59      	adds	r1, r3, #1
 80063a8:	8179      	strh	r1, [r7, #10]
 80063aa:	4413      	add	r3, r2
 80063ac:	2203      	movs	r2, #3
 80063ae:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 80063b2:	4b2f      	ldr	r3, [pc, #188]	@ (8006470 <send_DHCP_REQUEST+0x504>)
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	897b      	ldrh	r3, [r7, #10]
 80063b8:	1c59      	adds	r1, r3, #1
 80063ba:	8179      	strh	r1, [r7, #10]
 80063bc:	4413      	add	r3, r2
 80063be:	2206      	movs	r2, #6
 80063c0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 80063c4:	4b2a      	ldr	r3, [pc, #168]	@ (8006470 <send_DHCP_REQUEST+0x504>)
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	897b      	ldrh	r3, [r7, #10]
 80063ca:	1c59      	adds	r1, r3, #1
 80063cc:	8179      	strh	r1, [r7, #10]
 80063ce:	4413      	add	r3, r2
 80063d0:	220f      	movs	r2, #15
 80063d2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 80063d6:	4b26      	ldr	r3, [pc, #152]	@ (8006470 <send_DHCP_REQUEST+0x504>)
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	897b      	ldrh	r3, [r7, #10]
 80063dc:	1c59      	adds	r1, r3, #1
 80063de:	8179      	strh	r1, [r7, #10]
 80063e0:	4413      	add	r3, r2
 80063e2:	223a      	movs	r2, #58	@ 0x3a
 80063e4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 80063e8:	4b21      	ldr	r3, [pc, #132]	@ (8006470 <send_DHCP_REQUEST+0x504>)
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	897b      	ldrh	r3, [r7, #10]
 80063ee:	1c59      	adds	r1, r3, #1
 80063f0:	8179      	strh	r1, [r7, #10]
 80063f2:	4413      	add	r3, r2
 80063f4:	223b      	movs	r2, #59	@ 0x3b
 80063f6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 80063fa:	4b1d      	ldr	r3, [pc, #116]	@ (8006470 <send_DHCP_REQUEST+0x504>)
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	897b      	ldrh	r3, [r7, #10]
 8006400:	1c59      	adds	r1, r3, #1
 8006402:	8179      	strh	r1, [r7, #10]
 8006404:	4413      	add	r3, r2
 8006406:	221f      	movs	r2, #31
 8006408:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 800640c:	4b18      	ldr	r3, [pc, #96]	@ (8006470 <send_DHCP_REQUEST+0x504>)
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	897b      	ldrh	r3, [r7, #10]
 8006412:	1c59      	adds	r1, r3, #1
 8006414:	8179      	strh	r1, [r7, #10]
 8006416:	4413      	add	r3, r2
 8006418:	2221      	movs	r2, #33	@ 0x21
 800641a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 800641e:	4b14      	ldr	r3, [pc, #80]	@ (8006470 <send_DHCP_REQUEST+0x504>)
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	897b      	ldrh	r3, [r7, #10]
 8006424:	1c59      	adds	r1, r3, #1
 8006426:	8179      	strh	r1, [r7, #10]
 8006428:	4413      	add	r3, r2
 800642a:	22ff      	movs	r2, #255	@ 0xff
 800642c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8006430:	897b      	ldrh	r3, [r7, #10]
 8006432:	60fb      	str	r3, [r7, #12]
 8006434:	e009      	b.n	800644a <send_DHCP_REQUEST+0x4de>
 8006436:	4b0e      	ldr	r3, [pc, #56]	@ (8006470 <send_DHCP_REQUEST+0x504>)
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	4413      	add	r3, r2
 800643e:	33ec      	adds	r3, #236	@ 0xec
 8006440:	2200      	movs	r2, #0
 8006442:	701a      	strb	r2, [r3, #0]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	3301      	adds	r3, #1
 8006448:	60fb      	str	r3, [r7, #12]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8006450:	dbf1      	blt.n	8006436 <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8006452:	4b0a      	ldr	r3, [pc, #40]	@ (800647c <send_DHCP_REQUEST+0x510>)
 8006454:	7818      	ldrb	r0, [r3, #0]
 8006456:	4b06      	ldr	r3, [pc, #24]	@ (8006470 <send_DHCP_REQUEST+0x504>)
 8006458:	6819      	ldr	r1, [r3, #0]
 800645a:	1d3b      	adds	r3, r7, #4
 800645c:	2243      	movs	r2, #67	@ 0x43
 800645e:	9200      	str	r2, [sp, #0]
 8006460:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8006464:	f7fe f86e 	bl	8004544 <sendto>

}
 8006468:	bf00      	nop
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bdb0      	pop	{r4, r5, r7, pc}
 8006470:	20001230 	.word	0x20001230
 8006474:	20000060 	.word	0x20000060
 8006478:	20001234 	.word	0x20001234
 800647c:	20001205 	.word	0x20001205

08006480 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8006486:	2300      	movs	r3, #0
 8006488:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 800648a:	f7ff fa91 	bl	80059b0 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 800648e:	2304      	movs	r3, #4
 8006490:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8006492:	4b9f      	ldr	r3, [pc, #636]	@ (8006710 <send_DHCP_DECLINE+0x290>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	330a      	adds	r3, #10
 8006498:	2200      	movs	r2, #0
 800649a:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 800649c:	4b9c      	ldr	r3, [pc, #624]	@ (8006710 <send_DHCP_DECLINE+0x290>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	330a      	adds	r3, #10
 80064a2:	3301      	adds	r3, #1
 80064a4:	2200      	movs	r2, #0
 80064a6:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80064a8:	4b99      	ldr	r3, [pc, #612]	@ (8006710 <send_DHCP_DECLINE+0x290>)
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	897b      	ldrh	r3, [r7, #10]
 80064ae:	1c59      	adds	r1, r3, #1
 80064b0:	8179      	strh	r1, [r7, #10]
 80064b2:	4413      	add	r3, r2
 80064b4:	2235      	movs	r2, #53	@ 0x35
 80064b6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80064ba:	4b95      	ldr	r3, [pc, #596]	@ (8006710 <send_DHCP_DECLINE+0x290>)
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	897b      	ldrh	r3, [r7, #10]
 80064c0:	1c59      	adds	r1, r3, #1
 80064c2:	8179      	strh	r1, [r7, #10]
 80064c4:	4413      	add	r3, r2
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 80064cc:	4b90      	ldr	r3, [pc, #576]	@ (8006710 <send_DHCP_DECLINE+0x290>)
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	897b      	ldrh	r3, [r7, #10]
 80064d2:	1c59      	adds	r1, r3, #1
 80064d4:	8179      	strh	r1, [r7, #10]
 80064d6:	4413      	add	r3, r2
 80064d8:	2204      	movs	r2, #4
 80064da:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80064de:	4b8c      	ldr	r3, [pc, #560]	@ (8006710 <send_DHCP_DECLINE+0x290>)
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	897b      	ldrh	r3, [r7, #10]
 80064e4:	1c59      	adds	r1, r3, #1
 80064e6:	8179      	strh	r1, [r7, #10]
 80064e8:	4413      	add	r3, r2
 80064ea:	223d      	movs	r2, #61	@ 0x3d
 80064ec:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80064f0:	4b87      	ldr	r3, [pc, #540]	@ (8006710 <send_DHCP_DECLINE+0x290>)
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	897b      	ldrh	r3, [r7, #10]
 80064f6:	1c59      	adds	r1, r3, #1
 80064f8:	8179      	strh	r1, [r7, #10]
 80064fa:	4413      	add	r3, r2
 80064fc:	2207      	movs	r2, #7
 80064fe:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8006502:	4b83      	ldr	r3, [pc, #524]	@ (8006710 <send_DHCP_DECLINE+0x290>)
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	897b      	ldrh	r3, [r7, #10]
 8006508:	1c59      	adds	r1, r3, #1
 800650a:	8179      	strh	r1, [r7, #10]
 800650c:	4413      	add	r3, r2
 800650e:	2201      	movs	r2, #1
 8006510:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8006514:	4b7e      	ldr	r3, [pc, #504]	@ (8006710 <send_DHCP_DECLINE+0x290>)
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	897b      	ldrh	r3, [r7, #10]
 800651a:	1c59      	adds	r1, r3, #1
 800651c:	8179      	strh	r1, [r7, #10]
 800651e:	4618      	mov	r0, r3
 8006520:	4b7c      	ldr	r3, [pc, #496]	@ (8006714 <send_DHCP_DECLINE+0x294>)
 8006522:	7819      	ldrb	r1, [r3, #0]
 8006524:	1813      	adds	r3, r2, r0
 8006526:	460a      	mov	r2, r1
 8006528:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 800652c:	4b78      	ldr	r3, [pc, #480]	@ (8006710 <send_DHCP_DECLINE+0x290>)
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	897b      	ldrh	r3, [r7, #10]
 8006532:	1c59      	adds	r1, r3, #1
 8006534:	8179      	strh	r1, [r7, #10]
 8006536:	4618      	mov	r0, r3
 8006538:	4b76      	ldr	r3, [pc, #472]	@ (8006714 <send_DHCP_DECLINE+0x294>)
 800653a:	7859      	ldrb	r1, [r3, #1]
 800653c:	1813      	adds	r3, r2, r0
 800653e:	460a      	mov	r2, r1
 8006540:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8006544:	4b72      	ldr	r3, [pc, #456]	@ (8006710 <send_DHCP_DECLINE+0x290>)
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	897b      	ldrh	r3, [r7, #10]
 800654a:	1c59      	adds	r1, r3, #1
 800654c:	8179      	strh	r1, [r7, #10]
 800654e:	4618      	mov	r0, r3
 8006550:	4b70      	ldr	r3, [pc, #448]	@ (8006714 <send_DHCP_DECLINE+0x294>)
 8006552:	7899      	ldrb	r1, [r3, #2]
 8006554:	1813      	adds	r3, r2, r0
 8006556:	460a      	mov	r2, r1
 8006558:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 800655c:	4b6c      	ldr	r3, [pc, #432]	@ (8006710 <send_DHCP_DECLINE+0x290>)
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	897b      	ldrh	r3, [r7, #10]
 8006562:	1c59      	adds	r1, r3, #1
 8006564:	8179      	strh	r1, [r7, #10]
 8006566:	4618      	mov	r0, r3
 8006568:	4b6a      	ldr	r3, [pc, #424]	@ (8006714 <send_DHCP_DECLINE+0x294>)
 800656a:	78d9      	ldrb	r1, [r3, #3]
 800656c:	1813      	adds	r3, r2, r0
 800656e:	460a      	mov	r2, r1
 8006570:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8006574:	4b66      	ldr	r3, [pc, #408]	@ (8006710 <send_DHCP_DECLINE+0x290>)
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	897b      	ldrh	r3, [r7, #10]
 800657a:	1c59      	adds	r1, r3, #1
 800657c:	8179      	strh	r1, [r7, #10]
 800657e:	4618      	mov	r0, r3
 8006580:	4b64      	ldr	r3, [pc, #400]	@ (8006714 <send_DHCP_DECLINE+0x294>)
 8006582:	7919      	ldrb	r1, [r3, #4]
 8006584:	1813      	adds	r3, r2, r0
 8006586:	460a      	mov	r2, r1
 8006588:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 800658c:	4b60      	ldr	r3, [pc, #384]	@ (8006710 <send_DHCP_DECLINE+0x290>)
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	897b      	ldrh	r3, [r7, #10]
 8006592:	1c59      	adds	r1, r3, #1
 8006594:	8179      	strh	r1, [r7, #10]
 8006596:	4618      	mov	r0, r3
 8006598:	4b5e      	ldr	r3, [pc, #376]	@ (8006714 <send_DHCP_DECLINE+0x294>)
 800659a:	7959      	ldrb	r1, [r3, #5]
 800659c:	1813      	adds	r3, r2, r0
 800659e:	460a      	mov	r2, r1
 80065a0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 80065a4:	4b5a      	ldr	r3, [pc, #360]	@ (8006710 <send_DHCP_DECLINE+0x290>)
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	897b      	ldrh	r3, [r7, #10]
 80065aa:	1c59      	adds	r1, r3, #1
 80065ac:	8179      	strh	r1, [r7, #10]
 80065ae:	4413      	add	r3, r2
 80065b0:	2232      	movs	r2, #50	@ 0x32
 80065b2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 80065b6:	4b56      	ldr	r3, [pc, #344]	@ (8006710 <send_DHCP_DECLINE+0x290>)
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	897b      	ldrh	r3, [r7, #10]
 80065bc:	1c59      	adds	r1, r3, #1
 80065be:	8179      	strh	r1, [r7, #10]
 80065c0:	4413      	add	r3, r2
 80065c2:	2204      	movs	r2, #4
 80065c4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 80065c8:	4b51      	ldr	r3, [pc, #324]	@ (8006710 <send_DHCP_DECLINE+0x290>)
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	897b      	ldrh	r3, [r7, #10]
 80065ce:	1c59      	adds	r1, r3, #1
 80065d0:	8179      	strh	r1, [r7, #10]
 80065d2:	4618      	mov	r0, r3
 80065d4:	4b50      	ldr	r3, [pc, #320]	@ (8006718 <send_DHCP_DECLINE+0x298>)
 80065d6:	7819      	ldrb	r1, [r3, #0]
 80065d8:	1813      	adds	r3, r2, r0
 80065da:	460a      	mov	r2, r1
 80065dc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 80065e0:	4b4b      	ldr	r3, [pc, #300]	@ (8006710 <send_DHCP_DECLINE+0x290>)
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	897b      	ldrh	r3, [r7, #10]
 80065e6:	1c59      	adds	r1, r3, #1
 80065e8:	8179      	strh	r1, [r7, #10]
 80065ea:	4618      	mov	r0, r3
 80065ec:	4b4a      	ldr	r3, [pc, #296]	@ (8006718 <send_DHCP_DECLINE+0x298>)
 80065ee:	7859      	ldrb	r1, [r3, #1]
 80065f0:	1813      	adds	r3, r2, r0
 80065f2:	460a      	mov	r2, r1
 80065f4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 80065f8:	4b45      	ldr	r3, [pc, #276]	@ (8006710 <send_DHCP_DECLINE+0x290>)
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	897b      	ldrh	r3, [r7, #10]
 80065fe:	1c59      	adds	r1, r3, #1
 8006600:	8179      	strh	r1, [r7, #10]
 8006602:	4618      	mov	r0, r3
 8006604:	4b44      	ldr	r3, [pc, #272]	@ (8006718 <send_DHCP_DECLINE+0x298>)
 8006606:	7899      	ldrb	r1, [r3, #2]
 8006608:	1813      	adds	r3, r2, r0
 800660a:	460a      	mov	r2, r1
 800660c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8006610:	4b3f      	ldr	r3, [pc, #252]	@ (8006710 <send_DHCP_DECLINE+0x290>)
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	897b      	ldrh	r3, [r7, #10]
 8006616:	1c59      	adds	r1, r3, #1
 8006618:	8179      	strh	r1, [r7, #10]
 800661a:	4618      	mov	r0, r3
 800661c:	4b3e      	ldr	r3, [pc, #248]	@ (8006718 <send_DHCP_DECLINE+0x298>)
 800661e:	78d9      	ldrb	r1, [r3, #3]
 8006620:	1813      	adds	r3, r2, r0
 8006622:	460a      	mov	r2, r1
 8006624:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8006628:	4b39      	ldr	r3, [pc, #228]	@ (8006710 <send_DHCP_DECLINE+0x290>)
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	897b      	ldrh	r3, [r7, #10]
 800662e:	1c59      	adds	r1, r3, #1
 8006630:	8179      	strh	r1, [r7, #10]
 8006632:	4413      	add	r3, r2
 8006634:	2236      	movs	r2, #54	@ 0x36
 8006636:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 800663a:	4b35      	ldr	r3, [pc, #212]	@ (8006710 <send_DHCP_DECLINE+0x290>)
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	897b      	ldrh	r3, [r7, #10]
 8006640:	1c59      	adds	r1, r3, #1
 8006642:	8179      	strh	r1, [r7, #10]
 8006644:	4413      	add	r3, r2
 8006646:	2204      	movs	r2, #4
 8006648:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 800664c:	4b30      	ldr	r3, [pc, #192]	@ (8006710 <send_DHCP_DECLINE+0x290>)
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	897b      	ldrh	r3, [r7, #10]
 8006652:	1c59      	adds	r1, r3, #1
 8006654:	8179      	strh	r1, [r7, #10]
 8006656:	4618      	mov	r0, r3
 8006658:	4b30      	ldr	r3, [pc, #192]	@ (800671c <send_DHCP_DECLINE+0x29c>)
 800665a:	7819      	ldrb	r1, [r3, #0]
 800665c:	1813      	adds	r3, r2, r0
 800665e:	460a      	mov	r2, r1
 8006660:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8006664:	4b2a      	ldr	r3, [pc, #168]	@ (8006710 <send_DHCP_DECLINE+0x290>)
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	897b      	ldrh	r3, [r7, #10]
 800666a:	1c59      	adds	r1, r3, #1
 800666c:	8179      	strh	r1, [r7, #10]
 800666e:	4618      	mov	r0, r3
 8006670:	4b2a      	ldr	r3, [pc, #168]	@ (800671c <send_DHCP_DECLINE+0x29c>)
 8006672:	7859      	ldrb	r1, [r3, #1]
 8006674:	1813      	adds	r3, r2, r0
 8006676:	460a      	mov	r2, r1
 8006678:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 800667c:	4b24      	ldr	r3, [pc, #144]	@ (8006710 <send_DHCP_DECLINE+0x290>)
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	897b      	ldrh	r3, [r7, #10]
 8006682:	1c59      	adds	r1, r3, #1
 8006684:	8179      	strh	r1, [r7, #10]
 8006686:	4618      	mov	r0, r3
 8006688:	4b24      	ldr	r3, [pc, #144]	@ (800671c <send_DHCP_DECLINE+0x29c>)
 800668a:	7899      	ldrb	r1, [r3, #2]
 800668c:	1813      	adds	r3, r2, r0
 800668e:	460a      	mov	r2, r1
 8006690:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8006694:	4b1e      	ldr	r3, [pc, #120]	@ (8006710 <send_DHCP_DECLINE+0x290>)
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	897b      	ldrh	r3, [r7, #10]
 800669a:	1c59      	adds	r1, r3, #1
 800669c:	8179      	strh	r1, [r7, #10]
 800669e:	4618      	mov	r0, r3
 80066a0:	4b1e      	ldr	r3, [pc, #120]	@ (800671c <send_DHCP_DECLINE+0x29c>)
 80066a2:	78d9      	ldrb	r1, [r3, #3]
 80066a4:	1813      	adds	r3, r2, r0
 80066a6:	460a      	mov	r2, r1
 80066a8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = endOption;
 80066ac:	4b18      	ldr	r3, [pc, #96]	@ (8006710 <send_DHCP_DECLINE+0x290>)
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	897b      	ldrh	r3, [r7, #10]
 80066b2:	1c59      	adds	r1, r3, #1
 80066b4:	8179      	strh	r1, [r7, #10]
 80066b6:	4413      	add	r3, r2
 80066b8:	22ff      	movs	r2, #255	@ 0xff
 80066ba:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80066be:	897b      	ldrh	r3, [r7, #10]
 80066c0:	60fb      	str	r3, [r7, #12]
 80066c2:	e009      	b.n	80066d8 <send_DHCP_DECLINE+0x258>
 80066c4:	4b12      	ldr	r3, [pc, #72]	@ (8006710 <send_DHCP_DECLINE+0x290>)
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	4413      	add	r3, r2
 80066cc:	33ec      	adds	r3, #236	@ 0xec
 80066ce:	2200      	movs	r2, #0
 80066d0:	701a      	strb	r2, [r3, #0]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	3301      	adds	r3, #1
 80066d6:	60fb      	str	r3, [r7, #12]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 80066de:	dbf1      	blt.n	80066c4 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 80066e0:	23ff      	movs	r3, #255	@ 0xff
 80066e2:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 80066e4:	23ff      	movs	r3, #255	@ 0xff
 80066e6:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 80066e8:	23ff      	movs	r3, #255	@ 0xff
 80066ea:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 80066ec:	23ff      	movs	r3, #255	@ 0xff
 80066ee:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80066f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006720 <send_DHCP_DECLINE+0x2a0>)
 80066f2:	7818      	ldrb	r0, [r3, #0]
 80066f4:	4b06      	ldr	r3, [pc, #24]	@ (8006710 <send_DHCP_DECLINE+0x290>)
 80066f6:	6819      	ldr	r1, [r3, #0]
 80066f8:	1d3b      	adds	r3, r7, #4
 80066fa:	2243      	movs	r2, #67	@ 0x43
 80066fc:	9200      	str	r2, [sp, #0]
 80066fe:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8006702:	f7fd ff1f 	bl	8004544 <sendto>
}
 8006706:	bf00      	nop
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	20001230 	.word	0x20001230
 8006714:	20001234 	.word	0x20001234
 8006718:	20001214 	.word	0x20001214
 800671c:	20001208 	.word	0x20001208
 8006720:	20001205 	.word	0x20001205

08006724 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 8006724:	b590      	push	{r4, r7, lr}
 8006726:	b089      	sub	sp, #36	@ 0x24
 8006728:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 800672a:	2300      	movs	r3, #0
 800672c:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 800672e:	4ba1      	ldr	r3, [pc, #644]	@ (80069b4 <parseDHCPMSG+0x290>)
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	4618      	mov	r0, r3
 8006734:	f7fd f8c0 	bl	80038b8 <getSn_RX_RSR>
 8006738:	4603      	mov	r3, r0
 800673a:	823b      	strh	r3, [r7, #16]
 800673c:	8a3b      	ldrh	r3, [r7, #16]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d011      	beq.n	8006766 <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 8006742:	4b9c      	ldr	r3, [pc, #624]	@ (80069b4 <parseDHCPMSG+0x290>)
 8006744:	7818      	ldrb	r0, [r3, #0]
 8006746:	4b9c      	ldr	r3, [pc, #624]	@ (80069b8 <parseDHCPMSG+0x294>)
 8006748:	6819      	ldr	r1, [r3, #0]
 800674a:	1d3c      	adds	r4, r7, #4
 800674c:	8a3a      	ldrh	r2, [r7, #16]
 800674e:	1cbb      	adds	r3, r7, #2
 8006750:	9300      	str	r3, [sp, #0]
 8006752:	4623      	mov	r3, r4
 8006754:	f7fe f8ee 	bl	8004934 <recvfrom>
 8006758:	4603      	mov	r3, r0
 800675a:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 800675c:	887b      	ldrh	r3, [r7, #2]
 800675e:	2b43      	cmp	r3, #67	@ 0x43
 8006760:	f040 81ed 	bne.w	8006b3e <parseDHCPMSG+0x41a>
 8006764:	e001      	b.n	800676a <parseDHCPMSG+0x46>
   else return 0;
 8006766:	2300      	movs	r3, #0
 8006768:	e1eb      	b.n	8006b42 <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 800676a:	4b93      	ldr	r3, [pc, #588]	@ (80069b8 <parseDHCPMSG+0x294>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	7f1a      	ldrb	r2, [r3, #28]
 8006770:	4b92      	ldr	r3, [pc, #584]	@ (80069bc <parseDHCPMSG+0x298>)
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	429a      	cmp	r2, r3
 8006776:	d124      	bne.n	80067c2 <parseDHCPMSG+0x9e>
 8006778:	4b8f      	ldr	r3, [pc, #572]	@ (80069b8 <parseDHCPMSG+0x294>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	7f5a      	ldrb	r2, [r3, #29]
 800677e:	4b8f      	ldr	r3, [pc, #572]	@ (80069bc <parseDHCPMSG+0x298>)
 8006780:	785b      	ldrb	r3, [r3, #1]
 8006782:	429a      	cmp	r2, r3
 8006784:	d11d      	bne.n	80067c2 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8006786:	4b8c      	ldr	r3, [pc, #560]	@ (80069b8 <parseDHCPMSG+0x294>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	7f9a      	ldrb	r2, [r3, #30]
 800678c:	4b8b      	ldr	r3, [pc, #556]	@ (80069bc <parseDHCPMSG+0x298>)
 800678e:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8006790:	429a      	cmp	r2, r3
 8006792:	d116      	bne.n	80067c2 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8006794:	4b88      	ldr	r3, [pc, #544]	@ (80069b8 <parseDHCPMSG+0x294>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	7fda      	ldrb	r2, [r3, #31]
 800679a:	4b88      	ldr	r3, [pc, #544]	@ (80069bc <parseDHCPMSG+0x298>)
 800679c:	78db      	ldrb	r3, [r3, #3]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d10f      	bne.n	80067c2 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 80067a2:	4b85      	ldr	r3, [pc, #532]	@ (80069b8 <parseDHCPMSG+0x294>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f893 2020 	ldrb.w	r2, [r3, #32]
 80067aa:	4b84      	ldr	r3, [pc, #528]	@ (80069bc <parseDHCPMSG+0x298>)
 80067ac:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d107      	bne.n	80067c2 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 80067b2:	4b81      	ldr	r3, [pc, #516]	@ (80069b8 <parseDHCPMSG+0x294>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 80067ba:	4b80      	ldr	r3, [pc, #512]	@ (80069bc <parseDHCPMSG+0x298>)
 80067bc:	795b      	ldrb	r3, [r3, #5]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d001      	beq.n	80067c6 <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 80067c2:	2300      	movs	r3, #0
 80067c4:	e1bd      	b.n	8006b42 <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 80067c6:	4b7e      	ldr	r3, [pc, #504]	@ (80069c0 <parseDHCPMSG+0x29c>)
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10b      	bne.n	80067e6 <parseDHCPMSG+0xc2>
 80067ce:	4b7c      	ldr	r3, [pc, #496]	@ (80069c0 <parseDHCPMSG+0x29c>)
 80067d0:	785b      	ldrb	r3, [r3, #1]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d107      	bne.n	80067e6 <parseDHCPMSG+0xc2>
 80067d6:	4b7a      	ldr	r3, [pc, #488]	@ (80069c0 <parseDHCPMSG+0x29c>)
 80067d8:	789b      	ldrb	r3, [r3, #2]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d103      	bne.n	80067e6 <parseDHCPMSG+0xc2>
 80067de:	4b78      	ldr	r3, [pc, #480]	@ (80069c0 <parseDHCPMSG+0x29c>)
 80067e0:	78db      	ldrb	r3, [r3, #3]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d029      	beq.n	800683a <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 80067e6:	793a      	ldrb	r2, [r7, #4]
 80067e8:	4b75      	ldr	r3, [pc, #468]	@ (80069c0 <parseDHCPMSG+0x29c>)
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d10e      	bne.n	800680e <parseDHCPMSG+0xea>
 80067f0:	797a      	ldrb	r2, [r7, #5]
 80067f2:	4b73      	ldr	r3, [pc, #460]	@ (80069c0 <parseDHCPMSG+0x29c>)
 80067f4:	785b      	ldrb	r3, [r3, #1]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d109      	bne.n	800680e <parseDHCPMSG+0xea>
 80067fa:	79ba      	ldrb	r2, [r7, #6]
 80067fc:	4b70      	ldr	r3, [pc, #448]	@ (80069c0 <parseDHCPMSG+0x29c>)
 80067fe:	789b      	ldrb	r3, [r3, #2]
 8006800:	429a      	cmp	r2, r3
 8006802:	d104      	bne.n	800680e <parseDHCPMSG+0xea>
 8006804:	79fa      	ldrb	r2, [r7, #7]
 8006806:	4b6e      	ldr	r3, [pc, #440]	@ (80069c0 <parseDHCPMSG+0x29c>)
 8006808:	78db      	ldrb	r3, [r3, #3]
 800680a:	429a      	cmp	r2, r3
 800680c:	d015      	beq.n	800683a <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 800680e:	793a      	ldrb	r2, [r7, #4]
 8006810:	4b6c      	ldr	r3, [pc, #432]	@ (80069c4 <parseDHCPMSG+0x2a0>)
 8006812:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8006814:	429a      	cmp	r2, r3
 8006816:	d10e      	bne.n	8006836 <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8006818:	797a      	ldrb	r2, [r7, #5]
 800681a:	4b6a      	ldr	r3, [pc, #424]	@ (80069c4 <parseDHCPMSG+0x2a0>)
 800681c:	785b      	ldrb	r3, [r3, #1]
 800681e:	429a      	cmp	r2, r3
 8006820:	d109      	bne.n	8006836 <parseDHCPMSG+0x112>
 8006822:	79ba      	ldrb	r2, [r7, #6]
 8006824:	4b67      	ldr	r3, [pc, #412]	@ (80069c4 <parseDHCPMSG+0x2a0>)
 8006826:	789b      	ldrb	r3, [r3, #2]
 8006828:	429a      	cmp	r2, r3
 800682a:	d104      	bne.n	8006836 <parseDHCPMSG+0x112>
 800682c:	79fa      	ldrb	r2, [r7, #7]
 800682e:	4b65      	ldr	r3, [pc, #404]	@ (80069c4 <parseDHCPMSG+0x2a0>)
 8006830:	78db      	ldrb	r3, [r3, #3]
 8006832:	429a      	cmp	r2, r3
 8006834:	d001      	beq.n	800683a <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 8006836:	2300      	movs	r3, #0
 8006838:	e183      	b.n	8006b42 <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 800683a:	4b5f      	ldr	r3, [pc, #380]	@ (80069b8 <parseDHCPMSG+0x294>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	33f0      	adds	r3, #240	@ 0xf0
 8006844:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 8006846:	8a3b      	ldrh	r3, [r7, #16]
 8006848:	3bf0      	subs	r3, #240	@ 0xf0
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	4413      	add	r3, r2
 800684e:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 8006850:	e170      	b.n	8006b34 <parseDHCPMSG+0x410>

			switch ( *p ) {
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	2b36      	cmp	r3, #54	@ 0x36
 8006858:	dc76      	bgt.n	8006948 <parseDHCPMSG+0x224>
 800685a:	2b00      	cmp	r3, #0
 800685c:	f2c0 815d 	blt.w	8006b1a <parseDHCPMSG+0x3f6>
 8006860:	2b36      	cmp	r3, #54	@ 0x36
 8006862:	f200 815a 	bhi.w	8006b1a <parseDHCPMSG+0x3f6>
 8006866:	a201      	add	r2, pc, #4	@ (adr r2, 800686c <parseDHCPMSG+0x148>)
 8006868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686c:	08006955 	.word	0x08006955
 8006870:	08006975 	.word	0x08006975
 8006874:	08006b1b 	.word	0x08006b1b
 8006878:	080069cd 	.word	0x080069cd
 800687c:	08006b1b 	.word	0x08006b1b
 8006880:	08006b1b 	.word	0x08006b1b
 8006884:	08006a19 	.word	0x08006a19
 8006888:	08006b1b 	.word	0x08006b1b
 800688c:	08006b1b 	.word	0x08006b1b
 8006890:	08006b1b 	.word	0x08006b1b
 8006894:	08006b1b 	.word	0x08006b1b
 8006898:	08006b1b 	.word	0x08006b1b
 800689c:	08006b1b 	.word	0x08006b1b
 80068a0:	08006b1b 	.word	0x08006b1b
 80068a4:	08006b1b 	.word	0x08006b1b
 80068a8:	08006b1b 	.word	0x08006b1b
 80068ac:	08006b1b 	.word	0x08006b1b
 80068b0:	08006b1b 	.word	0x08006b1b
 80068b4:	08006b1b 	.word	0x08006b1b
 80068b8:	08006b1b 	.word	0x08006b1b
 80068bc:	08006b1b 	.word	0x08006b1b
 80068c0:	08006b1b 	.word	0x08006b1b
 80068c4:	08006b1b 	.word	0x08006b1b
 80068c8:	08006b1b 	.word	0x08006b1b
 80068cc:	08006b1b 	.word	0x08006b1b
 80068d0:	08006b1b 	.word	0x08006b1b
 80068d4:	08006b1b 	.word	0x08006b1b
 80068d8:	08006b1b 	.word	0x08006b1b
 80068dc:	08006b1b 	.word	0x08006b1b
 80068e0:	08006b1b 	.word	0x08006b1b
 80068e4:	08006b1b 	.word	0x08006b1b
 80068e8:	08006b1b 	.word	0x08006b1b
 80068ec:	08006b1b 	.word	0x08006b1b
 80068f0:	08006b1b 	.word	0x08006b1b
 80068f4:	08006b1b 	.word	0x08006b1b
 80068f8:	08006b1b 	.word	0x08006b1b
 80068fc:	08006b1b 	.word	0x08006b1b
 8006900:	08006b1b 	.word	0x08006b1b
 8006904:	08006b1b 	.word	0x08006b1b
 8006908:	08006b1b 	.word	0x08006b1b
 800690c:	08006b1b 	.word	0x08006b1b
 8006910:	08006b1b 	.word	0x08006b1b
 8006914:	08006b1b 	.word	0x08006b1b
 8006918:	08006b1b 	.word	0x08006b1b
 800691c:	08006b1b 	.word	0x08006b1b
 8006920:	08006b1b 	.word	0x08006b1b
 8006924:	08006b1b 	.word	0x08006b1b
 8006928:	08006b1b 	.word	0x08006b1b
 800692c:	08006b1b 	.word	0x08006b1b
 8006930:	08006b1b 	.word	0x08006b1b
 8006934:	08006b1b 	.word	0x08006b1b
 8006938:	08006a65 	.word	0x08006a65
 800693c:	08006b1b 	.word	0x08006b1b
 8006940:	0800695d 	.word	0x0800695d
 8006944:	08006ac1 	.word	0x08006ac1
 8006948:	2bff      	cmp	r3, #255	@ 0xff
 800694a:	f040 80e6 	bne.w	8006b1a <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	617b      	str	r3, [r7, #20]
   				break;
 8006952:	e0ef      	b.n	8006b34 <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	3301      	adds	r3, #1
 8006958:	617b      	str	r3, [r7, #20]
   				break;
 800695a:	e0eb      	b.n	8006b34 <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	3301      	adds	r3, #1
 8006960:	617b      	str	r3, [r7, #20]
   				p++;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	3301      	adds	r3, #1
 8006966:	617b      	str	r3, [r7, #20]
   				type = *p++;
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	1c5a      	adds	r2, r3, #1
 800696c:	617a      	str	r2, [r7, #20]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	74fb      	strb	r3, [r7, #19]
   				break;
 8006972:	e0df      	b.n	8006b34 <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	3301      	adds	r3, #1
 8006978:	617b      	str	r3, [r7, #20]
   				p++;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	3301      	adds	r3, #1
 800697e:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	1c5a      	adds	r2, r3, #1
 8006984:	617a      	str	r2, [r7, #20]
 8006986:	781a      	ldrb	r2, [r3, #0]
 8006988:	4b0f      	ldr	r3, [pc, #60]	@ (80069c8 <parseDHCPMSG+0x2a4>)
 800698a:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	1c5a      	adds	r2, r3, #1
 8006990:	617a      	str	r2, [r7, #20]
 8006992:	781a      	ldrb	r2, [r3, #0]
 8006994:	4b0c      	ldr	r3, [pc, #48]	@ (80069c8 <parseDHCPMSG+0x2a4>)
 8006996:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	1c5a      	adds	r2, r3, #1
 800699c:	617a      	str	r2, [r7, #20]
 800699e:	781a      	ldrb	r2, [r3, #0]
 80069a0:	4b09      	ldr	r3, [pc, #36]	@ (80069c8 <parseDHCPMSG+0x2a4>)
 80069a2:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	1c5a      	adds	r2, r3, #1
 80069a8:	617a      	str	r2, [r7, #20]
 80069aa:	781a      	ldrb	r2, [r3, #0]
 80069ac:	4b06      	ldr	r3, [pc, #24]	@ (80069c8 <parseDHCPMSG+0x2a4>)
 80069ae:	70da      	strb	r2, [r3, #3]
   				break;
 80069b0:	e0c0      	b.n	8006b34 <parseDHCPMSG+0x410>
 80069b2:	bf00      	nop
 80069b4:	20001205 	.word	0x20001205
 80069b8:	20001230 	.word	0x20001230
 80069bc:	20001234 	.word	0x20001234
 80069c0:	20001208 	.word	0x20001208
 80069c4:	2000120c 	.word	0x2000120c
 80069c8:	2000121c 	.word	0x2000121c
   			case routersOnSubnet :
   				p++;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	3301      	adds	r3, #1
 80069d0:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	1c5a      	adds	r2, r3, #1
 80069d6:	617a      	str	r2, [r7, #20]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	1c5a      	adds	r2, r3, #1
 80069e0:	617a      	str	r2, [r7, #20]
 80069e2:	781a      	ldrb	r2, [r3, #0]
 80069e4:	4b59      	ldr	r3, [pc, #356]	@ (8006b4c <parseDHCPMSG+0x428>)
 80069e6:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	1c5a      	adds	r2, r3, #1
 80069ec:	617a      	str	r2, [r7, #20]
 80069ee:	781a      	ldrb	r2, [r3, #0]
 80069f0:	4b56      	ldr	r3, [pc, #344]	@ (8006b4c <parseDHCPMSG+0x428>)
 80069f2:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	1c5a      	adds	r2, r3, #1
 80069f8:	617a      	str	r2, [r7, #20]
 80069fa:	781a      	ldrb	r2, [r3, #0]
 80069fc:	4b53      	ldr	r3, [pc, #332]	@ (8006b4c <parseDHCPMSG+0x428>)
 80069fe:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	1c5a      	adds	r2, r3, #1
 8006a04:	617a      	str	r2, [r7, #20]
 8006a06:	781a      	ldrb	r2, [r3, #0]
 8006a08:	4b50      	ldr	r3, [pc, #320]	@ (8006b4c <parseDHCPMSG+0x428>)
 8006a0a:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8006a0c:	7afb      	ldrb	r3, [r7, #11]
 8006a0e:	3b04      	subs	r3, #4
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	4413      	add	r3, r2
 8006a14:	617b      	str	r3, [r7, #20]
   				break;
 8006a16:	e08d      	b.n	8006b34 <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	1c5a      	adds	r2, r3, #1
 8006a22:	617a      	str	r2, [r7, #20]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	1c5a      	adds	r2, r3, #1
 8006a2c:	617a      	str	r2, [r7, #20]
 8006a2e:	781a      	ldrb	r2, [r3, #0]
 8006a30:	4b47      	ldr	r3, [pc, #284]	@ (8006b50 <parseDHCPMSG+0x42c>)
 8006a32:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	617a      	str	r2, [r7, #20]
 8006a3a:	781a      	ldrb	r2, [r3, #0]
 8006a3c:	4b44      	ldr	r3, [pc, #272]	@ (8006b50 <parseDHCPMSG+0x42c>)
 8006a3e:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	1c5a      	adds	r2, r3, #1
 8006a44:	617a      	str	r2, [r7, #20]
 8006a46:	781a      	ldrb	r2, [r3, #0]
 8006a48:	4b41      	ldr	r3, [pc, #260]	@ (8006b50 <parseDHCPMSG+0x42c>)
 8006a4a:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	1c5a      	adds	r2, r3, #1
 8006a50:	617a      	str	r2, [r7, #20]
 8006a52:	781a      	ldrb	r2, [r3, #0]
 8006a54:	4b3e      	ldr	r3, [pc, #248]	@ (8006b50 <parseDHCPMSG+0x42c>)
 8006a56:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8006a58:	7afb      	ldrb	r3, [r7, #11]
 8006a5a:	3b04      	subs	r3, #4
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	4413      	add	r3, r2
 8006a60:	617b      	str	r3, [r7, #20]
   				break;
 8006a62:	e067      	b.n	8006b34 <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	3301      	adds	r3, #1
 8006a68:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	1c5a      	adds	r2, r3, #1
 8006a6e:	617a      	str	r2, [r7, #20]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	1c5a      	adds	r2, r3, #1
 8006a78:	617a      	str	r2, [r7, #20]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	4b35      	ldr	r3, [pc, #212]	@ (8006b54 <parseDHCPMSG+0x430>)
 8006a80:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8006a82:	4b34      	ldr	r3, [pc, #208]	@ (8006b54 <parseDHCPMSG+0x430>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	021a      	lsls	r2, r3, #8
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	1c59      	adds	r1, r3, #1
 8006a8c:	6179      	str	r1, [r7, #20]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	4413      	add	r3, r2
 8006a92:	4a30      	ldr	r2, [pc, #192]	@ (8006b54 <parseDHCPMSG+0x430>)
 8006a94:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8006a96:	4b2f      	ldr	r3, [pc, #188]	@ (8006b54 <parseDHCPMSG+0x430>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	021a      	lsls	r2, r3, #8
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	1c59      	adds	r1, r3, #1
 8006aa0:	6179      	str	r1, [r7, #20]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	4a2b      	ldr	r2, [pc, #172]	@ (8006b54 <parseDHCPMSG+0x430>)
 8006aa8:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8006aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8006b54 <parseDHCPMSG+0x430>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	021a      	lsls	r2, r3, #8
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	1c59      	adds	r1, r3, #1
 8006ab4:	6179      	str	r1, [r7, #20]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	4413      	add	r3, r2
 8006aba:	4a26      	ldr	r2, [pc, #152]	@ (8006b54 <parseDHCPMSG+0x430>)
 8006abc:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 8006abe:	e039      	b.n	8006b34 <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	1c5a      	adds	r2, r3, #1
 8006aca:	617a      	str	r2, [r7, #20]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	1c5a      	adds	r2, r3, #1
 8006ad4:	617a      	str	r2, [r7, #20]
 8006ad6:	781a      	ldrb	r2, [r3, #0]
 8006ad8:	4b1f      	ldr	r3, [pc, #124]	@ (8006b58 <parseDHCPMSG+0x434>)
 8006ada:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	1c5a      	adds	r2, r3, #1
 8006ae0:	617a      	str	r2, [r7, #20]
 8006ae2:	781a      	ldrb	r2, [r3, #0]
 8006ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8006b58 <parseDHCPMSG+0x434>)
 8006ae6:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	1c5a      	adds	r2, r3, #1
 8006aec:	617a      	str	r2, [r7, #20]
 8006aee:	781a      	ldrb	r2, [r3, #0]
 8006af0:	4b19      	ldr	r3, [pc, #100]	@ (8006b58 <parseDHCPMSG+0x434>)
 8006af2:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	1c5a      	adds	r2, r3, #1
 8006af8:	617a      	str	r2, [r7, #20]
 8006afa:	781a      	ldrb	r2, [r3, #0]
 8006afc:	4b16      	ldr	r3, [pc, #88]	@ (8006b58 <parseDHCPMSG+0x434>)
 8006afe:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 8006b00:	793a      	ldrb	r2, [r7, #4]
 8006b02:	4b16      	ldr	r3, [pc, #88]	@ (8006b5c <parseDHCPMSG+0x438>)
 8006b04:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 8006b06:	797a      	ldrb	r2, [r7, #5]
 8006b08:	4b14      	ldr	r3, [pc, #80]	@ (8006b5c <parseDHCPMSG+0x438>)
 8006b0a:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 8006b0c:	79ba      	ldrb	r2, [r7, #6]
 8006b0e:	4b13      	ldr	r3, [pc, #76]	@ (8006b5c <parseDHCPMSG+0x438>)
 8006b10:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 8006b12:	79fa      	ldrb	r2, [r7, #7]
 8006b14:	4b11      	ldr	r3, [pc, #68]	@ (8006b5c <parseDHCPMSG+0x438>)
 8006b16:	70da      	strb	r2, [r3, #3]
   				break;
 8006b18:	e00c      	b.n	8006b34 <parseDHCPMSG+0x410>
   			default :
   				p++;
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	1c5a      	adds	r2, r3, #1
 8006b24:	617a      	str	r2, [r7, #20]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 8006b2a:	7afb      	ldrb	r3, [r7, #11]
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	4413      	add	r3, r2
 8006b30:	617b      	str	r3, [r7, #20]
   				break;
 8006b32:	bf00      	nop
		while ( p < e ) {
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	f4ff ae8a 	bcc.w	8006852 <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 8006b3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	371c      	adds	r7, #28
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd90      	pop	{r4, r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20001218 	.word	0x20001218
 8006b50:	20001220 	.word	0x20001220
 8006b54:	20000058 	.word	0x20000058
 8006b58:	20001208 	.word	0x20001208
 8006b5c:	2000120c 	.word	0x2000120c

08006b60 <DHCP_run>:

uint8_t DHCP_run(void)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;
	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 8006b66:	4b7e      	ldr	r3, [pc, #504]	@ (8006d60 <DHCP_run+0x200>)
 8006b68:	f993 3000 	ldrsb.w	r3, [r3]
 8006b6c:	2b06      	cmp	r3, #6
 8006b6e:	d101      	bne.n	8006b74 <DHCP_run+0x14>
 8006b70:	2305      	movs	r3, #5
 8006b72:	e0f1      	b.n	8006d58 <DHCP_run+0x1f8>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 8006b74:	4b7b      	ldr	r3, [pc, #492]	@ (8006d64 <DHCP_run+0x204>)
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	3308      	adds	r3, #8
 8006b7a:	019b      	lsls	r3, r3, #6
 8006b7c:	3308      	adds	r3, #8
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7fc fd8e 	bl	80036a0 <WIZCHIP_READ>
 8006b84:	4603      	mov	r3, r0
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b22      	cmp	r3, #34	@ 0x22
 8006b8a:	d006      	beq.n	8006b9a <DHCP_run+0x3a>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8006b8c:	4b75      	ldr	r3, [pc, #468]	@ (8006d64 <DHCP_run+0x204>)
 8006b8e:	7818      	ldrb	r0, [r3, #0]
 8006b90:	2300      	movs	r3, #0
 8006b92:	2244      	movs	r2, #68	@ 0x44
 8006b94:	2102      	movs	r1, #2
 8006b96:	f7fc ff53 	bl	8003a40 <socket>

	ret = DHCP_RUNNING;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 8006b9e:	f7ff fdc1 	bl	8006724 <parseDHCPMSG>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	71bb      	strb	r3, [r7, #6]
	switch ( dhcp_state ) {
 8006ba6:	4b6e      	ldr	r3, [pc, #440]	@ (8006d60 <DHCP_run+0x200>)
 8006ba8:	f993 3000 	ldrsb.w	r3, [r3]
 8006bac:	2b04      	cmp	r3, #4
 8006bae:	f200 80cf 	bhi.w	8006d50 <DHCP_run+0x1f0>
 8006bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8006bb8 <DHCP_run+0x58>)
 8006bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb8:	08006bcd 	.word	0x08006bcd
 8006bbc:	08006bf1 	.word	0x08006bf1
 8006bc0:	08006c35 	.word	0x08006c35
 8006bc4:	08006c85 	.word	0x08006c85
 8006bc8:	08006cdf 	.word	0x08006cdf
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 8006bcc:	4b66      	ldr	r3, [pc, #408]	@ (8006d68 <DHCP_run+0x208>)
 8006bce:	2200      	movs	r2, #0
 8006bd0:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 8006bd2:	4b65      	ldr	r3, [pc, #404]	@ (8006d68 <DHCP_run+0x208>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 8006bd8:	4b63      	ldr	r3, [pc, #396]	@ (8006d68 <DHCP_run+0x208>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 8006bde:	4b62      	ldr	r3, [pc, #392]	@ (8006d68 <DHCP_run+0x208>)
 8006be0:	2200      	movs	r2, #0
 8006be2:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 8006be4:	f7fe fffc 	bl	8005be0 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 8006be8:	4b5d      	ldr	r3, [pc, #372]	@ (8006d60 <DHCP_run+0x200>)
 8006bea:	2201      	movs	r2, #1
 8006bec:	701a      	strb	r2, [r3, #0]
   		break;
 8006bee:	e0b2      	b.n	8006d56 <DHCP_run+0x1f6>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 8006bf0:	79bb      	ldrb	r3, [r7, #6]
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d119      	bne.n	8006c2a <DHCP_run+0xca>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 8006bf6:	4b5d      	ldr	r3, [pc, #372]	@ (8006d6c <DHCP_run+0x20c>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	7c1a      	ldrb	r2, [r3, #16]
 8006bfc:	4b5a      	ldr	r3, [pc, #360]	@ (8006d68 <DHCP_run+0x208>)
 8006bfe:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8006c00:	4b5a      	ldr	r3, [pc, #360]	@ (8006d6c <DHCP_run+0x20c>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	7c5a      	ldrb	r2, [r3, #17]
 8006c06:	4b58      	ldr	r3, [pc, #352]	@ (8006d68 <DHCP_run+0x208>)
 8006c08:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 8006c0a:	4b58      	ldr	r3, [pc, #352]	@ (8006d6c <DHCP_run+0x20c>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	7c9a      	ldrb	r2, [r3, #18]
 8006c10:	4b55      	ldr	r3, [pc, #340]	@ (8006d68 <DHCP_run+0x208>)
 8006c12:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8006c14:	4b55      	ldr	r3, [pc, #340]	@ (8006d6c <DHCP_run+0x20c>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	7cda      	ldrb	r2, [r3, #19]
 8006c1a:	4b53      	ldr	r3, [pc, #332]	@ (8006d68 <DHCP_run+0x208>)
 8006c1c:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 8006c1e:	f7ff f9a5 	bl	8005f6c <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 8006c22:	4b4f      	ldr	r3, [pc, #316]	@ (8006d60 <DHCP_run+0x200>)
 8006c24:	2202      	movs	r2, #2
 8006c26:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 8006c28:	e095      	b.n	8006d56 <DHCP_run+0x1f6>
			} else ret = check_DHCP_timeout();
 8006c2a:	f000 f8c1 	bl	8006db0 <check_DHCP_timeout>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	71fb      	strb	r3, [r7, #7]
         break;
 8006c32:	e090      	b.n	8006d56 <DHCP_run+0x1f6>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 8006c34:	79bb      	ldrb	r3, [r7, #6]
 8006c36:	2b05      	cmp	r3, #5
 8006c38:	d116      	bne.n	8006c68 <DHCP_run+0x108>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 8006c3a:	f000 f919 	bl	8006e70 <check_DHCP_leasedIP>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d008      	beq.n	8006c56 <DHCP_run+0xf6>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 8006c44:	4b4a      	ldr	r3, [pc, #296]	@ (8006d70 <DHCP_run+0x210>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4798      	blx	r3
					reset_DHCP_timeout();
 8006c4a:	f000 fa41 	bl	80070d0 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 8006c4e:	4b44      	ldr	r3, [pc, #272]	@ (8006d60 <DHCP_run+0x200>)
 8006c50:	2203      	movs	r2, #3
 8006c52:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 8006c54:	e07f      	b.n	8006d56 <DHCP_run+0x1f6>
					reset_DHCP_timeout();
 8006c56:	f000 fa3b 	bl	80070d0 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 8006c5a:	4b46      	ldr	r3, [pc, #280]	@ (8006d74 <DHCP_run+0x214>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 8006c60:	4b3f      	ldr	r3, [pc, #252]	@ (8006d60 <DHCP_run+0x200>)
 8006c62:	2200      	movs	r2, #0
 8006c64:	701a      	strb	r2, [r3, #0]
		break;
 8006c66:	e076      	b.n	8006d56 <DHCP_run+0x1f6>
			} else if (type == DHCP_NAK) {
 8006c68:	79bb      	ldrb	r3, [r7, #6]
 8006c6a:	2b06      	cmp	r3, #6
 8006c6c:	d105      	bne.n	8006c7a <DHCP_run+0x11a>
				reset_DHCP_timeout();
 8006c6e:	f000 fa2f 	bl	80070d0 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8006c72:	4b3b      	ldr	r3, [pc, #236]	@ (8006d60 <DHCP_run+0x200>)
 8006c74:	2201      	movs	r2, #1
 8006c76:	701a      	strb	r2, [r3, #0]
		break;
 8006c78:	e06d      	b.n	8006d56 <DHCP_run+0x1f6>
			} else ret = check_DHCP_timeout();
 8006c7a:	f000 f899 	bl	8006db0 <check_DHCP_timeout>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	71fb      	strb	r3, [r7, #7]
		break;
 8006c82:	e068      	b.n	8006d56 <DHCP_run+0x1f6>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 8006c84:	2304      	movs	r3, #4
 8006c86:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 8006c88:	4b3b      	ldr	r3, [pc, #236]	@ (8006d78 <DHCP_run+0x218>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c90:	d060      	beq.n	8006d54 <DHCP_run+0x1f4>
 8006c92:	4b39      	ldr	r3, [pc, #228]	@ (8006d78 <DHCP_run+0x218>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	085a      	lsrs	r2, r3, #1
 8006c98:	4b38      	ldr	r3, [pc, #224]	@ (8006d7c <DHCP_run+0x21c>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d259      	bcs.n	8006d54 <DHCP_run+0x1f4>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 8006ca4:	4b30      	ldr	r3, [pc, #192]	@ (8006d68 <DHCP_run+0x208>)
 8006ca6:	781a      	ldrb	r2, [r3, #0]
 8006ca8:	4b35      	ldr	r3, [pc, #212]	@ (8006d80 <DHCP_run+0x220>)
 8006caa:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8006cac:	4b2e      	ldr	r3, [pc, #184]	@ (8006d68 <DHCP_run+0x208>)
 8006cae:	785a      	ldrb	r2, [r3, #1]
 8006cb0:	4b33      	ldr	r3, [pc, #204]	@ (8006d80 <DHCP_run+0x220>)
 8006cb2:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 8006cb4:	4b2c      	ldr	r3, [pc, #176]	@ (8006d68 <DHCP_run+0x208>)
 8006cb6:	789a      	ldrb	r2, [r3, #2]
 8006cb8:	4b31      	ldr	r3, [pc, #196]	@ (8006d80 <DHCP_run+0x220>)
 8006cba:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8006cbc:	4b2a      	ldr	r3, [pc, #168]	@ (8006d68 <DHCP_run+0x208>)
 8006cbe:	78da      	ldrb	r2, [r3, #3]
 8006cc0:	4b2f      	ldr	r3, [pc, #188]	@ (8006d80 <DHCP_run+0x220>)
 8006cc2:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 8006cc4:	4b2f      	ldr	r3, [pc, #188]	@ (8006d84 <DHCP_run+0x224>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	4a2e      	ldr	r2, [pc, #184]	@ (8006d84 <DHCP_run+0x224>)
 8006ccc:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 8006cce:	f7ff f94d 	bl	8005f6c <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 8006cd2:	f000 f9fd 	bl	80070d0 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 8006cd6:	4b22      	ldr	r3, [pc, #136]	@ (8006d60 <DHCP_run+0x200>)
 8006cd8:	2204      	movs	r2, #4
 8006cda:	701a      	strb	r2, [r3, #0]
			}
		break;
 8006cdc:	e03a      	b.n	8006d54 <DHCP_run+0x1f4>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 8006cde:	2304      	movs	r3, #4
 8006ce0:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 8006ce2:	79bb      	ldrb	r3, [r7, #6]
 8006ce4:	2b05      	cmp	r3, #5
 8006ce6:	d125      	bne.n	8006d34 <DHCP_run+0x1d4>
				dhcp_retry_count = 0;
 8006ce8:	4b27      	ldr	r3, [pc, #156]	@ (8006d88 <DHCP_run+0x228>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8006cee:	4b24      	ldr	r3, [pc, #144]	@ (8006d80 <DHCP_run+0x220>)
 8006cf0:	781a      	ldrb	r2, [r3, #0]
 8006cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8006d68 <DHCP_run+0x208>)
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d111      	bne.n	8006d1e <DHCP_run+0x1be>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8006cfa:	4b21      	ldr	r3, [pc, #132]	@ (8006d80 <DHCP_run+0x220>)
 8006cfc:	785a      	ldrb	r2, [r3, #1]
 8006cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8006d68 <DHCP_run+0x208>)
 8006d00:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d10b      	bne.n	8006d1e <DHCP_run+0x1be>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8006d06:	4b1e      	ldr	r3, [pc, #120]	@ (8006d80 <DHCP_run+0x220>)
 8006d08:	789a      	ldrb	r2, [r3, #2]
 8006d0a:	4b17      	ldr	r3, [pc, #92]	@ (8006d68 <DHCP_run+0x208>)
 8006d0c:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d105      	bne.n	8006d1e <DHCP_run+0x1be>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 8006d12:	4b1b      	ldr	r3, [pc, #108]	@ (8006d80 <DHCP_run+0x220>)
 8006d14:	78da      	ldrb	r2, [r3, #3]
 8006d16:	4b14      	ldr	r3, [pc, #80]	@ (8006d68 <DHCP_run+0x208>)
 8006d18:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d004      	beq.n	8006d28 <DHCP_run+0x1c8>
				{
					ret = DHCP_IP_CHANGED;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 8006d22:	4b1a      	ldr	r3, [pc, #104]	@ (8006d8c <DHCP_run+0x22c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 8006d28:	f000 f9d2 	bl	80070d0 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 8006d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8006d60 <DHCP_run+0x200>)
 8006d2e:	2203      	movs	r2, #3
 8006d30:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 8006d32:	e010      	b.n	8006d56 <DHCP_run+0x1f6>
			} else if (type == DHCP_NAK) {
 8006d34:	79bb      	ldrb	r3, [r7, #6]
 8006d36:	2b06      	cmp	r3, #6
 8006d38:	d105      	bne.n	8006d46 <DHCP_run+0x1e6>
				reset_DHCP_timeout();
 8006d3a:	f000 f9c9 	bl	80070d0 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8006d3e:	4b08      	ldr	r3, [pc, #32]	@ (8006d60 <DHCP_run+0x200>)
 8006d40:	2201      	movs	r2, #1
 8006d42:	701a      	strb	r2, [r3, #0]
	   	break;
 8006d44:	e007      	b.n	8006d56 <DHCP_run+0x1f6>
			} else ret = check_DHCP_timeout();
 8006d46:	f000 f833 	bl	8006db0 <check_DHCP_timeout>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	71fb      	strb	r3, [r7, #7]
	   	break;
 8006d4e:	e002      	b.n	8006d56 <DHCP_run+0x1f6>
		default :
   		break;
 8006d50:	bf00      	nop
 8006d52:	e000      	b.n	8006d56 <DHCP_run+0x1f6>
		break;
 8006d54:	bf00      	nop
	}

	return ret;
 8006d56:	79fb      	ldrb	r3, [r7, #7]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3708      	adds	r7, #8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	20001224 	.word	0x20001224
 8006d64:	20001205 	.word	0x20001205
 8006d68:	20001214 	.word	0x20001214
 8006d6c:	20001230 	.word	0x20001230
 8006d70:	20000068 	.word	0x20000068
 8006d74:	20000070 	.word	0x20000070
 8006d78:	20000058 	.word	0x20000058
 8006d7c:	20001228 	.word	0x20001228
 8006d80:	20001210 	.word	0x20001210
 8006d84:	2000122c 	.word	0x2000122c
 8006d88:	20001225 	.word	0x20001225
 8006d8c:	2000006c 	.word	0x2000006c

08006d90 <DHCP_stop>:

void    DHCP_stop(void)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	af00      	add	r7, sp, #0
   close(DHCP_SOCKET);
 8006d94:	4b04      	ldr	r3, [pc, #16]	@ (8006da8 <DHCP_stop+0x18>)
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7fc ff6b 	bl	8003c74 <close>
   dhcp_state = STATE_DHCP_STOP;
 8006d9e:	4b03      	ldr	r3, [pc, #12]	@ (8006dac <DHCP_stop+0x1c>)
 8006da0:	2206      	movs	r2, #6
 8006da2:	701a      	strb	r2, [r3, #0]
}
 8006da4:	bf00      	nop
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	20001205 	.word	0x20001205
 8006dac:	20001224 	.word	0x20001224

08006db0 <check_DHCP_timeout>:

uint8_t check_DHCP_timeout(void)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 8006db6:	2301      	movs	r3, #1
 8006db8:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 8006dba:	4b29      	ldr	r3, [pc, #164]	@ (8006e60 <check_DHCP_timeout+0xb0>)
 8006dbc:	f993 3000 	ldrsb.w	r3, [r3]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	dc2d      	bgt.n	8006e20 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 8006dc4:	4b27      	ldr	r3, [pc, #156]	@ (8006e64 <check_DHCP_timeout+0xb4>)
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	4b27      	ldr	r3, [pc, #156]	@ (8006e68 <check_DHCP_timeout+0xb8>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d242      	bcs.n	8006e56 <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 8006dd0:	4b26      	ldr	r3, [pc, #152]	@ (8006e6c <check_DHCP_timeout+0xbc>)
 8006dd2:	f993 3000 	ldrsb.w	r3, [r3]
 8006dd6:	2b04      	cmp	r3, #4
 8006dd8:	d00c      	beq.n	8006df4 <check_DHCP_timeout+0x44>
 8006dda:	2b04      	cmp	r3, #4
 8006ddc:	dc0d      	bgt.n	8006dfa <check_DHCP_timeout+0x4a>
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d002      	beq.n	8006de8 <check_DHCP_timeout+0x38>
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d003      	beq.n	8006dee <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 8006de6:	e008      	b.n	8006dfa <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 8006de8:	f7fe fefa 	bl	8005be0 <send_DHCP_DISCOVER>
				break;
 8006dec:	e006      	b.n	8006dfc <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8006dee:	f7ff f8bd 	bl	8005f6c <send_DHCP_REQUEST>
				break;
 8006df2:	e003      	b.n	8006dfc <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8006df4:	f7ff f8ba 	bl	8005f6c <send_DHCP_REQUEST>
				break;
 8006df8:	e000      	b.n	8006dfc <check_DHCP_timeout+0x4c>
				break;
 8006dfa:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 8006dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8006e68 <check_DHCP_timeout+0xb8>)
 8006dfe:	2200      	movs	r2, #0
 8006e00:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 8006e02:	4b19      	ldr	r3, [pc, #100]	@ (8006e68 <check_DHCP_timeout+0xb8>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	330a      	adds	r3, #10
 8006e08:	4a16      	ldr	r2, [pc, #88]	@ (8006e64 <check_DHCP_timeout+0xb4>)
 8006e0a:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 8006e0c:	4b14      	ldr	r3, [pc, #80]	@ (8006e60 <check_DHCP_timeout+0xb0>)
 8006e0e:	f993 3000 	ldrsb.w	r3, [r3]
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	3301      	adds	r3, #1
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	b25a      	sxtb	r2, r3
 8006e1a:	4b11      	ldr	r3, [pc, #68]	@ (8006e60 <check_DHCP_timeout+0xb0>)
 8006e1c:	701a      	strb	r2, [r3, #0]
 8006e1e:	e01a      	b.n	8006e56 <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8006e20:	4b12      	ldr	r3, [pc, #72]	@ (8006e6c <check_DHCP_timeout+0xbc>)
 8006e22:	f993 3000 	ldrsb.w	r3, [r3]
 8006e26:	2b04      	cmp	r3, #4
 8006e28:	d00c      	beq.n	8006e44 <check_DHCP_timeout+0x94>
 8006e2a:	2b04      	cmp	r3, #4
 8006e2c:	dc10      	bgt.n	8006e50 <check_DHCP_timeout+0xa0>
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d002      	beq.n	8006e38 <check_DHCP_timeout+0x88>
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d006      	beq.n	8006e44 <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 8006e36:	e00b      	b.n	8006e50 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 8006e38:	4b0c      	ldr	r3, [pc, #48]	@ (8006e6c <check_DHCP_timeout+0xbc>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	71fb      	strb	r3, [r7, #7]
				break;
 8006e42:	e006      	b.n	8006e52 <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 8006e44:	f7fe fecc 	bl	8005be0 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 8006e48:	4b08      	ldr	r3, [pc, #32]	@ (8006e6c <check_DHCP_timeout+0xbc>)
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	701a      	strb	r2, [r3, #0]
				break;
 8006e4e:	e000      	b.n	8006e52 <check_DHCP_timeout+0xa2>
				break;
 8006e50:	bf00      	nop
		}
		reset_DHCP_timeout();
 8006e52:	f000 f93d 	bl	80070d0 <reset_DHCP_timeout>
	}
	return ret;
 8006e56:	79fb      	ldrb	r3, [r7, #7]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3708      	adds	r7, #8
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	20001225 	.word	0x20001225
 8006e64:	2000005c 	.word	0x2000005c
 8006e68:	20001228 	.word	0x20001228
 8006e6c:	20001224 	.word	0x20001224

08006e70 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 8006e76:	201e      	movs	r0, #30
 8006e78:	f7fc fc12 	bl	80036a0 <WIZCHIP_READ>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 8006e80:	2103      	movs	r1, #3
 8006e82:	201e      	movs	r0, #30
 8006e84:	f7fc fbe2 	bl	800364c <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 8006e88:	4b13      	ldr	r3, [pc, #76]	@ (8006ed8 <check_DHCP_leasedIP+0x68>)
 8006e8a:	7818      	ldrb	r0, [r3, #0]
 8006e8c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	4b12      	ldr	r3, [pc, #72]	@ (8006edc <check_DHCP_leasedIP+0x6c>)
 8006e94:	2211      	movs	r2, #17
 8006e96:	4912      	ldr	r1, [pc, #72]	@ (8006ee0 <check_DHCP_leasedIP+0x70>)
 8006e98:	f7fd fb54 	bl	8004544 <sendto>
 8006e9c:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 8006e9e:	79fb      	ldrb	r3, [r7, #7]
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	201e      	movs	r0, #30
 8006ea6:	f7fc fbd1 	bl	800364c <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	f113 0f0d 	cmn.w	r3, #13
 8006eb0:	d101      	bne.n	8006eb6 <check_DHCP_leasedIP+0x46>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e00c      	b.n	8006ed0 <check_DHCP_leasedIP+0x60>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 8006eb6:	f7ff fae3 	bl	8006480 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 8006eba:	4b0a      	ldr	r3, [pc, #40]	@ (8006ee4 <check_DHCP_leasedIP+0x74>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 8006ec0:	bf00      	nop
 8006ec2:	4b08      	ldr	r3, [pc, #32]	@ (8006ee4 <check_DHCP_leasedIP+0x74>)
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d9f9      	bls.n	8006ec2 <check_DHCP_leasedIP+0x52>

		return 0;
 8006ece:	2300      	movs	r3, #0
	}
}	
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	20001205 	.word	0x20001205
 8006edc:	20001214 	.word	0x20001214
 8006ee0:	080085e8 	.word	0x080085e8
 8006ee4:	20001228 	.word	0x20001228

08006ee8 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	4603      	mov	r3, r0
 8006ef0:	6039      	str	r1, [r7, #0]
 8006ef2:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 8006ef8:	2008      	movs	r0, #8
 8006efa:	f7fc fbd1 	bl	80036a0 <WIZCHIP_READ>
 8006efe:	4603      	mov	r3, r0
 8006f00:	0a1b      	lsrs	r3, r3, #8
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	4b6c      	ldr	r3, [pc, #432]	@ (80070b8 <DHCP_init+0x1d0>)
 8006f08:	701a      	strb	r2, [r3, #0]
 8006f0a:	2008      	movs	r0, #8
 8006f0c:	f7fc fbc8 	bl	80036a0 <WIZCHIP_READ>
 8006f10:	4603      	mov	r3, r0
 8006f12:	b2da      	uxtb	r2, r3
 8006f14:	4b68      	ldr	r3, [pc, #416]	@ (80070b8 <DHCP_init+0x1d0>)
 8006f16:	705a      	strb	r2, [r3, #1]
 8006f18:	200a      	movs	r0, #10
 8006f1a:	f7fc fbc1 	bl	80036a0 <WIZCHIP_READ>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	0a1b      	lsrs	r3, r3, #8
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	b2da      	uxtb	r2, r3
 8006f26:	4b64      	ldr	r3, [pc, #400]	@ (80070b8 <DHCP_init+0x1d0>)
 8006f28:	709a      	strb	r2, [r3, #2]
 8006f2a:	200a      	movs	r0, #10
 8006f2c:	f7fc fbb8 	bl	80036a0 <WIZCHIP_READ>
 8006f30:	4603      	mov	r3, r0
 8006f32:	b2da      	uxtb	r2, r3
 8006f34:	4b60      	ldr	r3, [pc, #384]	@ (80070b8 <DHCP_init+0x1d0>)
 8006f36:	70da      	strb	r2, [r3, #3]
 8006f38:	200c      	movs	r0, #12
 8006f3a:	f7fc fbb1 	bl	80036a0 <WIZCHIP_READ>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	0a1b      	lsrs	r3, r3, #8
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	b2da      	uxtb	r2, r3
 8006f46:	4b5c      	ldr	r3, [pc, #368]	@ (80070b8 <DHCP_init+0x1d0>)
 8006f48:	711a      	strb	r2, [r3, #4]
 8006f4a:	200c      	movs	r0, #12
 8006f4c:	f7fc fba8 	bl	80036a0 <WIZCHIP_READ>
 8006f50:	4603      	mov	r3, r0
 8006f52:	b2da      	uxtb	r2, r3
 8006f54:	4b58      	ldr	r3, [pc, #352]	@ (80070b8 <DHCP_init+0x1d0>)
 8006f56:	715a      	strb	r2, [r3, #5]
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 8006f58:	4b57      	ldr	r3, [pc, #348]	@ (80070b8 <DHCP_init+0x1d0>)
 8006f5a:	781a      	ldrb	r2, [r3, #0]
 8006f5c:	4b56      	ldr	r3, [pc, #344]	@ (80070b8 <DHCP_init+0x1d0>)
 8006f5e:	785b      	ldrb	r3, [r3, #1]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	b2da      	uxtb	r2, r3
 8006f64:	4b54      	ldr	r3, [pc, #336]	@ (80070b8 <DHCP_init+0x1d0>)
 8006f66:	789b      	ldrb	r3, [r3, #2]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	4b52      	ldr	r3, [pc, #328]	@ (80070b8 <DHCP_init+0x1d0>)
 8006f6e:	78db      	ldrb	r3, [r3, #3]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	b2da      	uxtb	r2, r3
 8006f74:	4b50      	ldr	r3, [pc, #320]	@ (80070b8 <DHCP_init+0x1d0>)
 8006f76:	791b      	ldrb	r3, [r3, #4]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	b2da      	uxtb	r2, r3
 8006f7c:	4b4e      	ldr	r3, [pc, #312]	@ (80070b8 <DHCP_init+0x1d0>)
 8006f7e:	795b      	ldrb	r3, [r3, #5]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d135      	bne.n	8006ff4 <DHCP_init+0x10c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 8006f88:	4b4b      	ldr	r3, [pc, #300]	@ (80070b8 <DHCP_init+0x1d0>)
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 8006f8e:	4b4a      	ldr	r3, [pc, #296]	@ (80070b8 <DHCP_init+0x1d0>)
 8006f90:	2208      	movs	r2, #8
 8006f92:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 8006f94:	4b48      	ldr	r3, [pc, #288]	@ (80070b8 <DHCP_init+0x1d0>)
 8006f96:	22dc      	movs	r2, #220	@ 0xdc
 8006f98:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 8006f9a:	4b47      	ldr	r3, [pc, #284]	@ (80070b8 <DHCP_init+0x1d0>)
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8006fa0:	4b45      	ldr	r3, [pc, #276]	@ (80070b8 <DHCP_init+0x1d0>)
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 8006fa6:	4b44      	ldr	r3, [pc, #272]	@ (80070b8 <DHCP_init+0x1d0>)
 8006fa8:	2200      	movs	r2, #0
 8006faa:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 8006fac:	4b42      	ldr	r3, [pc, #264]	@ (80070b8 <DHCP_init+0x1d0>)
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	021b      	lsls	r3, r3, #8
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	4a40      	ldr	r2, [pc, #256]	@ (80070b8 <DHCP_init+0x1d0>)
 8006fb6:	7852      	ldrb	r2, [r2, #1]
 8006fb8:	4413      	add	r3, r2
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	2008      	movs	r0, #8
 8006fc0:	f7fc fb44 	bl	800364c <WIZCHIP_WRITE>
 8006fc4:	4b3c      	ldr	r3, [pc, #240]	@ (80070b8 <DHCP_init+0x1d0>)
 8006fc6:	789b      	ldrb	r3, [r3, #2]
 8006fc8:	021b      	lsls	r3, r3, #8
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	4a3a      	ldr	r2, [pc, #232]	@ (80070b8 <DHCP_init+0x1d0>)
 8006fce:	78d2      	ldrb	r2, [r2, #3]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	200a      	movs	r0, #10
 8006fd8:	f7fc fb38 	bl	800364c <WIZCHIP_WRITE>
 8006fdc:	4b36      	ldr	r3, [pc, #216]	@ (80070b8 <DHCP_init+0x1d0>)
 8006fde:	791b      	ldrb	r3, [r3, #4]
 8006fe0:	021b      	lsls	r3, r3, #8
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	4a34      	ldr	r2, [pc, #208]	@ (80070b8 <DHCP_init+0x1d0>)
 8006fe6:	7952      	ldrb	r2, [r2, #5]
 8006fe8:	4413      	add	r3, r2
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	4619      	mov	r1, r3
 8006fee:	200c      	movs	r0, #12
 8006ff0:	f7fc fb2c 	bl	800364c <WIZCHIP_WRITE>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 8006ff4:	4a31      	ldr	r2, [pc, #196]	@ (80070bc <DHCP_init+0x1d4>)
 8006ff6:	79fb      	ldrb	r3, [r7, #7]
 8006ff8:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 8006ffa:	4a31      	ldr	r2, [pc, #196]	@ (80070c0 <DHCP_init+0x1d8>)
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 8007000:	4b30      	ldr	r3, [pc, #192]	@ (80070c4 <DHCP_init+0x1dc>)
 8007002:	4a31      	ldr	r2, [pc, #196]	@ (80070c8 <DHCP_init+0x1e0>)
 8007004:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 8007006:	4b2c      	ldr	r3, [pc, #176]	@ (80070b8 <DHCP_init+0x1d0>)
 8007008:	78db      	ldrb	r3, [r3, #3]
 800700a:	461a      	mov	r2, r3
 800700c:	4b2d      	ldr	r3, [pc, #180]	@ (80070c4 <DHCP_init+0x1dc>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4413      	add	r3, r2
 8007012:	4a2c      	ldr	r2, [pc, #176]	@ (80070c4 <DHCP_init+0x1dc>)
 8007014:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 8007016:	4b28      	ldr	r3, [pc, #160]	@ (80070b8 <DHCP_init+0x1d0>)
 8007018:	791b      	ldrb	r3, [r3, #4]
 800701a:	461a      	mov	r2, r3
 800701c:	4b29      	ldr	r3, [pc, #164]	@ (80070c4 <DHCP_init+0x1dc>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4413      	add	r3, r2
 8007022:	4a28      	ldr	r2, [pc, #160]	@ (80070c4 <DHCP_init+0x1dc>)
 8007024:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 8007026:	4b24      	ldr	r3, [pc, #144]	@ (80070b8 <DHCP_init+0x1d0>)
 8007028:	795b      	ldrb	r3, [r3, #5]
 800702a:	461a      	mov	r2, r3
 800702c:	4b25      	ldr	r3, [pc, #148]	@ (80070c4 <DHCP_init+0x1dc>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4413      	add	r3, r2
 8007032:	4a24      	ldr	r2, [pc, #144]	@ (80070c4 <DHCP_init+0x1dc>)
 8007034:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 8007036:	4b20      	ldr	r3, [pc, #128]	@ (80070b8 <DHCP_init+0x1d0>)
 8007038:	78da      	ldrb	r2, [r3, #3]
 800703a:	4b1f      	ldr	r3, [pc, #124]	@ (80070b8 <DHCP_init+0x1d0>)
 800703c:	791b      	ldrb	r3, [r3, #4]
 800703e:	4053      	eors	r3, r2
 8007040:	b2da      	uxtb	r2, r3
 8007042:	4b1d      	ldr	r3, [pc, #116]	@ (80070b8 <DHCP_init+0x1d0>)
 8007044:	795b      	ldrb	r3, [r3, #5]
 8007046:	4053      	eors	r3, r2
 8007048:	b2db      	uxtb	r3, r3
 800704a:	461a      	mov	r2, r3
 800704c:	4b1d      	ldr	r3, [pc, #116]	@ (80070c4 <DHCP_init+0x1dc>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4413      	add	r3, r2
 8007052:	4a1c      	ldr	r2, [pc, #112]	@ (80070c4 <DHCP_init+0x1dc>)
 8007054:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 8007056:	7b3b      	ldrb	r3, [r7, #12]
 8007058:	021b      	lsls	r3, r3, #8
 800705a:	b29b      	uxth	r3, r3
 800705c:	7b7a      	ldrb	r2, [r7, #13]
 800705e:	4413      	add	r3, r2
 8007060:	b29b      	uxth	r3, r3
 8007062:	4619      	mov	r1, r3
 8007064:	2018      	movs	r0, #24
 8007066:	f7fc faf1 	bl	800364c <WIZCHIP_WRITE>
 800706a:	7bbb      	ldrb	r3, [r7, #14]
 800706c:	021b      	lsls	r3, r3, #8
 800706e:	b29b      	uxth	r3, r3
 8007070:	7bfa      	ldrb	r2, [r7, #15]
 8007072:	4413      	add	r3, r2
 8007074:	b29b      	uxth	r3, r3
 8007076:	4619      	mov	r1, r3
 8007078:	201a      	movs	r0, #26
 800707a:	f7fc fae7 	bl	800364c <WIZCHIP_WRITE>
	setGAR(zeroip);
 800707e:	7b3b      	ldrb	r3, [r7, #12]
 8007080:	021b      	lsls	r3, r3, #8
 8007082:	b29b      	uxth	r3, r3
 8007084:	7b7a      	ldrb	r2, [r7, #13]
 8007086:	4413      	add	r3, r2
 8007088:	b29b      	uxth	r3, r3
 800708a:	4619      	mov	r1, r3
 800708c:	2010      	movs	r0, #16
 800708e:	f7fc fadd 	bl	800364c <WIZCHIP_WRITE>
 8007092:	7bbb      	ldrb	r3, [r7, #14]
 8007094:	021b      	lsls	r3, r3, #8
 8007096:	b29b      	uxth	r3, r3
 8007098:	7bfa      	ldrb	r2, [r7, #15]
 800709a:	4413      	add	r3, r2
 800709c:	b29b      	uxth	r3, r3
 800709e:	4619      	mov	r1, r3
 80070a0:	2012      	movs	r0, #18
 80070a2:	f7fc fad3 	bl	800364c <WIZCHIP_WRITE>

	reset_DHCP_timeout();
 80070a6:	f000 f813 	bl	80070d0 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 80070aa:	4b08      	ldr	r3, [pc, #32]	@ (80070cc <DHCP_init+0x1e4>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	701a      	strb	r2, [r3, #0]
}
 80070b0:	bf00      	nop
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	20001234 	.word	0x20001234
 80070bc:	20001205 	.word	0x20001205
 80070c0:	20001230 	.word	0x20001230
 80070c4:	2000122c 	.word	0x2000122c
 80070c8:	12345678 	.word	0x12345678
 80070cc:	20001224 	.word	0x20001224

080070d0 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 80070d0:	b480      	push	{r7}
 80070d2:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 80070d4:	4b06      	ldr	r3, [pc, #24]	@ (80070f0 <reset_DHCP_timeout+0x20>)
 80070d6:	2200      	movs	r2, #0
 80070d8:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 80070da:	4b06      	ldr	r3, [pc, #24]	@ (80070f4 <reset_DHCP_timeout+0x24>)
 80070dc:	220a      	movs	r2, #10
 80070de:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 80070e0:	4b05      	ldr	r3, [pc, #20]	@ (80070f8 <reset_DHCP_timeout+0x28>)
 80070e2:	2200      	movs	r2, #0
 80070e4:	701a      	strb	r2, [r3, #0]
}
 80070e6:	bf00      	nop
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	20001228 	.word	0x20001228
 80070f4:	2000005c 	.word	0x2000005c
 80070f8:	20001225 	.word	0x20001225

080070fc <DHCP_time_handler>:

void DHCP_time_handler(void)
{
 80070fc:	b480      	push	{r7}
 80070fe:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 8007100:	4b04      	ldr	r3, [pc, #16]	@ (8007114 <DHCP_time_handler+0x18>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	3301      	adds	r3, #1
 8007106:	4a03      	ldr	r2, [pc, #12]	@ (8007114 <DHCP_time_handler+0x18>)
 8007108:	6013      	str	r3, [r2, #0]
}
 800710a:	bf00      	nop
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	20001228 	.word	0x20001228

08007118 <getIPfromDHCP>:

void getIPfromDHCP(uint8_t* ip)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 8007120:	4b0c      	ldr	r3, [pc, #48]	@ (8007154 <getIPfromDHCP+0x3c>)
 8007122:	781a      	ldrb	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	3301      	adds	r3, #1
 800712c:	4a09      	ldr	r2, [pc, #36]	@ (8007154 <getIPfromDHCP+0x3c>)
 800712e:	7852      	ldrb	r2, [r2, #1]
 8007130:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	3302      	adds	r3, #2
 8007136:	4a07      	ldr	r2, [pc, #28]	@ (8007154 <getIPfromDHCP+0x3c>)
 8007138:	7892      	ldrb	r2, [r2, #2]
 800713a:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	3303      	adds	r3, #3
 8007140:	4a04      	ldr	r2, [pc, #16]	@ (8007154 <getIPfromDHCP+0x3c>)
 8007142:	78d2      	ldrb	r2, [r2, #3]
 8007144:	701a      	strb	r2, [r3, #0]
}
 8007146:	bf00      	nop
 8007148:	370c      	adds	r7, #12
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	20001214 	.word	0x20001214

08007158 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 8007160:	4b0c      	ldr	r3, [pc, #48]	@ (8007194 <getGWfromDHCP+0x3c>)
 8007162:	781a      	ldrb	r2, [r3, #0]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	3301      	adds	r3, #1
 800716c:	4a09      	ldr	r2, [pc, #36]	@ (8007194 <getGWfromDHCP+0x3c>)
 800716e:	7852      	ldrb	r2, [r2, #1]
 8007170:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	3302      	adds	r3, #2
 8007176:	4a07      	ldr	r2, [pc, #28]	@ (8007194 <getGWfromDHCP+0x3c>)
 8007178:	7892      	ldrb	r2, [r2, #2]
 800717a:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	3303      	adds	r3, #3
 8007180:	4a04      	ldr	r2, [pc, #16]	@ (8007194 <getGWfromDHCP+0x3c>)
 8007182:	78d2      	ldrb	r2, [r2, #3]
 8007184:	701a      	strb	r2, [r3, #0]
}
 8007186:	bf00      	nop
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	20001218 	.word	0x20001218

08007198 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 80071a0:	4b0c      	ldr	r3, [pc, #48]	@ (80071d4 <getSNfromDHCP+0x3c>)
 80071a2:	781a      	ldrb	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	3301      	adds	r3, #1
 80071ac:	4a09      	ldr	r2, [pc, #36]	@ (80071d4 <getSNfromDHCP+0x3c>)
 80071ae:	7852      	ldrb	r2, [r2, #1]
 80071b0:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	3302      	adds	r3, #2
 80071b6:	4a07      	ldr	r2, [pc, #28]	@ (80071d4 <getSNfromDHCP+0x3c>)
 80071b8:	7892      	ldrb	r2, [r2, #2]
 80071ba:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	3303      	adds	r3, #3
 80071c0:	4a04      	ldr	r2, [pc, #16]	@ (80071d4 <getSNfromDHCP+0x3c>)
 80071c2:	78d2      	ldrb	r2, [r2, #3]
 80071c4:	701a      	strb	r2, [r3, #0]
}
 80071c6:	bf00      	nop
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	2000121c 	.word	0x2000121c

080071d8 <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_dns[0];
 80071e0:	4b0c      	ldr	r3, [pc, #48]	@ (8007214 <getDNSfromDHCP+0x3c>)
 80071e2:	781a      	ldrb	r2, [r3, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_dns[1];
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	3301      	adds	r3, #1
 80071ec:	4a09      	ldr	r2, [pc, #36]	@ (8007214 <getDNSfromDHCP+0x3c>)
 80071ee:	7852      	ldrb	r2, [r2, #1]
 80071f0:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_dns[2];
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	3302      	adds	r3, #2
 80071f6:	4a07      	ldr	r2, [pc, #28]	@ (8007214 <getDNSfromDHCP+0x3c>)
 80071f8:	7892      	ldrb	r2, [r2, #2]
 80071fa:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_dns[3];         
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	3303      	adds	r3, #3
 8007200:	4a04      	ldr	r2, [pc, #16]	@ (8007214 <getDNSfromDHCP+0x3c>)
 8007202:	78d2      	ldrb	r2, [r2, #3]
 8007204:	701a      	strb	r2, [r3, #0]
}
 8007206:	bf00      	nop
 8007208:	370c      	adds	r7, #12
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	20001220 	.word	0x20001220

08007218 <getDHCPLeasetime>:

uint32_t getDHCPLeasetime(void)
{
 8007218:	b480      	push	{r7}
 800721a:	af00      	add	r7, sp, #0
	return dhcp_lease_time;
 800721c:	4b03      	ldr	r3, [pc, #12]	@ (800722c <getDHCPLeasetime+0x14>)
 800721e:	681b      	ldr	r3, [r3, #0]
}
 8007220:	4618      	mov	r0, r3
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	20000058 	.word	0x20000058

08007230 <NibbleToHex>:

char NibbleToHex(uint8_t nibble)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	4603      	mov	r3, r0
 8007238:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 800723a:	79fb      	ldrb	r3, [r7, #7]
 800723c:	f003 030f 	and.w	r3, r3, #15
 8007240:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 8007242:	79fb      	ldrb	r3, [r7, #7]
 8007244:	2b09      	cmp	r3, #9
 8007246:	d803      	bhi.n	8007250 <NibbleToHex+0x20>
    return nibble + '0';
 8007248:	79fb      	ldrb	r3, [r7, #7]
 800724a:	3330      	adds	r3, #48	@ 0x30
 800724c:	b2db      	uxtb	r3, r3
 800724e:	e002      	b.n	8007256 <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 8007250:	79fb      	ldrb	r3, [r7, #7]
 8007252:	3337      	adds	r3, #55	@ 0x37
 8007254:	b2db      	uxtb	r3, r3
}
 8007256:	4618      	mov	r0, r3
 8007258:	370c      	adds	r7, #12
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
	...

08007264 <wizchip_select>:
 * ----------------------------------------------------------------------------------------------------
 * Functions
 * ----------------------------------------------------------------------------------------------------
 */
static inline void wizchip_select(void)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8007268:	2200      	movs	r2, #0
 800726a:	2180      	movs	r1, #128	@ 0x80
 800726c:	4802      	ldr	r0, [pc, #8]	@ (8007278 <wizchip_select+0x14>)
 800726e:	f7fa f9df 	bl	8001630 <HAL_GPIO_WritePin>
}
 8007272:	bf00      	nop
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	40020c00 	.word	0x40020c00

0800727c <wizchip_deselect>:

static inline void wizchip_deselect(void)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8007280:	2201      	movs	r2, #1
 8007282:	2180      	movs	r1, #128	@ 0x80
 8007284:	4802      	ldr	r0, [pc, #8]	@ (8007290 <wizchip_deselect+0x14>)
 8007286:	f7fa f9d3 	bl	8001630 <HAL_GPIO_WritePin>
}
 800728a:	bf00      	nop
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	40020c00 	.word	0x40020c00

08007294 <wizchip_read>:

static inline iodata_t wizchip_read(uint32_t addr)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  data = _W5300_DATA(addr);
  //wizchip_deselect();
  
  return data;
#else
  return _W5300_DATA(addr);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f103 43c0 	add.w	r3, r3, #1610612736	@ 0x60000000
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	b2db      	uxtb	r3, r3
#endif
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <wizchip_write>:

static inline void wizchip_write(uint32_t addr, iodata_t tx_data)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b083      	sub	sp, #12
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	460b      	mov	r3, r1
 80072bc:	70fb      	strb	r3, [r7, #3]
#if 0
  //wizchip_select();
  _W5300_DATA(addr) = tx_data;
  //wizchip_deselect();
#else
  _W5300_DATA(addr) = tx_data;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f103 43c0 	add.w	r3, r3, #1610612736	@ 0x60000000
 80072c4:	461a      	mov	r2, r3
 80072c6:	78fb      	ldrb	r3, [r7, #3]
 80072c8:	7013      	strb	r3, [r2, #0]
#endif
  

}
 80072ca:	bf00      	nop
 80072cc:	370c      	adds	r7, #12
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
	...

080072d8 <wizchip_initialize>:

void wizchip_initialize(void)
{
 80072d8:	b590      	push	{r4, r7, lr}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
  /* Deselect the FLASH : chip select high */
  wizchip_deselect();
 80072de:	f7ff ffcd 	bl	800727c <wizchip_deselect>

  /* CS function register */
  reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 80072e2:	490e      	ldr	r1, [pc, #56]	@ (800731c <wizchip_initialize+0x44>)
 80072e4:	480e      	ldr	r0, [pc, #56]	@ (8007320 <wizchip_initialize+0x48>)
 80072e6:	f7fd fdcf 	bl	8004e88 <reg_wizchip_cs_cbfunc>

  /* BUS function register */
  reg_wizchip_bus_cbfunc(wizchip_read, wizchip_write);
 80072ea:	490e      	ldr	r1, [pc, #56]	@ (8007324 <wizchip_initialize+0x4c>)
 80072ec:	480e      	ldr	r0, [pc, #56]	@ (8007328 <wizchip_initialize+0x50>)
 80072ee:	f7fd fdf1 	bl	8004ed4 <reg_wizchip_bus_cbfunc>

  /* W5x00 initialize */
#if (_WIZCHIP_ == W5100S)
  uint8_t memsize[2][4] = {{2, 2, 2, 2}, {2, 2, 2, 2}};
#elif (_WIZCHIP_ == W5300)
  uint8_t memsize[2][8] = {{8, 8, 8, 8, 8, 8, 8, 8}, {8, 8, 8, 8, 8, 8, 8, 8}};
 80072f2:	4b0e      	ldr	r3, [pc, #56]	@ (800732c <wizchip_initialize+0x54>)
 80072f4:	463c      	mov	r4, r7
 80072f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80072f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#elif (_WIZCHIP_ == W5500)
  uint8_t memsize[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2}};
#endif

  if (ctlwizchip(CW_INIT_WIZCHIP, (void *)memsize) == -1)
 80072fc:	463b      	mov	r3, r7
 80072fe:	4619      	mov	r1, r3
 8007300:	2001      	movs	r0, #1
 8007302:	f7fd fe13 	bl	8004f2c <ctlwizchip>
 8007306:	4603      	mov	r3, r0
 8007308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800730c:	d102      	bne.n	8007314 <wizchip_initialize+0x3c>
  {
    printf(" W5x00 initialized fail\n");
 800730e:	4808      	ldr	r0, [pc, #32]	@ (8007330 <wizchip_initialize+0x58>)
 8007310:	f000 fa08 	bl	8007724 <puts>

      return;
    }
  } while (temp == PHY_LINK_OFF);
#endif
}
 8007314:	3714      	adds	r7, #20
 8007316:	46bd      	mov	sp, r7
 8007318:	bd90      	pop	{r4, r7, pc}
 800731a:	bf00      	nop
 800731c:	0800727d 	.word	0x0800727d
 8007320:	08007265 	.word	0x08007265
 8007324:	080072b3 	.word	0x080072b3
 8007328:	08007295 	.word	0x08007295
 800732c:	08008614 	.word	0x08008614
 8007330:	080085fc 	.word	0x080085fc

08007334 <wizchip_reset>:

void wizchip_reset(void)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8007338:	2200      	movs	r2, #0
 800733a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800733e:	4808      	ldr	r0, [pc, #32]	@ (8007360 <wizchip_reset+0x2c>)
 8007340:	f7fa f976 	bl	8001630 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8007344:	2064      	movs	r0, #100	@ 0x64
 8007346:	f7f9 fe91 	bl	800106c <HAL_Delay>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800734a:	2201      	movs	r2, #1
 800734c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007350:	4803      	ldr	r0, [pc, #12]	@ (8007360 <wizchip_reset+0x2c>)
 8007352:	f7fa f96d 	bl	8001630 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8007356:	2064      	movs	r0, #100	@ 0x64
 8007358:	f7f9 fe88 	bl	800106c <HAL_Delay>
}
 800735c:	bf00      	nop
 800735e:	bd80      	pop	{r7, pc}
 8007360:	40020800 	.word	0x40020800

08007364 <wizchip_check>:

void wizchip_check(void)
{
 8007364:	b480      	push	{r7}
 8007366:	af00      	add	r7, sp, #0

    while (1)
      ;
  }
#endif
}
 8007368:	bf00      	nop
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr

08007372 <wizchip_network_initialize>:
 * ----------------------------------------------------------------------------------------------------
 * Functions
 * ----------------------------------------------------------------------------------------------------
 */
void wizchip_network_initialize(wiz_NetInfo *net_info)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b082      	sub	sp, #8
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
  wizchip_initialize();
 800737a:	f7ff ffad 	bl	80072d8 <wizchip_initialize>
  wizchip_reset();
 800737e:	f7ff ffd9 	bl	8007334 <wizchip_reset>
  wizchip_check();
 8007382:	f7ff ffef 	bl	8007364 <wizchip_check>

  ctlnetwork(CN_SET_NETINFO, (void *)net_info);
 8007386:	6879      	ldr	r1, [r7, #4]
 8007388:	2000      	movs	r0, #0
 800738a:	f7fd fe4b 	bl	8005024 <ctlnetwork>
}
 800738e:	bf00      	nop
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
	...

08007398 <wizchip_network_information>:

void wizchip_network_information(wiz_NetInfo *net_info)
{
 8007398:	b5b0      	push	{r4, r5, r7, lr}
 800739a:	b088      	sub	sp, #32
 800739c:	af04      	add	r7, sp, #16
 800739e:	6078      	str	r0, [r7, #4]
  uint8_t tmp_str[8] = {
 80073a0:	2300      	movs	r3, #0
 80073a2:	60bb      	str	r3, [r7, #8]
 80073a4:	2300      	movs	r3, #0
 80073a6:	60fb      	str	r3, [r7, #12]
      0,
  };

  ctlnetwork(CN_GET_NETINFO, (void *)net_info);
 80073a8:	6879      	ldr	r1, [r7, #4]
 80073aa:	2001      	movs	r0, #1
 80073ac:	f7fd fe3a 	bl	8005024 <ctlnetwork>
  ctlwizchip(CW_GET_ID, (void *)tmp_str);
 80073b0:	f107 0308 	add.w	r3, r7, #8
 80073b4:	4619      	mov	r1, r3
 80073b6:	2008      	movs	r0, #8
 80073b8:	f7fd fdb8 	bl	8004f2c <ctlwizchip>

  if (net_info->dhcp == NETINFO_DHCP)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	7d9b      	ldrb	r3, [r3, #22]
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d109      	bne.n	80073d8 <wizchip_network_information+0x40>
  {
    printf("====================================================================================================\n");
 80073c4:	4839      	ldr	r0, [pc, #228]	@ (80074ac <wizchip_network_information+0x114>)
 80073c6:	f000 f9ad 	bl	8007724 <puts>
    printf(" %s network configuration : DHCP\n\n", (char *)tmp_str);
 80073ca:	f107 0308 	add.w	r3, r7, #8
 80073ce:	4619      	mov	r1, r3
 80073d0:	4837      	ldr	r0, [pc, #220]	@ (80074b0 <wizchip_network_information+0x118>)
 80073d2:	f000 f93f 	bl	8007654 <iprintf>
 80073d6:	e008      	b.n	80073ea <wizchip_network_information+0x52>
  }
  else
  {
    printf("====================================================================================================\n");
 80073d8:	4834      	ldr	r0, [pc, #208]	@ (80074ac <wizchip_network_information+0x114>)
 80073da:	f000 f9a3 	bl	8007724 <puts>
    printf(" %s network configuration : static\n\n", (char *)tmp_str);
 80073de:	f107 0308 	add.w	r3, r7, #8
 80073e2:	4619      	mov	r1, r3
 80073e4:	4833      	ldr	r0, [pc, #204]	@ (80074b4 <wizchip_network_information+0x11c>)
 80073e6:	f000 f935 	bl	8007654 <iprintf>
  }

  printf(" MAC         : %02X:%02X:%02X:%02X:%02X:%02X\n", net_info->mac[0], net_info->mac[1], net_info->mac[2], net_info->mac[3], net_info->mac[4], net_info->mac[5]);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	4618      	mov	r0, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	785b      	ldrb	r3, [r3, #1]
 80073f4:	461c      	mov	r4, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	789b      	ldrb	r3, [r3, #2]
 80073fa:	461d      	mov	r5, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	78db      	ldrb	r3, [r3, #3]
 8007400:	461a      	mov	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	791b      	ldrb	r3, [r3, #4]
 8007406:	4619      	mov	r1, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	795b      	ldrb	r3, [r3, #5]
 800740c:	9302      	str	r3, [sp, #8]
 800740e:	9101      	str	r1, [sp, #4]
 8007410:	9200      	str	r2, [sp, #0]
 8007412:	462b      	mov	r3, r5
 8007414:	4622      	mov	r2, r4
 8007416:	4601      	mov	r1, r0
 8007418:	4827      	ldr	r0, [pc, #156]	@ (80074b8 <wizchip_network_information+0x120>)
 800741a:	f000 f91b 	bl	8007654 <iprintf>
  printf(" IP          : %d.%d.%d.%d\n", net_info->ip[0], net_info->ip[1], net_info->ip[2], net_info->ip[3]);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	799b      	ldrb	r3, [r3, #6]
 8007422:	4619      	mov	r1, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	79db      	ldrb	r3, [r3, #7]
 8007428:	461a      	mov	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	7a1b      	ldrb	r3, [r3, #8]
 800742e:	4618      	mov	r0, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	7a5b      	ldrb	r3, [r3, #9]
 8007434:	9300      	str	r3, [sp, #0]
 8007436:	4603      	mov	r3, r0
 8007438:	4820      	ldr	r0, [pc, #128]	@ (80074bc <wizchip_network_information+0x124>)
 800743a:	f000 f90b 	bl	8007654 <iprintf>
  printf(" Subnet Mask : %d.%d.%d.%d\n", net_info->sn[0], net_info->sn[1], net_info->sn[2], net_info->sn[3]);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	7a9b      	ldrb	r3, [r3, #10]
 8007442:	4619      	mov	r1, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	7adb      	ldrb	r3, [r3, #11]
 8007448:	461a      	mov	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	7b1b      	ldrb	r3, [r3, #12]
 800744e:	4618      	mov	r0, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	7b5b      	ldrb	r3, [r3, #13]
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	4603      	mov	r3, r0
 8007458:	4819      	ldr	r0, [pc, #100]	@ (80074c0 <wizchip_network_information+0x128>)
 800745a:	f000 f8fb 	bl	8007654 <iprintf>
  printf(" Gateway     : %d.%d.%d.%d\n", net_info->gw[0], net_info->gw[1], net_info->gw[2], net_info->gw[3]);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	7b9b      	ldrb	r3, [r3, #14]
 8007462:	4619      	mov	r1, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	7bdb      	ldrb	r3, [r3, #15]
 8007468:	461a      	mov	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	7c1b      	ldrb	r3, [r3, #16]
 800746e:	4618      	mov	r0, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	7c5b      	ldrb	r3, [r3, #17]
 8007474:	9300      	str	r3, [sp, #0]
 8007476:	4603      	mov	r3, r0
 8007478:	4812      	ldr	r0, [pc, #72]	@ (80074c4 <wizchip_network_information+0x12c>)
 800747a:	f000 f8eb 	bl	8007654 <iprintf>
  printf(" DNS         : %d.%d.%d.%d\n", net_info->dns[0], net_info->dns[1], net_info->dns[2], net_info->dns[3]);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	7c9b      	ldrb	r3, [r3, #18]
 8007482:	4619      	mov	r1, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	7cdb      	ldrb	r3, [r3, #19]
 8007488:	461a      	mov	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	7d1b      	ldrb	r3, [r3, #20]
 800748e:	4618      	mov	r0, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	7d5b      	ldrb	r3, [r3, #21]
 8007494:	9300      	str	r3, [sp, #0]
 8007496:	4603      	mov	r3, r0
 8007498:	480b      	ldr	r0, [pc, #44]	@ (80074c8 <wizchip_network_information+0x130>)
 800749a:	f000 f8db 	bl	8007654 <iprintf>
  printf("====================================================================================================\n\n");
 800749e:	480b      	ldr	r0, [pc, #44]	@ (80074cc <wizchip_network_information+0x134>)
 80074a0:	f000 f940 	bl	8007724 <puts>
}
 80074a4:	bf00      	nop
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bdb0      	pop	{r4, r5, r7, pc}
 80074ac:	08008624 	.word	0x08008624
 80074b0:	0800868c 	.word	0x0800868c
 80074b4:	080086b0 	.word	0x080086b0
 80074b8:	080086d8 	.word	0x080086d8
 80074bc:	08008708 	.word	0x08008708
 80074c0:	08008724 	.word	0x08008724
 80074c4:	08008740 	.word	0x08008740
 80074c8:	0800875c 	.word	0x0800875c
 80074cc:	08008778 	.word	0x08008778

080074d0 <std>:
 80074d0:	2300      	movs	r3, #0
 80074d2:	b510      	push	{r4, lr}
 80074d4:	4604      	mov	r4, r0
 80074d6:	e9c0 3300 	strd	r3, r3, [r0]
 80074da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074de:	6083      	str	r3, [r0, #8]
 80074e0:	8181      	strh	r1, [r0, #12]
 80074e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80074e4:	81c2      	strh	r2, [r0, #14]
 80074e6:	6183      	str	r3, [r0, #24]
 80074e8:	4619      	mov	r1, r3
 80074ea:	2208      	movs	r2, #8
 80074ec:	305c      	adds	r0, #92	@ 0x5c
 80074ee:	f000 f9f9 	bl	80078e4 <memset>
 80074f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007528 <std+0x58>)
 80074f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80074f6:	4b0d      	ldr	r3, [pc, #52]	@ (800752c <std+0x5c>)
 80074f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80074fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007530 <std+0x60>)
 80074fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80074fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007534 <std+0x64>)
 8007500:	6323      	str	r3, [r4, #48]	@ 0x30
 8007502:	4b0d      	ldr	r3, [pc, #52]	@ (8007538 <std+0x68>)
 8007504:	6224      	str	r4, [r4, #32]
 8007506:	429c      	cmp	r4, r3
 8007508:	d006      	beq.n	8007518 <std+0x48>
 800750a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800750e:	4294      	cmp	r4, r2
 8007510:	d002      	beq.n	8007518 <std+0x48>
 8007512:	33d0      	adds	r3, #208	@ 0xd0
 8007514:	429c      	cmp	r4, r3
 8007516:	d105      	bne.n	8007524 <std+0x54>
 8007518:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800751c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007520:	f000 ba58 	b.w	80079d4 <__retarget_lock_init_recursive>
 8007524:	bd10      	pop	{r4, pc}
 8007526:	bf00      	nop
 8007528:	08007735 	.word	0x08007735
 800752c:	08007757 	.word	0x08007757
 8007530:	0800778f 	.word	0x0800778f
 8007534:	080077b3 	.word	0x080077b3
 8007538:	2000123c 	.word	0x2000123c

0800753c <stdio_exit_handler>:
 800753c:	4a02      	ldr	r2, [pc, #8]	@ (8007548 <stdio_exit_handler+0xc>)
 800753e:	4903      	ldr	r1, [pc, #12]	@ (800754c <stdio_exit_handler+0x10>)
 8007540:	4803      	ldr	r0, [pc, #12]	@ (8007550 <stdio_exit_handler+0x14>)
 8007542:	f000 b869 	b.w	8007618 <_fwalk_sglue>
 8007546:	bf00      	nop
 8007548:	20000074 	.word	0x20000074
 800754c:	08008275 	.word	0x08008275
 8007550:	20000084 	.word	0x20000084

08007554 <cleanup_stdio>:
 8007554:	6841      	ldr	r1, [r0, #4]
 8007556:	4b0c      	ldr	r3, [pc, #48]	@ (8007588 <cleanup_stdio+0x34>)
 8007558:	4299      	cmp	r1, r3
 800755a:	b510      	push	{r4, lr}
 800755c:	4604      	mov	r4, r0
 800755e:	d001      	beq.n	8007564 <cleanup_stdio+0x10>
 8007560:	f000 fe88 	bl	8008274 <_fflush_r>
 8007564:	68a1      	ldr	r1, [r4, #8]
 8007566:	4b09      	ldr	r3, [pc, #36]	@ (800758c <cleanup_stdio+0x38>)
 8007568:	4299      	cmp	r1, r3
 800756a:	d002      	beq.n	8007572 <cleanup_stdio+0x1e>
 800756c:	4620      	mov	r0, r4
 800756e:	f000 fe81 	bl	8008274 <_fflush_r>
 8007572:	68e1      	ldr	r1, [r4, #12]
 8007574:	4b06      	ldr	r3, [pc, #24]	@ (8007590 <cleanup_stdio+0x3c>)
 8007576:	4299      	cmp	r1, r3
 8007578:	d004      	beq.n	8007584 <cleanup_stdio+0x30>
 800757a:	4620      	mov	r0, r4
 800757c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007580:	f000 be78 	b.w	8008274 <_fflush_r>
 8007584:	bd10      	pop	{r4, pc}
 8007586:	bf00      	nop
 8007588:	2000123c 	.word	0x2000123c
 800758c:	200012a4 	.word	0x200012a4
 8007590:	2000130c 	.word	0x2000130c

08007594 <global_stdio_init.part.0>:
 8007594:	b510      	push	{r4, lr}
 8007596:	4b0b      	ldr	r3, [pc, #44]	@ (80075c4 <global_stdio_init.part.0+0x30>)
 8007598:	4c0b      	ldr	r4, [pc, #44]	@ (80075c8 <global_stdio_init.part.0+0x34>)
 800759a:	4a0c      	ldr	r2, [pc, #48]	@ (80075cc <global_stdio_init.part.0+0x38>)
 800759c:	601a      	str	r2, [r3, #0]
 800759e:	4620      	mov	r0, r4
 80075a0:	2200      	movs	r2, #0
 80075a2:	2104      	movs	r1, #4
 80075a4:	f7ff ff94 	bl	80074d0 <std>
 80075a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80075ac:	2201      	movs	r2, #1
 80075ae:	2109      	movs	r1, #9
 80075b0:	f7ff ff8e 	bl	80074d0 <std>
 80075b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80075b8:	2202      	movs	r2, #2
 80075ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075be:	2112      	movs	r1, #18
 80075c0:	f7ff bf86 	b.w	80074d0 <std>
 80075c4:	20001374 	.word	0x20001374
 80075c8:	2000123c 	.word	0x2000123c
 80075cc:	0800753d 	.word	0x0800753d

080075d0 <__sfp_lock_acquire>:
 80075d0:	4801      	ldr	r0, [pc, #4]	@ (80075d8 <__sfp_lock_acquire+0x8>)
 80075d2:	f000 ba00 	b.w	80079d6 <__retarget_lock_acquire_recursive>
 80075d6:	bf00      	nop
 80075d8:	2000137d 	.word	0x2000137d

080075dc <__sfp_lock_release>:
 80075dc:	4801      	ldr	r0, [pc, #4]	@ (80075e4 <__sfp_lock_release+0x8>)
 80075de:	f000 b9fb 	b.w	80079d8 <__retarget_lock_release_recursive>
 80075e2:	bf00      	nop
 80075e4:	2000137d 	.word	0x2000137d

080075e8 <__sinit>:
 80075e8:	b510      	push	{r4, lr}
 80075ea:	4604      	mov	r4, r0
 80075ec:	f7ff fff0 	bl	80075d0 <__sfp_lock_acquire>
 80075f0:	6a23      	ldr	r3, [r4, #32]
 80075f2:	b11b      	cbz	r3, 80075fc <__sinit+0x14>
 80075f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075f8:	f7ff bff0 	b.w	80075dc <__sfp_lock_release>
 80075fc:	4b04      	ldr	r3, [pc, #16]	@ (8007610 <__sinit+0x28>)
 80075fe:	6223      	str	r3, [r4, #32]
 8007600:	4b04      	ldr	r3, [pc, #16]	@ (8007614 <__sinit+0x2c>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1f5      	bne.n	80075f4 <__sinit+0xc>
 8007608:	f7ff ffc4 	bl	8007594 <global_stdio_init.part.0>
 800760c:	e7f2      	b.n	80075f4 <__sinit+0xc>
 800760e:	bf00      	nop
 8007610:	08007555 	.word	0x08007555
 8007614:	20001374 	.word	0x20001374

08007618 <_fwalk_sglue>:
 8007618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800761c:	4607      	mov	r7, r0
 800761e:	4688      	mov	r8, r1
 8007620:	4614      	mov	r4, r2
 8007622:	2600      	movs	r6, #0
 8007624:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007628:	f1b9 0901 	subs.w	r9, r9, #1
 800762c:	d505      	bpl.n	800763a <_fwalk_sglue+0x22>
 800762e:	6824      	ldr	r4, [r4, #0]
 8007630:	2c00      	cmp	r4, #0
 8007632:	d1f7      	bne.n	8007624 <_fwalk_sglue+0xc>
 8007634:	4630      	mov	r0, r6
 8007636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800763a:	89ab      	ldrh	r3, [r5, #12]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d907      	bls.n	8007650 <_fwalk_sglue+0x38>
 8007640:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007644:	3301      	adds	r3, #1
 8007646:	d003      	beq.n	8007650 <_fwalk_sglue+0x38>
 8007648:	4629      	mov	r1, r5
 800764a:	4638      	mov	r0, r7
 800764c:	47c0      	blx	r8
 800764e:	4306      	orrs	r6, r0
 8007650:	3568      	adds	r5, #104	@ 0x68
 8007652:	e7e9      	b.n	8007628 <_fwalk_sglue+0x10>

08007654 <iprintf>:
 8007654:	b40f      	push	{r0, r1, r2, r3}
 8007656:	b507      	push	{r0, r1, r2, lr}
 8007658:	4906      	ldr	r1, [pc, #24]	@ (8007674 <iprintf+0x20>)
 800765a:	ab04      	add	r3, sp, #16
 800765c:	6808      	ldr	r0, [r1, #0]
 800765e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007662:	6881      	ldr	r1, [r0, #8]
 8007664:	9301      	str	r3, [sp, #4]
 8007666:	f000 fadb 	bl	8007c20 <_vfiprintf_r>
 800766a:	b003      	add	sp, #12
 800766c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007670:	b004      	add	sp, #16
 8007672:	4770      	bx	lr
 8007674:	20000080 	.word	0x20000080

08007678 <_puts_r>:
 8007678:	6a03      	ldr	r3, [r0, #32]
 800767a:	b570      	push	{r4, r5, r6, lr}
 800767c:	6884      	ldr	r4, [r0, #8]
 800767e:	4605      	mov	r5, r0
 8007680:	460e      	mov	r6, r1
 8007682:	b90b      	cbnz	r3, 8007688 <_puts_r+0x10>
 8007684:	f7ff ffb0 	bl	80075e8 <__sinit>
 8007688:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800768a:	07db      	lsls	r3, r3, #31
 800768c:	d405      	bmi.n	800769a <_puts_r+0x22>
 800768e:	89a3      	ldrh	r3, [r4, #12]
 8007690:	0598      	lsls	r0, r3, #22
 8007692:	d402      	bmi.n	800769a <_puts_r+0x22>
 8007694:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007696:	f000 f99e 	bl	80079d6 <__retarget_lock_acquire_recursive>
 800769a:	89a3      	ldrh	r3, [r4, #12]
 800769c:	0719      	lsls	r1, r3, #28
 800769e:	d502      	bpl.n	80076a6 <_puts_r+0x2e>
 80076a0:	6923      	ldr	r3, [r4, #16]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d135      	bne.n	8007712 <_puts_r+0x9a>
 80076a6:	4621      	mov	r1, r4
 80076a8:	4628      	mov	r0, r5
 80076aa:	f000 f8c5 	bl	8007838 <__swsetup_r>
 80076ae:	b380      	cbz	r0, 8007712 <_puts_r+0x9a>
 80076b0:	f04f 35ff 	mov.w	r5, #4294967295
 80076b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076b6:	07da      	lsls	r2, r3, #31
 80076b8:	d405      	bmi.n	80076c6 <_puts_r+0x4e>
 80076ba:	89a3      	ldrh	r3, [r4, #12]
 80076bc:	059b      	lsls	r3, r3, #22
 80076be:	d402      	bmi.n	80076c6 <_puts_r+0x4e>
 80076c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076c2:	f000 f989 	bl	80079d8 <__retarget_lock_release_recursive>
 80076c6:	4628      	mov	r0, r5
 80076c8:	bd70      	pop	{r4, r5, r6, pc}
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	da04      	bge.n	80076d8 <_puts_r+0x60>
 80076ce:	69a2      	ldr	r2, [r4, #24]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	dc17      	bgt.n	8007704 <_puts_r+0x8c>
 80076d4:	290a      	cmp	r1, #10
 80076d6:	d015      	beq.n	8007704 <_puts_r+0x8c>
 80076d8:	6823      	ldr	r3, [r4, #0]
 80076da:	1c5a      	adds	r2, r3, #1
 80076dc:	6022      	str	r2, [r4, #0]
 80076de:	7019      	strb	r1, [r3, #0]
 80076e0:	68a3      	ldr	r3, [r4, #8]
 80076e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80076e6:	3b01      	subs	r3, #1
 80076e8:	60a3      	str	r3, [r4, #8]
 80076ea:	2900      	cmp	r1, #0
 80076ec:	d1ed      	bne.n	80076ca <_puts_r+0x52>
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	da11      	bge.n	8007716 <_puts_r+0x9e>
 80076f2:	4622      	mov	r2, r4
 80076f4:	210a      	movs	r1, #10
 80076f6:	4628      	mov	r0, r5
 80076f8:	f000 f85f 	bl	80077ba <__swbuf_r>
 80076fc:	3001      	adds	r0, #1
 80076fe:	d0d7      	beq.n	80076b0 <_puts_r+0x38>
 8007700:	250a      	movs	r5, #10
 8007702:	e7d7      	b.n	80076b4 <_puts_r+0x3c>
 8007704:	4622      	mov	r2, r4
 8007706:	4628      	mov	r0, r5
 8007708:	f000 f857 	bl	80077ba <__swbuf_r>
 800770c:	3001      	adds	r0, #1
 800770e:	d1e7      	bne.n	80076e0 <_puts_r+0x68>
 8007710:	e7ce      	b.n	80076b0 <_puts_r+0x38>
 8007712:	3e01      	subs	r6, #1
 8007714:	e7e4      	b.n	80076e0 <_puts_r+0x68>
 8007716:	6823      	ldr	r3, [r4, #0]
 8007718:	1c5a      	adds	r2, r3, #1
 800771a:	6022      	str	r2, [r4, #0]
 800771c:	220a      	movs	r2, #10
 800771e:	701a      	strb	r2, [r3, #0]
 8007720:	e7ee      	b.n	8007700 <_puts_r+0x88>
	...

08007724 <puts>:
 8007724:	4b02      	ldr	r3, [pc, #8]	@ (8007730 <puts+0xc>)
 8007726:	4601      	mov	r1, r0
 8007728:	6818      	ldr	r0, [r3, #0]
 800772a:	f7ff bfa5 	b.w	8007678 <_puts_r>
 800772e:	bf00      	nop
 8007730:	20000080 	.word	0x20000080

08007734 <__sread>:
 8007734:	b510      	push	{r4, lr}
 8007736:	460c      	mov	r4, r1
 8007738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800773c:	f000 f8fc 	bl	8007938 <_read_r>
 8007740:	2800      	cmp	r0, #0
 8007742:	bfab      	itete	ge
 8007744:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007746:	89a3      	ldrhlt	r3, [r4, #12]
 8007748:	181b      	addge	r3, r3, r0
 800774a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800774e:	bfac      	ite	ge
 8007750:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007752:	81a3      	strhlt	r3, [r4, #12]
 8007754:	bd10      	pop	{r4, pc}

08007756 <__swrite>:
 8007756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800775a:	461f      	mov	r7, r3
 800775c:	898b      	ldrh	r3, [r1, #12]
 800775e:	05db      	lsls	r3, r3, #23
 8007760:	4605      	mov	r5, r0
 8007762:	460c      	mov	r4, r1
 8007764:	4616      	mov	r6, r2
 8007766:	d505      	bpl.n	8007774 <__swrite+0x1e>
 8007768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800776c:	2302      	movs	r3, #2
 800776e:	2200      	movs	r2, #0
 8007770:	f000 f8d0 	bl	8007914 <_lseek_r>
 8007774:	89a3      	ldrh	r3, [r4, #12]
 8007776:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800777a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800777e:	81a3      	strh	r3, [r4, #12]
 8007780:	4632      	mov	r2, r6
 8007782:	463b      	mov	r3, r7
 8007784:	4628      	mov	r0, r5
 8007786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800778a:	f000 b8e7 	b.w	800795c <_write_r>

0800778e <__sseek>:
 800778e:	b510      	push	{r4, lr}
 8007790:	460c      	mov	r4, r1
 8007792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007796:	f000 f8bd 	bl	8007914 <_lseek_r>
 800779a:	1c43      	adds	r3, r0, #1
 800779c:	89a3      	ldrh	r3, [r4, #12]
 800779e:	bf15      	itete	ne
 80077a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80077a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80077a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80077aa:	81a3      	strheq	r3, [r4, #12]
 80077ac:	bf18      	it	ne
 80077ae:	81a3      	strhne	r3, [r4, #12]
 80077b0:	bd10      	pop	{r4, pc}

080077b2 <__sclose>:
 80077b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077b6:	f000 b89d 	b.w	80078f4 <_close_r>

080077ba <__swbuf_r>:
 80077ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077bc:	460e      	mov	r6, r1
 80077be:	4614      	mov	r4, r2
 80077c0:	4605      	mov	r5, r0
 80077c2:	b118      	cbz	r0, 80077cc <__swbuf_r+0x12>
 80077c4:	6a03      	ldr	r3, [r0, #32]
 80077c6:	b90b      	cbnz	r3, 80077cc <__swbuf_r+0x12>
 80077c8:	f7ff ff0e 	bl	80075e8 <__sinit>
 80077cc:	69a3      	ldr	r3, [r4, #24]
 80077ce:	60a3      	str	r3, [r4, #8]
 80077d0:	89a3      	ldrh	r3, [r4, #12]
 80077d2:	071a      	lsls	r2, r3, #28
 80077d4:	d501      	bpl.n	80077da <__swbuf_r+0x20>
 80077d6:	6923      	ldr	r3, [r4, #16]
 80077d8:	b943      	cbnz	r3, 80077ec <__swbuf_r+0x32>
 80077da:	4621      	mov	r1, r4
 80077dc:	4628      	mov	r0, r5
 80077de:	f000 f82b 	bl	8007838 <__swsetup_r>
 80077e2:	b118      	cbz	r0, 80077ec <__swbuf_r+0x32>
 80077e4:	f04f 37ff 	mov.w	r7, #4294967295
 80077e8:	4638      	mov	r0, r7
 80077ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077ec:	6823      	ldr	r3, [r4, #0]
 80077ee:	6922      	ldr	r2, [r4, #16]
 80077f0:	1a98      	subs	r0, r3, r2
 80077f2:	6963      	ldr	r3, [r4, #20]
 80077f4:	b2f6      	uxtb	r6, r6
 80077f6:	4283      	cmp	r3, r0
 80077f8:	4637      	mov	r7, r6
 80077fa:	dc05      	bgt.n	8007808 <__swbuf_r+0x4e>
 80077fc:	4621      	mov	r1, r4
 80077fe:	4628      	mov	r0, r5
 8007800:	f000 fd38 	bl	8008274 <_fflush_r>
 8007804:	2800      	cmp	r0, #0
 8007806:	d1ed      	bne.n	80077e4 <__swbuf_r+0x2a>
 8007808:	68a3      	ldr	r3, [r4, #8]
 800780a:	3b01      	subs	r3, #1
 800780c:	60a3      	str	r3, [r4, #8]
 800780e:	6823      	ldr	r3, [r4, #0]
 8007810:	1c5a      	adds	r2, r3, #1
 8007812:	6022      	str	r2, [r4, #0]
 8007814:	701e      	strb	r6, [r3, #0]
 8007816:	6962      	ldr	r2, [r4, #20]
 8007818:	1c43      	adds	r3, r0, #1
 800781a:	429a      	cmp	r2, r3
 800781c:	d004      	beq.n	8007828 <__swbuf_r+0x6e>
 800781e:	89a3      	ldrh	r3, [r4, #12]
 8007820:	07db      	lsls	r3, r3, #31
 8007822:	d5e1      	bpl.n	80077e8 <__swbuf_r+0x2e>
 8007824:	2e0a      	cmp	r6, #10
 8007826:	d1df      	bne.n	80077e8 <__swbuf_r+0x2e>
 8007828:	4621      	mov	r1, r4
 800782a:	4628      	mov	r0, r5
 800782c:	f000 fd22 	bl	8008274 <_fflush_r>
 8007830:	2800      	cmp	r0, #0
 8007832:	d0d9      	beq.n	80077e8 <__swbuf_r+0x2e>
 8007834:	e7d6      	b.n	80077e4 <__swbuf_r+0x2a>
	...

08007838 <__swsetup_r>:
 8007838:	b538      	push	{r3, r4, r5, lr}
 800783a:	4b29      	ldr	r3, [pc, #164]	@ (80078e0 <__swsetup_r+0xa8>)
 800783c:	4605      	mov	r5, r0
 800783e:	6818      	ldr	r0, [r3, #0]
 8007840:	460c      	mov	r4, r1
 8007842:	b118      	cbz	r0, 800784c <__swsetup_r+0x14>
 8007844:	6a03      	ldr	r3, [r0, #32]
 8007846:	b90b      	cbnz	r3, 800784c <__swsetup_r+0x14>
 8007848:	f7ff fece 	bl	80075e8 <__sinit>
 800784c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007850:	0719      	lsls	r1, r3, #28
 8007852:	d422      	bmi.n	800789a <__swsetup_r+0x62>
 8007854:	06da      	lsls	r2, r3, #27
 8007856:	d407      	bmi.n	8007868 <__swsetup_r+0x30>
 8007858:	2209      	movs	r2, #9
 800785a:	602a      	str	r2, [r5, #0]
 800785c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007860:	81a3      	strh	r3, [r4, #12]
 8007862:	f04f 30ff 	mov.w	r0, #4294967295
 8007866:	e033      	b.n	80078d0 <__swsetup_r+0x98>
 8007868:	0758      	lsls	r0, r3, #29
 800786a:	d512      	bpl.n	8007892 <__swsetup_r+0x5a>
 800786c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800786e:	b141      	cbz	r1, 8007882 <__swsetup_r+0x4a>
 8007870:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007874:	4299      	cmp	r1, r3
 8007876:	d002      	beq.n	800787e <__swsetup_r+0x46>
 8007878:	4628      	mov	r0, r5
 800787a:	f000 f8af 	bl	80079dc <_free_r>
 800787e:	2300      	movs	r3, #0
 8007880:	6363      	str	r3, [r4, #52]	@ 0x34
 8007882:	89a3      	ldrh	r3, [r4, #12]
 8007884:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007888:	81a3      	strh	r3, [r4, #12]
 800788a:	2300      	movs	r3, #0
 800788c:	6063      	str	r3, [r4, #4]
 800788e:	6923      	ldr	r3, [r4, #16]
 8007890:	6023      	str	r3, [r4, #0]
 8007892:	89a3      	ldrh	r3, [r4, #12]
 8007894:	f043 0308 	orr.w	r3, r3, #8
 8007898:	81a3      	strh	r3, [r4, #12]
 800789a:	6923      	ldr	r3, [r4, #16]
 800789c:	b94b      	cbnz	r3, 80078b2 <__swsetup_r+0x7a>
 800789e:	89a3      	ldrh	r3, [r4, #12]
 80078a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80078a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078a8:	d003      	beq.n	80078b2 <__swsetup_r+0x7a>
 80078aa:	4621      	mov	r1, r4
 80078ac:	4628      	mov	r0, r5
 80078ae:	f000 fd2f 	bl	8008310 <__smakebuf_r>
 80078b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078b6:	f013 0201 	ands.w	r2, r3, #1
 80078ba:	d00a      	beq.n	80078d2 <__swsetup_r+0x9a>
 80078bc:	2200      	movs	r2, #0
 80078be:	60a2      	str	r2, [r4, #8]
 80078c0:	6962      	ldr	r2, [r4, #20]
 80078c2:	4252      	negs	r2, r2
 80078c4:	61a2      	str	r2, [r4, #24]
 80078c6:	6922      	ldr	r2, [r4, #16]
 80078c8:	b942      	cbnz	r2, 80078dc <__swsetup_r+0xa4>
 80078ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80078ce:	d1c5      	bne.n	800785c <__swsetup_r+0x24>
 80078d0:	bd38      	pop	{r3, r4, r5, pc}
 80078d2:	0799      	lsls	r1, r3, #30
 80078d4:	bf58      	it	pl
 80078d6:	6962      	ldrpl	r2, [r4, #20]
 80078d8:	60a2      	str	r2, [r4, #8]
 80078da:	e7f4      	b.n	80078c6 <__swsetup_r+0x8e>
 80078dc:	2000      	movs	r0, #0
 80078de:	e7f7      	b.n	80078d0 <__swsetup_r+0x98>
 80078e0:	20000080 	.word	0x20000080

080078e4 <memset>:
 80078e4:	4402      	add	r2, r0
 80078e6:	4603      	mov	r3, r0
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d100      	bne.n	80078ee <memset+0xa>
 80078ec:	4770      	bx	lr
 80078ee:	f803 1b01 	strb.w	r1, [r3], #1
 80078f2:	e7f9      	b.n	80078e8 <memset+0x4>

080078f4 <_close_r>:
 80078f4:	b538      	push	{r3, r4, r5, lr}
 80078f6:	4d06      	ldr	r5, [pc, #24]	@ (8007910 <_close_r+0x1c>)
 80078f8:	2300      	movs	r3, #0
 80078fa:	4604      	mov	r4, r0
 80078fc:	4608      	mov	r0, r1
 80078fe:	602b      	str	r3, [r5, #0]
 8007900:	f7f9 fa9b 	bl	8000e3a <_close>
 8007904:	1c43      	adds	r3, r0, #1
 8007906:	d102      	bne.n	800790e <_close_r+0x1a>
 8007908:	682b      	ldr	r3, [r5, #0]
 800790a:	b103      	cbz	r3, 800790e <_close_r+0x1a>
 800790c:	6023      	str	r3, [r4, #0]
 800790e:	bd38      	pop	{r3, r4, r5, pc}
 8007910:	20001378 	.word	0x20001378

08007914 <_lseek_r>:
 8007914:	b538      	push	{r3, r4, r5, lr}
 8007916:	4d07      	ldr	r5, [pc, #28]	@ (8007934 <_lseek_r+0x20>)
 8007918:	4604      	mov	r4, r0
 800791a:	4608      	mov	r0, r1
 800791c:	4611      	mov	r1, r2
 800791e:	2200      	movs	r2, #0
 8007920:	602a      	str	r2, [r5, #0]
 8007922:	461a      	mov	r2, r3
 8007924:	f7f9 fab0 	bl	8000e88 <_lseek>
 8007928:	1c43      	adds	r3, r0, #1
 800792a:	d102      	bne.n	8007932 <_lseek_r+0x1e>
 800792c:	682b      	ldr	r3, [r5, #0]
 800792e:	b103      	cbz	r3, 8007932 <_lseek_r+0x1e>
 8007930:	6023      	str	r3, [r4, #0]
 8007932:	bd38      	pop	{r3, r4, r5, pc}
 8007934:	20001378 	.word	0x20001378

08007938 <_read_r>:
 8007938:	b538      	push	{r3, r4, r5, lr}
 800793a:	4d07      	ldr	r5, [pc, #28]	@ (8007958 <_read_r+0x20>)
 800793c:	4604      	mov	r4, r0
 800793e:	4608      	mov	r0, r1
 8007940:	4611      	mov	r1, r2
 8007942:	2200      	movs	r2, #0
 8007944:	602a      	str	r2, [r5, #0]
 8007946:	461a      	mov	r2, r3
 8007948:	f7f9 fa3e 	bl	8000dc8 <_read>
 800794c:	1c43      	adds	r3, r0, #1
 800794e:	d102      	bne.n	8007956 <_read_r+0x1e>
 8007950:	682b      	ldr	r3, [r5, #0]
 8007952:	b103      	cbz	r3, 8007956 <_read_r+0x1e>
 8007954:	6023      	str	r3, [r4, #0]
 8007956:	bd38      	pop	{r3, r4, r5, pc}
 8007958:	20001378 	.word	0x20001378

0800795c <_write_r>:
 800795c:	b538      	push	{r3, r4, r5, lr}
 800795e:	4d07      	ldr	r5, [pc, #28]	@ (800797c <_write_r+0x20>)
 8007960:	4604      	mov	r4, r0
 8007962:	4608      	mov	r0, r1
 8007964:	4611      	mov	r1, r2
 8007966:	2200      	movs	r2, #0
 8007968:	602a      	str	r2, [r5, #0]
 800796a:	461a      	mov	r2, r3
 800796c:	f7f9 fa49 	bl	8000e02 <_write>
 8007970:	1c43      	adds	r3, r0, #1
 8007972:	d102      	bne.n	800797a <_write_r+0x1e>
 8007974:	682b      	ldr	r3, [r5, #0]
 8007976:	b103      	cbz	r3, 800797a <_write_r+0x1e>
 8007978:	6023      	str	r3, [r4, #0]
 800797a:	bd38      	pop	{r3, r4, r5, pc}
 800797c:	20001378 	.word	0x20001378

08007980 <__errno>:
 8007980:	4b01      	ldr	r3, [pc, #4]	@ (8007988 <__errno+0x8>)
 8007982:	6818      	ldr	r0, [r3, #0]
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	20000080 	.word	0x20000080

0800798c <__libc_init_array>:
 800798c:	b570      	push	{r4, r5, r6, lr}
 800798e:	4d0d      	ldr	r5, [pc, #52]	@ (80079c4 <__libc_init_array+0x38>)
 8007990:	4c0d      	ldr	r4, [pc, #52]	@ (80079c8 <__libc_init_array+0x3c>)
 8007992:	1b64      	subs	r4, r4, r5
 8007994:	10a4      	asrs	r4, r4, #2
 8007996:	2600      	movs	r6, #0
 8007998:	42a6      	cmp	r6, r4
 800799a:	d109      	bne.n	80079b0 <__libc_init_array+0x24>
 800799c:	4d0b      	ldr	r5, [pc, #44]	@ (80079cc <__libc_init_array+0x40>)
 800799e:	4c0c      	ldr	r4, [pc, #48]	@ (80079d0 <__libc_init_array+0x44>)
 80079a0:	f000 fd24 	bl	80083ec <_init>
 80079a4:	1b64      	subs	r4, r4, r5
 80079a6:	10a4      	asrs	r4, r4, #2
 80079a8:	2600      	movs	r6, #0
 80079aa:	42a6      	cmp	r6, r4
 80079ac:	d105      	bne.n	80079ba <__libc_init_array+0x2e>
 80079ae:	bd70      	pop	{r4, r5, r6, pc}
 80079b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80079b4:	4798      	blx	r3
 80079b6:	3601      	adds	r6, #1
 80079b8:	e7ee      	b.n	8007998 <__libc_init_array+0xc>
 80079ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80079be:	4798      	blx	r3
 80079c0:	3601      	adds	r6, #1
 80079c2:	e7f2      	b.n	80079aa <__libc_init_array+0x1e>
 80079c4:	08008834 	.word	0x08008834
 80079c8:	08008834 	.word	0x08008834
 80079cc:	08008834 	.word	0x08008834
 80079d0:	08008838 	.word	0x08008838

080079d4 <__retarget_lock_init_recursive>:
 80079d4:	4770      	bx	lr

080079d6 <__retarget_lock_acquire_recursive>:
 80079d6:	4770      	bx	lr

080079d8 <__retarget_lock_release_recursive>:
 80079d8:	4770      	bx	lr
	...

080079dc <_free_r>:
 80079dc:	b538      	push	{r3, r4, r5, lr}
 80079de:	4605      	mov	r5, r0
 80079e0:	2900      	cmp	r1, #0
 80079e2:	d041      	beq.n	8007a68 <_free_r+0x8c>
 80079e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079e8:	1f0c      	subs	r4, r1, #4
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	bfb8      	it	lt
 80079ee:	18e4      	addlt	r4, r4, r3
 80079f0:	f000 f8e0 	bl	8007bb4 <__malloc_lock>
 80079f4:	4a1d      	ldr	r2, [pc, #116]	@ (8007a6c <_free_r+0x90>)
 80079f6:	6813      	ldr	r3, [r2, #0]
 80079f8:	b933      	cbnz	r3, 8007a08 <_free_r+0x2c>
 80079fa:	6063      	str	r3, [r4, #4]
 80079fc:	6014      	str	r4, [r2, #0]
 80079fe:	4628      	mov	r0, r5
 8007a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a04:	f000 b8dc 	b.w	8007bc0 <__malloc_unlock>
 8007a08:	42a3      	cmp	r3, r4
 8007a0a:	d908      	bls.n	8007a1e <_free_r+0x42>
 8007a0c:	6820      	ldr	r0, [r4, #0]
 8007a0e:	1821      	adds	r1, r4, r0
 8007a10:	428b      	cmp	r3, r1
 8007a12:	bf01      	itttt	eq
 8007a14:	6819      	ldreq	r1, [r3, #0]
 8007a16:	685b      	ldreq	r3, [r3, #4]
 8007a18:	1809      	addeq	r1, r1, r0
 8007a1a:	6021      	streq	r1, [r4, #0]
 8007a1c:	e7ed      	b.n	80079fa <_free_r+0x1e>
 8007a1e:	461a      	mov	r2, r3
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	b10b      	cbz	r3, 8007a28 <_free_r+0x4c>
 8007a24:	42a3      	cmp	r3, r4
 8007a26:	d9fa      	bls.n	8007a1e <_free_r+0x42>
 8007a28:	6811      	ldr	r1, [r2, #0]
 8007a2a:	1850      	adds	r0, r2, r1
 8007a2c:	42a0      	cmp	r0, r4
 8007a2e:	d10b      	bne.n	8007a48 <_free_r+0x6c>
 8007a30:	6820      	ldr	r0, [r4, #0]
 8007a32:	4401      	add	r1, r0
 8007a34:	1850      	adds	r0, r2, r1
 8007a36:	4283      	cmp	r3, r0
 8007a38:	6011      	str	r1, [r2, #0]
 8007a3a:	d1e0      	bne.n	80079fe <_free_r+0x22>
 8007a3c:	6818      	ldr	r0, [r3, #0]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	6053      	str	r3, [r2, #4]
 8007a42:	4408      	add	r0, r1
 8007a44:	6010      	str	r0, [r2, #0]
 8007a46:	e7da      	b.n	80079fe <_free_r+0x22>
 8007a48:	d902      	bls.n	8007a50 <_free_r+0x74>
 8007a4a:	230c      	movs	r3, #12
 8007a4c:	602b      	str	r3, [r5, #0]
 8007a4e:	e7d6      	b.n	80079fe <_free_r+0x22>
 8007a50:	6820      	ldr	r0, [r4, #0]
 8007a52:	1821      	adds	r1, r4, r0
 8007a54:	428b      	cmp	r3, r1
 8007a56:	bf04      	itt	eq
 8007a58:	6819      	ldreq	r1, [r3, #0]
 8007a5a:	685b      	ldreq	r3, [r3, #4]
 8007a5c:	6063      	str	r3, [r4, #4]
 8007a5e:	bf04      	itt	eq
 8007a60:	1809      	addeq	r1, r1, r0
 8007a62:	6021      	streq	r1, [r4, #0]
 8007a64:	6054      	str	r4, [r2, #4]
 8007a66:	e7ca      	b.n	80079fe <_free_r+0x22>
 8007a68:	bd38      	pop	{r3, r4, r5, pc}
 8007a6a:	bf00      	nop
 8007a6c:	20001384 	.word	0x20001384

08007a70 <sbrk_aligned>:
 8007a70:	b570      	push	{r4, r5, r6, lr}
 8007a72:	4e0f      	ldr	r6, [pc, #60]	@ (8007ab0 <sbrk_aligned+0x40>)
 8007a74:	460c      	mov	r4, r1
 8007a76:	6831      	ldr	r1, [r6, #0]
 8007a78:	4605      	mov	r5, r0
 8007a7a:	b911      	cbnz	r1, 8007a82 <sbrk_aligned+0x12>
 8007a7c:	f000 fca6 	bl	80083cc <_sbrk_r>
 8007a80:	6030      	str	r0, [r6, #0]
 8007a82:	4621      	mov	r1, r4
 8007a84:	4628      	mov	r0, r5
 8007a86:	f000 fca1 	bl	80083cc <_sbrk_r>
 8007a8a:	1c43      	adds	r3, r0, #1
 8007a8c:	d103      	bne.n	8007a96 <sbrk_aligned+0x26>
 8007a8e:	f04f 34ff 	mov.w	r4, #4294967295
 8007a92:	4620      	mov	r0, r4
 8007a94:	bd70      	pop	{r4, r5, r6, pc}
 8007a96:	1cc4      	adds	r4, r0, #3
 8007a98:	f024 0403 	bic.w	r4, r4, #3
 8007a9c:	42a0      	cmp	r0, r4
 8007a9e:	d0f8      	beq.n	8007a92 <sbrk_aligned+0x22>
 8007aa0:	1a21      	subs	r1, r4, r0
 8007aa2:	4628      	mov	r0, r5
 8007aa4:	f000 fc92 	bl	80083cc <_sbrk_r>
 8007aa8:	3001      	adds	r0, #1
 8007aaa:	d1f2      	bne.n	8007a92 <sbrk_aligned+0x22>
 8007aac:	e7ef      	b.n	8007a8e <sbrk_aligned+0x1e>
 8007aae:	bf00      	nop
 8007ab0:	20001380 	.word	0x20001380

08007ab4 <_malloc_r>:
 8007ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ab8:	1ccd      	adds	r5, r1, #3
 8007aba:	f025 0503 	bic.w	r5, r5, #3
 8007abe:	3508      	adds	r5, #8
 8007ac0:	2d0c      	cmp	r5, #12
 8007ac2:	bf38      	it	cc
 8007ac4:	250c      	movcc	r5, #12
 8007ac6:	2d00      	cmp	r5, #0
 8007ac8:	4606      	mov	r6, r0
 8007aca:	db01      	blt.n	8007ad0 <_malloc_r+0x1c>
 8007acc:	42a9      	cmp	r1, r5
 8007ace:	d904      	bls.n	8007ada <_malloc_r+0x26>
 8007ad0:	230c      	movs	r3, #12
 8007ad2:	6033      	str	r3, [r6, #0]
 8007ad4:	2000      	movs	r0, #0
 8007ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ada:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007bb0 <_malloc_r+0xfc>
 8007ade:	f000 f869 	bl	8007bb4 <__malloc_lock>
 8007ae2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ae6:	461c      	mov	r4, r3
 8007ae8:	bb44      	cbnz	r4, 8007b3c <_malloc_r+0x88>
 8007aea:	4629      	mov	r1, r5
 8007aec:	4630      	mov	r0, r6
 8007aee:	f7ff ffbf 	bl	8007a70 <sbrk_aligned>
 8007af2:	1c43      	adds	r3, r0, #1
 8007af4:	4604      	mov	r4, r0
 8007af6:	d158      	bne.n	8007baa <_malloc_r+0xf6>
 8007af8:	f8d8 4000 	ldr.w	r4, [r8]
 8007afc:	4627      	mov	r7, r4
 8007afe:	2f00      	cmp	r7, #0
 8007b00:	d143      	bne.n	8007b8a <_malloc_r+0xd6>
 8007b02:	2c00      	cmp	r4, #0
 8007b04:	d04b      	beq.n	8007b9e <_malloc_r+0xea>
 8007b06:	6823      	ldr	r3, [r4, #0]
 8007b08:	4639      	mov	r1, r7
 8007b0a:	4630      	mov	r0, r6
 8007b0c:	eb04 0903 	add.w	r9, r4, r3
 8007b10:	f000 fc5c 	bl	80083cc <_sbrk_r>
 8007b14:	4581      	cmp	r9, r0
 8007b16:	d142      	bne.n	8007b9e <_malloc_r+0xea>
 8007b18:	6821      	ldr	r1, [r4, #0]
 8007b1a:	1a6d      	subs	r5, r5, r1
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	4630      	mov	r0, r6
 8007b20:	f7ff ffa6 	bl	8007a70 <sbrk_aligned>
 8007b24:	3001      	adds	r0, #1
 8007b26:	d03a      	beq.n	8007b9e <_malloc_r+0xea>
 8007b28:	6823      	ldr	r3, [r4, #0]
 8007b2a:	442b      	add	r3, r5
 8007b2c:	6023      	str	r3, [r4, #0]
 8007b2e:	f8d8 3000 	ldr.w	r3, [r8]
 8007b32:	685a      	ldr	r2, [r3, #4]
 8007b34:	bb62      	cbnz	r2, 8007b90 <_malloc_r+0xdc>
 8007b36:	f8c8 7000 	str.w	r7, [r8]
 8007b3a:	e00f      	b.n	8007b5c <_malloc_r+0xa8>
 8007b3c:	6822      	ldr	r2, [r4, #0]
 8007b3e:	1b52      	subs	r2, r2, r5
 8007b40:	d420      	bmi.n	8007b84 <_malloc_r+0xd0>
 8007b42:	2a0b      	cmp	r2, #11
 8007b44:	d917      	bls.n	8007b76 <_malloc_r+0xc2>
 8007b46:	1961      	adds	r1, r4, r5
 8007b48:	42a3      	cmp	r3, r4
 8007b4a:	6025      	str	r5, [r4, #0]
 8007b4c:	bf18      	it	ne
 8007b4e:	6059      	strne	r1, [r3, #4]
 8007b50:	6863      	ldr	r3, [r4, #4]
 8007b52:	bf08      	it	eq
 8007b54:	f8c8 1000 	streq.w	r1, [r8]
 8007b58:	5162      	str	r2, [r4, r5]
 8007b5a:	604b      	str	r3, [r1, #4]
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	f000 f82f 	bl	8007bc0 <__malloc_unlock>
 8007b62:	f104 000b 	add.w	r0, r4, #11
 8007b66:	1d23      	adds	r3, r4, #4
 8007b68:	f020 0007 	bic.w	r0, r0, #7
 8007b6c:	1ac2      	subs	r2, r0, r3
 8007b6e:	bf1c      	itt	ne
 8007b70:	1a1b      	subne	r3, r3, r0
 8007b72:	50a3      	strne	r3, [r4, r2]
 8007b74:	e7af      	b.n	8007ad6 <_malloc_r+0x22>
 8007b76:	6862      	ldr	r2, [r4, #4]
 8007b78:	42a3      	cmp	r3, r4
 8007b7a:	bf0c      	ite	eq
 8007b7c:	f8c8 2000 	streq.w	r2, [r8]
 8007b80:	605a      	strne	r2, [r3, #4]
 8007b82:	e7eb      	b.n	8007b5c <_malloc_r+0xa8>
 8007b84:	4623      	mov	r3, r4
 8007b86:	6864      	ldr	r4, [r4, #4]
 8007b88:	e7ae      	b.n	8007ae8 <_malloc_r+0x34>
 8007b8a:	463c      	mov	r4, r7
 8007b8c:	687f      	ldr	r7, [r7, #4]
 8007b8e:	e7b6      	b.n	8007afe <_malloc_r+0x4a>
 8007b90:	461a      	mov	r2, r3
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	42a3      	cmp	r3, r4
 8007b96:	d1fb      	bne.n	8007b90 <_malloc_r+0xdc>
 8007b98:	2300      	movs	r3, #0
 8007b9a:	6053      	str	r3, [r2, #4]
 8007b9c:	e7de      	b.n	8007b5c <_malloc_r+0xa8>
 8007b9e:	230c      	movs	r3, #12
 8007ba0:	6033      	str	r3, [r6, #0]
 8007ba2:	4630      	mov	r0, r6
 8007ba4:	f000 f80c 	bl	8007bc0 <__malloc_unlock>
 8007ba8:	e794      	b.n	8007ad4 <_malloc_r+0x20>
 8007baa:	6005      	str	r5, [r0, #0]
 8007bac:	e7d6      	b.n	8007b5c <_malloc_r+0xa8>
 8007bae:	bf00      	nop
 8007bb0:	20001384 	.word	0x20001384

08007bb4 <__malloc_lock>:
 8007bb4:	4801      	ldr	r0, [pc, #4]	@ (8007bbc <__malloc_lock+0x8>)
 8007bb6:	f7ff bf0e 	b.w	80079d6 <__retarget_lock_acquire_recursive>
 8007bba:	bf00      	nop
 8007bbc:	2000137c 	.word	0x2000137c

08007bc0 <__malloc_unlock>:
 8007bc0:	4801      	ldr	r0, [pc, #4]	@ (8007bc8 <__malloc_unlock+0x8>)
 8007bc2:	f7ff bf09 	b.w	80079d8 <__retarget_lock_release_recursive>
 8007bc6:	bf00      	nop
 8007bc8:	2000137c 	.word	0x2000137c

08007bcc <__sfputc_r>:
 8007bcc:	6893      	ldr	r3, [r2, #8]
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	b410      	push	{r4}
 8007bd4:	6093      	str	r3, [r2, #8]
 8007bd6:	da08      	bge.n	8007bea <__sfputc_r+0x1e>
 8007bd8:	6994      	ldr	r4, [r2, #24]
 8007bda:	42a3      	cmp	r3, r4
 8007bdc:	db01      	blt.n	8007be2 <__sfputc_r+0x16>
 8007bde:	290a      	cmp	r1, #10
 8007be0:	d103      	bne.n	8007bea <__sfputc_r+0x1e>
 8007be2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007be6:	f7ff bde8 	b.w	80077ba <__swbuf_r>
 8007bea:	6813      	ldr	r3, [r2, #0]
 8007bec:	1c58      	adds	r0, r3, #1
 8007bee:	6010      	str	r0, [r2, #0]
 8007bf0:	7019      	strb	r1, [r3, #0]
 8007bf2:	4608      	mov	r0, r1
 8007bf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <__sfputs_r>:
 8007bfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bfc:	4606      	mov	r6, r0
 8007bfe:	460f      	mov	r7, r1
 8007c00:	4614      	mov	r4, r2
 8007c02:	18d5      	adds	r5, r2, r3
 8007c04:	42ac      	cmp	r4, r5
 8007c06:	d101      	bne.n	8007c0c <__sfputs_r+0x12>
 8007c08:	2000      	movs	r0, #0
 8007c0a:	e007      	b.n	8007c1c <__sfputs_r+0x22>
 8007c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c10:	463a      	mov	r2, r7
 8007c12:	4630      	mov	r0, r6
 8007c14:	f7ff ffda 	bl	8007bcc <__sfputc_r>
 8007c18:	1c43      	adds	r3, r0, #1
 8007c1a:	d1f3      	bne.n	8007c04 <__sfputs_r+0xa>
 8007c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c20 <_vfiprintf_r>:
 8007c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c24:	460d      	mov	r5, r1
 8007c26:	b09d      	sub	sp, #116	@ 0x74
 8007c28:	4614      	mov	r4, r2
 8007c2a:	4698      	mov	r8, r3
 8007c2c:	4606      	mov	r6, r0
 8007c2e:	b118      	cbz	r0, 8007c38 <_vfiprintf_r+0x18>
 8007c30:	6a03      	ldr	r3, [r0, #32]
 8007c32:	b90b      	cbnz	r3, 8007c38 <_vfiprintf_r+0x18>
 8007c34:	f7ff fcd8 	bl	80075e8 <__sinit>
 8007c38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c3a:	07d9      	lsls	r1, r3, #31
 8007c3c:	d405      	bmi.n	8007c4a <_vfiprintf_r+0x2a>
 8007c3e:	89ab      	ldrh	r3, [r5, #12]
 8007c40:	059a      	lsls	r2, r3, #22
 8007c42:	d402      	bmi.n	8007c4a <_vfiprintf_r+0x2a>
 8007c44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c46:	f7ff fec6 	bl	80079d6 <__retarget_lock_acquire_recursive>
 8007c4a:	89ab      	ldrh	r3, [r5, #12]
 8007c4c:	071b      	lsls	r3, r3, #28
 8007c4e:	d501      	bpl.n	8007c54 <_vfiprintf_r+0x34>
 8007c50:	692b      	ldr	r3, [r5, #16]
 8007c52:	b99b      	cbnz	r3, 8007c7c <_vfiprintf_r+0x5c>
 8007c54:	4629      	mov	r1, r5
 8007c56:	4630      	mov	r0, r6
 8007c58:	f7ff fdee 	bl	8007838 <__swsetup_r>
 8007c5c:	b170      	cbz	r0, 8007c7c <_vfiprintf_r+0x5c>
 8007c5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c60:	07dc      	lsls	r4, r3, #31
 8007c62:	d504      	bpl.n	8007c6e <_vfiprintf_r+0x4e>
 8007c64:	f04f 30ff 	mov.w	r0, #4294967295
 8007c68:	b01d      	add	sp, #116	@ 0x74
 8007c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c6e:	89ab      	ldrh	r3, [r5, #12]
 8007c70:	0598      	lsls	r0, r3, #22
 8007c72:	d4f7      	bmi.n	8007c64 <_vfiprintf_r+0x44>
 8007c74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c76:	f7ff feaf 	bl	80079d8 <__retarget_lock_release_recursive>
 8007c7a:	e7f3      	b.n	8007c64 <_vfiprintf_r+0x44>
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c80:	2320      	movs	r3, #32
 8007c82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c86:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c8a:	2330      	movs	r3, #48	@ 0x30
 8007c8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007e3c <_vfiprintf_r+0x21c>
 8007c90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c94:	f04f 0901 	mov.w	r9, #1
 8007c98:	4623      	mov	r3, r4
 8007c9a:	469a      	mov	sl, r3
 8007c9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ca0:	b10a      	cbz	r2, 8007ca6 <_vfiprintf_r+0x86>
 8007ca2:	2a25      	cmp	r2, #37	@ 0x25
 8007ca4:	d1f9      	bne.n	8007c9a <_vfiprintf_r+0x7a>
 8007ca6:	ebba 0b04 	subs.w	fp, sl, r4
 8007caa:	d00b      	beq.n	8007cc4 <_vfiprintf_r+0xa4>
 8007cac:	465b      	mov	r3, fp
 8007cae:	4622      	mov	r2, r4
 8007cb0:	4629      	mov	r1, r5
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	f7ff ffa1 	bl	8007bfa <__sfputs_r>
 8007cb8:	3001      	adds	r0, #1
 8007cba:	f000 80a7 	beq.w	8007e0c <_vfiprintf_r+0x1ec>
 8007cbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cc0:	445a      	add	r2, fp
 8007cc2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f000 809f 	beq.w	8007e0c <_vfiprintf_r+0x1ec>
 8007cce:	2300      	movs	r3, #0
 8007cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8007cd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cd8:	f10a 0a01 	add.w	sl, sl, #1
 8007cdc:	9304      	str	r3, [sp, #16]
 8007cde:	9307      	str	r3, [sp, #28]
 8007ce0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ce4:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ce6:	4654      	mov	r4, sl
 8007ce8:	2205      	movs	r2, #5
 8007cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cee:	4853      	ldr	r0, [pc, #332]	@ (8007e3c <_vfiprintf_r+0x21c>)
 8007cf0:	f7f8 fa7e 	bl	80001f0 <memchr>
 8007cf4:	9a04      	ldr	r2, [sp, #16]
 8007cf6:	b9d8      	cbnz	r0, 8007d30 <_vfiprintf_r+0x110>
 8007cf8:	06d1      	lsls	r1, r2, #27
 8007cfa:	bf44      	itt	mi
 8007cfc:	2320      	movmi	r3, #32
 8007cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d02:	0713      	lsls	r3, r2, #28
 8007d04:	bf44      	itt	mi
 8007d06:	232b      	movmi	r3, #43	@ 0x2b
 8007d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8007d10:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d12:	d015      	beq.n	8007d40 <_vfiprintf_r+0x120>
 8007d14:	9a07      	ldr	r2, [sp, #28]
 8007d16:	4654      	mov	r4, sl
 8007d18:	2000      	movs	r0, #0
 8007d1a:	f04f 0c0a 	mov.w	ip, #10
 8007d1e:	4621      	mov	r1, r4
 8007d20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d24:	3b30      	subs	r3, #48	@ 0x30
 8007d26:	2b09      	cmp	r3, #9
 8007d28:	d94b      	bls.n	8007dc2 <_vfiprintf_r+0x1a2>
 8007d2a:	b1b0      	cbz	r0, 8007d5a <_vfiprintf_r+0x13a>
 8007d2c:	9207      	str	r2, [sp, #28]
 8007d2e:	e014      	b.n	8007d5a <_vfiprintf_r+0x13a>
 8007d30:	eba0 0308 	sub.w	r3, r0, r8
 8007d34:	fa09 f303 	lsl.w	r3, r9, r3
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	9304      	str	r3, [sp, #16]
 8007d3c:	46a2      	mov	sl, r4
 8007d3e:	e7d2      	b.n	8007ce6 <_vfiprintf_r+0xc6>
 8007d40:	9b03      	ldr	r3, [sp, #12]
 8007d42:	1d19      	adds	r1, r3, #4
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	9103      	str	r1, [sp, #12]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	bfbb      	ittet	lt
 8007d4c:	425b      	neglt	r3, r3
 8007d4e:	f042 0202 	orrlt.w	r2, r2, #2
 8007d52:	9307      	strge	r3, [sp, #28]
 8007d54:	9307      	strlt	r3, [sp, #28]
 8007d56:	bfb8      	it	lt
 8007d58:	9204      	strlt	r2, [sp, #16]
 8007d5a:	7823      	ldrb	r3, [r4, #0]
 8007d5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d5e:	d10a      	bne.n	8007d76 <_vfiprintf_r+0x156>
 8007d60:	7863      	ldrb	r3, [r4, #1]
 8007d62:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d64:	d132      	bne.n	8007dcc <_vfiprintf_r+0x1ac>
 8007d66:	9b03      	ldr	r3, [sp, #12]
 8007d68:	1d1a      	adds	r2, r3, #4
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	9203      	str	r2, [sp, #12]
 8007d6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d72:	3402      	adds	r4, #2
 8007d74:	9305      	str	r3, [sp, #20]
 8007d76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007e4c <_vfiprintf_r+0x22c>
 8007d7a:	7821      	ldrb	r1, [r4, #0]
 8007d7c:	2203      	movs	r2, #3
 8007d7e:	4650      	mov	r0, sl
 8007d80:	f7f8 fa36 	bl	80001f0 <memchr>
 8007d84:	b138      	cbz	r0, 8007d96 <_vfiprintf_r+0x176>
 8007d86:	9b04      	ldr	r3, [sp, #16]
 8007d88:	eba0 000a 	sub.w	r0, r0, sl
 8007d8c:	2240      	movs	r2, #64	@ 0x40
 8007d8e:	4082      	lsls	r2, r0
 8007d90:	4313      	orrs	r3, r2
 8007d92:	3401      	adds	r4, #1
 8007d94:	9304      	str	r3, [sp, #16]
 8007d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d9a:	4829      	ldr	r0, [pc, #164]	@ (8007e40 <_vfiprintf_r+0x220>)
 8007d9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007da0:	2206      	movs	r2, #6
 8007da2:	f7f8 fa25 	bl	80001f0 <memchr>
 8007da6:	2800      	cmp	r0, #0
 8007da8:	d03f      	beq.n	8007e2a <_vfiprintf_r+0x20a>
 8007daa:	4b26      	ldr	r3, [pc, #152]	@ (8007e44 <_vfiprintf_r+0x224>)
 8007dac:	bb1b      	cbnz	r3, 8007df6 <_vfiprintf_r+0x1d6>
 8007dae:	9b03      	ldr	r3, [sp, #12]
 8007db0:	3307      	adds	r3, #7
 8007db2:	f023 0307 	bic.w	r3, r3, #7
 8007db6:	3308      	adds	r3, #8
 8007db8:	9303      	str	r3, [sp, #12]
 8007dba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dbc:	443b      	add	r3, r7
 8007dbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dc0:	e76a      	b.n	8007c98 <_vfiprintf_r+0x78>
 8007dc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dc6:	460c      	mov	r4, r1
 8007dc8:	2001      	movs	r0, #1
 8007dca:	e7a8      	b.n	8007d1e <_vfiprintf_r+0xfe>
 8007dcc:	2300      	movs	r3, #0
 8007dce:	3401      	adds	r4, #1
 8007dd0:	9305      	str	r3, [sp, #20]
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	f04f 0c0a 	mov.w	ip, #10
 8007dd8:	4620      	mov	r0, r4
 8007dda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dde:	3a30      	subs	r2, #48	@ 0x30
 8007de0:	2a09      	cmp	r2, #9
 8007de2:	d903      	bls.n	8007dec <_vfiprintf_r+0x1cc>
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d0c6      	beq.n	8007d76 <_vfiprintf_r+0x156>
 8007de8:	9105      	str	r1, [sp, #20]
 8007dea:	e7c4      	b.n	8007d76 <_vfiprintf_r+0x156>
 8007dec:	fb0c 2101 	mla	r1, ip, r1, r2
 8007df0:	4604      	mov	r4, r0
 8007df2:	2301      	movs	r3, #1
 8007df4:	e7f0      	b.n	8007dd8 <_vfiprintf_r+0x1b8>
 8007df6:	ab03      	add	r3, sp, #12
 8007df8:	9300      	str	r3, [sp, #0]
 8007dfa:	462a      	mov	r2, r5
 8007dfc:	4b12      	ldr	r3, [pc, #72]	@ (8007e48 <_vfiprintf_r+0x228>)
 8007dfe:	a904      	add	r1, sp, #16
 8007e00:	4630      	mov	r0, r6
 8007e02:	f3af 8000 	nop.w
 8007e06:	4607      	mov	r7, r0
 8007e08:	1c78      	adds	r0, r7, #1
 8007e0a:	d1d6      	bne.n	8007dba <_vfiprintf_r+0x19a>
 8007e0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e0e:	07d9      	lsls	r1, r3, #31
 8007e10:	d405      	bmi.n	8007e1e <_vfiprintf_r+0x1fe>
 8007e12:	89ab      	ldrh	r3, [r5, #12]
 8007e14:	059a      	lsls	r2, r3, #22
 8007e16:	d402      	bmi.n	8007e1e <_vfiprintf_r+0x1fe>
 8007e18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e1a:	f7ff fddd 	bl	80079d8 <__retarget_lock_release_recursive>
 8007e1e:	89ab      	ldrh	r3, [r5, #12]
 8007e20:	065b      	lsls	r3, r3, #25
 8007e22:	f53f af1f 	bmi.w	8007c64 <_vfiprintf_r+0x44>
 8007e26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e28:	e71e      	b.n	8007c68 <_vfiprintf_r+0x48>
 8007e2a:	ab03      	add	r3, sp, #12
 8007e2c:	9300      	str	r3, [sp, #0]
 8007e2e:	462a      	mov	r2, r5
 8007e30:	4b05      	ldr	r3, [pc, #20]	@ (8007e48 <_vfiprintf_r+0x228>)
 8007e32:	a904      	add	r1, sp, #16
 8007e34:	4630      	mov	r0, r6
 8007e36:	f000 f879 	bl	8007f2c <_printf_i>
 8007e3a:	e7e4      	b.n	8007e06 <_vfiprintf_r+0x1e6>
 8007e3c:	080087f8 	.word	0x080087f8
 8007e40:	08008802 	.word	0x08008802
 8007e44:	00000000 	.word	0x00000000
 8007e48:	08007bfb 	.word	0x08007bfb
 8007e4c:	080087fe 	.word	0x080087fe

08007e50 <_printf_common>:
 8007e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e54:	4616      	mov	r6, r2
 8007e56:	4698      	mov	r8, r3
 8007e58:	688a      	ldr	r2, [r1, #8]
 8007e5a:	690b      	ldr	r3, [r1, #16]
 8007e5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007e60:	4293      	cmp	r3, r2
 8007e62:	bfb8      	it	lt
 8007e64:	4613      	movlt	r3, r2
 8007e66:	6033      	str	r3, [r6, #0]
 8007e68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007e6c:	4607      	mov	r7, r0
 8007e6e:	460c      	mov	r4, r1
 8007e70:	b10a      	cbz	r2, 8007e76 <_printf_common+0x26>
 8007e72:	3301      	adds	r3, #1
 8007e74:	6033      	str	r3, [r6, #0]
 8007e76:	6823      	ldr	r3, [r4, #0]
 8007e78:	0699      	lsls	r1, r3, #26
 8007e7a:	bf42      	ittt	mi
 8007e7c:	6833      	ldrmi	r3, [r6, #0]
 8007e7e:	3302      	addmi	r3, #2
 8007e80:	6033      	strmi	r3, [r6, #0]
 8007e82:	6825      	ldr	r5, [r4, #0]
 8007e84:	f015 0506 	ands.w	r5, r5, #6
 8007e88:	d106      	bne.n	8007e98 <_printf_common+0x48>
 8007e8a:	f104 0a19 	add.w	sl, r4, #25
 8007e8e:	68e3      	ldr	r3, [r4, #12]
 8007e90:	6832      	ldr	r2, [r6, #0]
 8007e92:	1a9b      	subs	r3, r3, r2
 8007e94:	42ab      	cmp	r3, r5
 8007e96:	dc26      	bgt.n	8007ee6 <_printf_common+0x96>
 8007e98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007e9c:	6822      	ldr	r2, [r4, #0]
 8007e9e:	3b00      	subs	r3, #0
 8007ea0:	bf18      	it	ne
 8007ea2:	2301      	movne	r3, #1
 8007ea4:	0692      	lsls	r2, r2, #26
 8007ea6:	d42b      	bmi.n	8007f00 <_printf_common+0xb0>
 8007ea8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007eac:	4641      	mov	r1, r8
 8007eae:	4638      	mov	r0, r7
 8007eb0:	47c8      	blx	r9
 8007eb2:	3001      	adds	r0, #1
 8007eb4:	d01e      	beq.n	8007ef4 <_printf_common+0xa4>
 8007eb6:	6823      	ldr	r3, [r4, #0]
 8007eb8:	6922      	ldr	r2, [r4, #16]
 8007eba:	f003 0306 	and.w	r3, r3, #6
 8007ebe:	2b04      	cmp	r3, #4
 8007ec0:	bf02      	ittt	eq
 8007ec2:	68e5      	ldreq	r5, [r4, #12]
 8007ec4:	6833      	ldreq	r3, [r6, #0]
 8007ec6:	1aed      	subeq	r5, r5, r3
 8007ec8:	68a3      	ldr	r3, [r4, #8]
 8007eca:	bf0c      	ite	eq
 8007ecc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ed0:	2500      	movne	r5, #0
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	bfc4      	itt	gt
 8007ed6:	1a9b      	subgt	r3, r3, r2
 8007ed8:	18ed      	addgt	r5, r5, r3
 8007eda:	2600      	movs	r6, #0
 8007edc:	341a      	adds	r4, #26
 8007ede:	42b5      	cmp	r5, r6
 8007ee0:	d11a      	bne.n	8007f18 <_printf_common+0xc8>
 8007ee2:	2000      	movs	r0, #0
 8007ee4:	e008      	b.n	8007ef8 <_printf_common+0xa8>
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	4652      	mov	r2, sl
 8007eea:	4641      	mov	r1, r8
 8007eec:	4638      	mov	r0, r7
 8007eee:	47c8      	blx	r9
 8007ef0:	3001      	adds	r0, #1
 8007ef2:	d103      	bne.n	8007efc <_printf_common+0xac>
 8007ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007efc:	3501      	adds	r5, #1
 8007efe:	e7c6      	b.n	8007e8e <_printf_common+0x3e>
 8007f00:	18e1      	adds	r1, r4, r3
 8007f02:	1c5a      	adds	r2, r3, #1
 8007f04:	2030      	movs	r0, #48	@ 0x30
 8007f06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007f0a:	4422      	add	r2, r4
 8007f0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007f10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007f14:	3302      	adds	r3, #2
 8007f16:	e7c7      	b.n	8007ea8 <_printf_common+0x58>
 8007f18:	2301      	movs	r3, #1
 8007f1a:	4622      	mov	r2, r4
 8007f1c:	4641      	mov	r1, r8
 8007f1e:	4638      	mov	r0, r7
 8007f20:	47c8      	blx	r9
 8007f22:	3001      	adds	r0, #1
 8007f24:	d0e6      	beq.n	8007ef4 <_printf_common+0xa4>
 8007f26:	3601      	adds	r6, #1
 8007f28:	e7d9      	b.n	8007ede <_printf_common+0x8e>
	...

08007f2c <_printf_i>:
 8007f2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f30:	7e0f      	ldrb	r7, [r1, #24]
 8007f32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007f34:	2f78      	cmp	r7, #120	@ 0x78
 8007f36:	4691      	mov	r9, r2
 8007f38:	4680      	mov	r8, r0
 8007f3a:	460c      	mov	r4, r1
 8007f3c:	469a      	mov	sl, r3
 8007f3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007f42:	d807      	bhi.n	8007f54 <_printf_i+0x28>
 8007f44:	2f62      	cmp	r7, #98	@ 0x62
 8007f46:	d80a      	bhi.n	8007f5e <_printf_i+0x32>
 8007f48:	2f00      	cmp	r7, #0
 8007f4a:	f000 80d2 	beq.w	80080f2 <_printf_i+0x1c6>
 8007f4e:	2f58      	cmp	r7, #88	@ 0x58
 8007f50:	f000 80b9 	beq.w	80080c6 <_printf_i+0x19a>
 8007f54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007f5c:	e03a      	b.n	8007fd4 <_printf_i+0xa8>
 8007f5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007f62:	2b15      	cmp	r3, #21
 8007f64:	d8f6      	bhi.n	8007f54 <_printf_i+0x28>
 8007f66:	a101      	add	r1, pc, #4	@ (adr r1, 8007f6c <_printf_i+0x40>)
 8007f68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f6c:	08007fc5 	.word	0x08007fc5
 8007f70:	08007fd9 	.word	0x08007fd9
 8007f74:	08007f55 	.word	0x08007f55
 8007f78:	08007f55 	.word	0x08007f55
 8007f7c:	08007f55 	.word	0x08007f55
 8007f80:	08007f55 	.word	0x08007f55
 8007f84:	08007fd9 	.word	0x08007fd9
 8007f88:	08007f55 	.word	0x08007f55
 8007f8c:	08007f55 	.word	0x08007f55
 8007f90:	08007f55 	.word	0x08007f55
 8007f94:	08007f55 	.word	0x08007f55
 8007f98:	080080d9 	.word	0x080080d9
 8007f9c:	08008003 	.word	0x08008003
 8007fa0:	08008093 	.word	0x08008093
 8007fa4:	08007f55 	.word	0x08007f55
 8007fa8:	08007f55 	.word	0x08007f55
 8007fac:	080080fb 	.word	0x080080fb
 8007fb0:	08007f55 	.word	0x08007f55
 8007fb4:	08008003 	.word	0x08008003
 8007fb8:	08007f55 	.word	0x08007f55
 8007fbc:	08007f55 	.word	0x08007f55
 8007fc0:	0800809b 	.word	0x0800809b
 8007fc4:	6833      	ldr	r3, [r6, #0]
 8007fc6:	1d1a      	adds	r2, r3, #4
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	6032      	str	r2, [r6, #0]
 8007fcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007fd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e09d      	b.n	8008114 <_printf_i+0x1e8>
 8007fd8:	6833      	ldr	r3, [r6, #0]
 8007fda:	6820      	ldr	r0, [r4, #0]
 8007fdc:	1d19      	adds	r1, r3, #4
 8007fde:	6031      	str	r1, [r6, #0]
 8007fe0:	0606      	lsls	r6, r0, #24
 8007fe2:	d501      	bpl.n	8007fe8 <_printf_i+0xbc>
 8007fe4:	681d      	ldr	r5, [r3, #0]
 8007fe6:	e003      	b.n	8007ff0 <_printf_i+0xc4>
 8007fe8:	0645      	lsls	r5, r0, #25
 8007fea:	d5fb      	bpl.n	8007fe4 <_printf_i+0xb8>
 8007fec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007ff0:	2d00      	cmp	r5, #0
 8007ff2:	da03      	bge.n	8007ffc <_printf_i+0xd0>
 8007ff4:	232d      	movs	r3, #45	@ 0x2d
 8007ff6:	426d      	negs	r5, r5
 8007ff8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ffc:	4859      	ldr	r0, [pc, #356]	@ (8008164 <_printf_i+0x238>)
 8007ffe:	230a      	movs	r3, #10
 8008000:	e011      	b.n	8008026 <_printf_i+0xfa>
 8008002:	6821      	ldr	r1, [r4, #0]
 8008004:	6833      	ldr	r3, [r6, #0]
 8008006:	0608      	lsls	r0, r1, #24
 8008008:	f853 5b04 	ldr.w	r5, [r3], #4
 800800c:	d402      	bmi.n	8008014 <_printf_i+0xe8>
 800800e:	0649      	lsls	r1, r1, #25
 8008010:	bf48      	it	mi
 8008012:	b2ad      	uxthmi	r5, r5
 8008014:	2f6f      	cmp	r7, #111	@ 0x6f
 8008016:	4853      	ldr	r0, [pc, #332]	@ (8008164 <_printf_i+0x238>)
 8008018:	6033      	str	r3, [r6, #0]
 800801a:	bf14      	ite	ne
 800801c:	230a      	movne	r3, #10
 800801e:	2308      	moveq	r3, #8
 8008020:	2100      	movs	r1, #0
 8008022:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008026:	6866      	ldr	r6, [r4, #4]
 8008028:	60a6      	str	r6, [r4, #8]
 800802a:	2e00      	cmp	r6, #0
 800802c:	bfa2      	ittt	ge
 800802e:	6821      	ldrge	r1, [r4, #0]
 8008030:	f021 0104 	bicge.w	r1, r1, #4
 8008034:	6021      	strge	r1, [r4, #0]
 8008036:	b90d      	cbnz	r5, 800803c <_printf_i+0x110>
 8008038:	2e00      	cmp	r6, #0
 800803a:	d04b      	beq.n	80080d4 <_printf_i+0x1a8>
 800803c:	4616      	mov	r6, r2
 800803e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008042:	fb03 5711 	mls	r7, r3, r1, r5
 8008046:	5dc7      	ldrb	r7, [r0, r7]
 8008048:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800804c:	462f      	mov	r7, r5
 800804e:	42bb      	cmp	r3, r7
 8008050:	460d      	mov	r5, r1
 8008052:	d9f4      	bls.n	800803e <_printf_i+0x112>
 8008054:	2b08      	cmp	r3, #8
 8008056:	d10b      	bne.n	8008070 <_printf_i+0x144>
 8008058:	6823      	ldr	r3, [r4, #0]
 800805a:	07df      	lsls	r7, r3, #31
 800805c:	d508      	bpl.n	8008070 <_printf_i+0x144>
 800805e:	6923      	ldr	r3, [r4, #16]
 8008060:	6861      	ldr	r1, [r4, #4]
 8008062:	4299      	cmp	r1, r3
 8008064:	bfde      	ittt	le
 8008066:	2330      	movle	r3, #48	@ 0x30
 8008068:	f806 3c01 	strble.w	r3, [r6, #-1]
 800806c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008070:	1b92      	subs	r2, r2, r6
 8008072:	6122      	str	r2, [r4, #16]
 8008074:	f8cd a000 	str.w	sl, [sp]
 8008078:	464b      	mov	r3, r9
 800807a:	aa03      	add	r2, sp, #12
 800807c:	4621      	mov	r1, r4
 800807e:	4640      	mov	r0, r8
 8008080:	f7ff fee6 	bl	8007e50 <_printf_common>
 8008084:	3001      	adds	r0, #1
 8008086:	d14a      	bne.n	800811e <_printf_i+0x1f2>
 8008088:	f04f 30ff 	mov.w	r0, #4294967295
 800808c:	b004      	add	sp, #16
 800808e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008092:	6823      	ldr	r3, [r4, #0]
 8008094:	f043 0320 	orr.w	r3, r3, #32
 8008098:	6023      	str	r3, [r4, #0]
 800809a:	4833      	ldr	r0, [pc, #204]	@ (8008168 <_printf_i+0x23c>)
 800809c:	2778      	movs	r7, #120	@ 0x78
 800809e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80080a2:	6823      	ldr	r3, [r4, #0]
 80080a4:	6831      	ldr	r1, [r6, #0]
 80080a6:	061f      	lsls	r7, r3, #24
 80080a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80080ac:	d402      	bmi.n	80080b4 <_printf_i+0x188>
 80080ae:	065f      	lsls	r7, r3, #25
 80080b0:	bf48      	it	mi
 80080b2:	b2ad      	uxthmi	r5, r5
 80080b4:	6031      	str	r1, [r6, #0]
 80080b6:	07d9      	lsls	r1, r3, #31
 80080b8:	bf44      	itt	mi
 80080ba:	f043 0320 	orrmi.w	r3, r3, #32
 80080be:	6023      	strmi	r3, [r4, #0]
 80080c0:	b11d      	cbz	r5, 80080ca <_printf_i+0x19e>
 80080c2:	2310      	movs	r3, #16
 80080c4:	e7ac      	b.n	8008020 <_printf_i+0xf4>
 80080c6:	4827      	ldr	r0, [pc, #156]	@ (8008164 <_printf_i+0x238>)
 80080c8:	e7e9      	b.n	800809e <_printf_i+0x172>
 80080ca:	6823      	ldr	r3, [r4, #0]
 80080cc:	f023 0320 	bic.w	r3, r3, #32
 80080d0:	6023      	str	r3, [r4, #0]
 80080d2:	e7f6      	b.n	80080c2 <_printf_i+0x196>
 80080d4:	4616      	mov	r6, r2
 80080d6:	e7bd      	b.n	8008054 <_printf_i+0x128>
 80080d8:	6833      	ldr	r3, [r6, #0]
 80080da:	6825      	ldr	r5, [r4, #0]
 80080dc:	6961      	ldr	r1, [r4, #20]
 80080de:	1d18      	adds	r0, r3, #4
 80080e0:	6030      	str	r0, [r6, #0]
 80080e2:	062e      	lsls	r6, r5, #24
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	d501      	bpl.n	80080ec <_printf_i+0x1c0>
 80080e8:	6019      	str	r1, [r3, #0]
 80080ea:	e002      	b.n	80080f2 <_printf_i+0x1c6>
 80080ec:	0668      	lsls	r0, r5, #25
 80080ee:	d5fb      	bpl.n	80080e8 <_printf_i+0x1bc>
 80080f0:	8019      	strh	r1, [r3, #0]
 80080f2:	2300      	movs	r3, #0
 80080f4:	6123      	str	r3, [r4, #16]
 80080f6:	4616      	mov	r6, r2
 80080f8:	e7bc      	b.n	8008074 <_printf_i+0x148>
 80080fa:	6833      	ldr	r3, [r6, #0]
 80080fc:	1d1a      	adds	r2, r3, #4
 80080fe:	6032      	str	r2, [r6, #0]
 8008100:	681e      	ldr	r6, [r3, #0]
 8008102:	6862      	ldr	r2, [r4, #4]
 8008104:	2100      	movs	r1, #0
 8008106:	4630      	mov	r0, r6
 8008108:	f7f8 f872 	bl	80001f0 <memchr>
 800810c:	b108      	cbz	r0, 8008112 <_printf_i+0x1e6>
 800810e:	1b80      	subs	r0, r0, r6
 8008110:	6060      	str	r0, [r4, #4]
 8008112:	6863      	ldr	r3, [r4, #4]
 8008114:	6123      	str	r3, [r4, #16]
 8008116:	2300      	movs	r3, #0
 8008118:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800811c:	e7aa      	b.n	8008074 <_printf_i+0x148>
 800811e:	6923      	ldr	r3, [r4, #16]
 8008120:	4632      	mov	r2, r6
 8008122:	4649      	mov	r1, r9
 8008124:	4640      	mov	r0, r8
 8008126:	47d0      	blx	sl
 8008128:	3001      	adds	r0, #1
 800812a:	d0ad      	beq.n	8008088 <_printf_i+0x15c>
 800812c:	6823      	ldr	r3, [r4, #0]
 800812e:	079b      	lsls	r3, r3, #30
 8008130:	d413      	bmi.n	800815a <_printf_i+0x22e>
 8008132:	68e0      	ldr	r0, [r4, #12]
 8008134:	9b03      	ldr	r3, [sp, #12]
 8008136:	4298      	cmp	r0, r3
 8008138:	bfb8      	it	lt
 800813a:	4618      	movlt	r0, r3
 800813c:	e7a6      	b.n	800808c <_printf_i+0x160>
 800813e:	2301      	movs	r3, #1
 8008140:	4632      	mov	r2, r6
 8008142:	4649      	mov	r1, r9
 8008144:	4640      	mov	r0, r8
 8008146:	47d0      	blx	sl
 8008148:	3001      	adds	r0, #1
 800814a:	d09d      	beq.n	8008088 <_printf_i+0x15c>
 800814c:	3501      	adds	r5, #1
 800814e:	68e3      	ldr	r3, [r4, #12]
 8008150:	9903      	ldr	r1, [sp, #12]
 8008152:	1a5b      	subs	r3, r3, r1
 8008154:	42ab      	cmp	r3, r5
 8008156:	dcf2      	bgt.n	800813e <_printf_i+0x212>
 8008158:	e7eb      	b.n	8008132 <_printf_i+0x206>
 800815a:	2500      	movs	r5, #0
 800815c:	f104 0619 	add.w	r6, r4, #25
 8008160:	e7f5      	b.n	800814e <_printf_i+0x222>
 8008162:	bf00      	nop
 8008164:	08008809 	.word	0x08008809
 8008168:	0800881a 	.word	0x0800881a

0800816c <__sflush_r>:
 800816c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008174:	0716      	lsls	r6, r2, #28
 8008176:	4605      	mov	r5, r0
 8008178:	460c      	mov	r4, r1
 800817a:	d454      	bmi.n	8008226 <__sflush_r+0xba>
 800817c:	684b      	ldr	r3, [r1, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	dc02      	bgt.n	8008188 <__sflush_r+0x1c>
 8008182:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008184:	2b00      	cmp	r3, #0
 8008186:	dd48      	ble.n	800821a <__sflush_r+0xae>
 8008188:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800818a:	2e00      	cmp	r6, #0
 800818c:	d045      	beq.n	800821a <__sflush_r+0xae>
 800818e:	2300      	movs	r3, #0
 8008190:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008194:	682f      	ldr	r7, [r5, #0]
 8008196:	6a21      	ldr	r1, [r4, #32]
 8008198:	602b      	str	r3, [r5, #0]
 800819a:	d030      	beq.n	80081fe <__sflush_r+0x92>
 800819c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800819e:	89a3      	ldrh	r3, [r4, #12]
 80081a0:	0759      	lsls	r1, r3, #29
 80081a2:	d505      	bpl.n	80081b0 <__sflush_r+0x44>
 80081a4:	6863      	ldr	r3, [r4, #4]
 80081a6:	1ad2      	subs	r2, r2, r3
 80081a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80081aa:	b10b      	cbz	r3, 80081b0 <__sflush_r+0x44>
 80081ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80081ae:	1ad2      	subs	r2, r2, r3
 80081b0:	2300      	movs	r3, #0
 80081b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80081b4:	6a21      	ldr	r1, [r4, #32]
 80081b6:	4628      	mov	r0, r5
 80081b8:	47b0      	blx	r6
 80081ba:	1c43      	adds	r3, r0, #1
 80081bc:	89a3      	ldrh	r3, [r4, #12]
 80081be:	d106      	bne.n	80081ce <__sflush_r+0x62>
 80081c0:	6829      	ldr	r1, [r5, #0]
 80081c2:	291d      	cmp	r1, #29
 80081c4:	d82b      	bhi.n	800821e <__sflush_r+0xb2>
 80081c6:	4a2a      	ldr	r2, [pc, #168]	@ (8008270 <__sflush_r+0x104>)
 80081c8:	410a      	asrs	r2, r1
 80081ca:	07d6      	lsls	r6, r2, #31
 80081cc:	d427      	bmi.n	800821e <__sflush_r+0xb2>
 80081ce:	2200      	movs	r2, #0
 80081d0:	6062      	str	r2, [r4, #4]
 80081d2:	04d9      	lsls	r1, r3, #19
 80081d4:	6922      	ldr	r2, [r4, #16]
 80081d6:	6022      	str	r2, [r4, #0]
 80081d8:	d504      	bpl.n	80081e4 <__sflush_r+0x78>
 80081da:	1c42      	adds	r2, r0, #1
 80081dc:	d101      	bne.n	80081e2 <__sflush_r+0x76>
 80081de:	682b      	ldr	r3, [r5, #0]
 80081e0:	b903      	cbnz	r3, 80081e4 <__sflush_r+0x78>
 80081e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80081e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081e6:	602f      	str	r7, [r5, #0]
 80081e8:	b1b9      	cbz	r1, 800821a <__sflush_r+0xae>
 80081ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081ee:	4299      	cmp	r1, r3
 80081f0:	d002      	beq.n	80081f8 <__sflush_r+0x8c>
 80081f2:	4628      	mov	r0, r5
 80081f4:	f7ff fbf2 	bl	80079dc <_free_r>
 80081f8:	2300      	movs	r3, #0
 80081fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80081fc:	e00d      	b.n	800821a <__sflush_r+0xae>
 80081fe:	2301      	movs	r3, #1
 8008200:	4628      	mov	r0, r5
 8008202:	47b0      	blx	r6
 8008204:	4602      	mov	r2, r0
 8008206:	1c50      	adds	r0, r2, #1
 8008208:	d1c9      	bne.n	800819e <__sflush_r+0x32>
 800820a:	682b      	ldr	r3, [r5, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d0c6      	beq.n	800819e <__sflush_r+0x32>
 8008210:	2b1d      	cmp	r3, #29
 8008212:	d001      	beq.n	8008218 <__sflush_r+0xac>
 8008214:	2b16      	cmp	r3, #22
 8008216:	d11e      	bne.n	8008256 <__sflush_r+0xea>
 8008218:	602f      	str	r7, [r5, #0]
 800821a:	2000      	movs	r0, #0
 800821c:	e022      	b.n	8008264 <__sflush_r+0xf8>
 800821e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008222:	b21b      	sxth	r3, r3
 8008224:	e01b      	b.n	800825e <__sflush_r+0xf2>
 8008226:	690f      	ldr	r7, [r1, #16]
 8008228:	2f00      	cmp	r7, #0
 800822a:	d0f6      	beq.n	800821a <__sflush_r+0xae>
 800822c:	0793      	lsls	r3, r2, #30
 800822e:	680e      	ldr	r6, [r1, #0]
 8008230:	bf08      	it	eq
 8008232:	694b      	ldreq	r3, [r1, #20]
 8008234:	600f      	str	r7, [r1, #0]
 8008236:	bf18      	it	ne
 8008238:	2300      	movne	r3, #0
 800823a:	eba6 0807 	sub.w	r8, r6, r7
 800823e:	608b      	str	r3, [r1, #8]
 8008240:	f1b8 0f00 	cmp.w	r8, #0
 8008244:	dde9      	ble.n	800821a <__sflush_r+0xae>
 8008246:	6a21      	ldr	r1, [r4, #32]
 8008248:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800824a:	4643      	mov	r3, r8
 800824c:	463a      	mov	r2, r7
 800824e:	4628      	mov	r0, r5
 8008250:	47b0      	blx	r6
 8008252:	2800      	cmp	r0, #0
 8008254:	dc08      	bgt.n	8008268 <__sflush_r+0xfc>
 8008256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800825a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800825e:	81a3      	strh	r3, [r4, #12]
 8008260:	f04f 30ff 	mov.w	r0, #4294967295
 8008264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008268:	4407      	add	r7, r0
 800826a:	eba8 0800 	sub.w	r8, r8, r0
 800826e:	e7e7      	b.n	8008240 <__sflush_r+0xd4>
 8008270:	dfbffffe 	.word	0xdfbffffe

08008274 <_fflush_r>:
 8008274:	b538      	push	{r3, r4, r5, lr}
 8008276:	690b      	ldr	r3, [r1, #16]
 8008278:	4605      	mov	r5, r0
 800827a:	460c      	mov	r4, r1
 800827c:	b913      	cbnz	r3, 8008284 <_fflush_r+0x10>
 800827e:	2500      	movs	r5, #0
 8008280:	4628      	mov	r0, r5
 8008282:	bd38      	pop	{r3, r4, r5, pc}
 8008284:	b118      	cbz	r0, 800828e <_fflush_r+0x1a>
 8008286:	6a03      	ldr	r3, [r0, #32]
 8008288:	b90b      	cbnz	r3, 800828e <_fflush_r+0x1a>
 800828a:	f7ff f9ad 	bl	80075e8 <__sinit>
 800828e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d0f3      	beq.n	800827e <_fflush_r+0xa>
 8008296:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008298:	07d0      	lsls	r0, r2, #31
 800829a:	d404      	bmi.n	80082a6 <_fflush_r+0x32>
 800829c:	0599      	lsls	r1, r3, #22
 800829e:	d402      	bmi.n	80082a6 <_fflush_r+0x32>
 80082a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082a2:	f7ff fb98 	bl	80079d6 <__retarget_lock_acquire_recursive>
 80082a6:	4628      	mov	r0, r5
 80082a8:	4621      	mov	r1, r4
 80082aa:	f7ff ff5f 	bl	800816c <__sflush_r>
 80082ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082b0:	07da      	lsls	r2, r3, #31
 80082b2:	4605      	mov	r5, r0
 80082b4:	d4e4      	bmi.n	8008280 <_fflush_r+0xc>
 80082b6:	89a3      	ldrh	r3, [r4, #12]
 80082b8:	059b      	lsls	r3, r3, #22
 80082ba:	d4e1      	bmi.n	8008280 <_fflush_r+0xc>
 80082bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082be:	f7ff fb8b 	bl	80079d8 <__retarget_lock_release_recursive>
 80082c2:	e7dd      	b.n	8008280 <_fflush_r+0xc>

080082c4 <__swhatbuf_r>:
 80082c4:	b570      	push	{r4, r5, r6, lr}
 80082c6:	460c      	mov	r4, r1
 80082c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082cc:	2900      	cmp	r1, #0
 80082ce:	b096      	sub	sp, #88	@ 0x58
 80082d0:	4615      	mov	r5, r2
 80082d2:	461e      	mov	r6, r3
 80082d4:	da0d      	bge.n	80082f2 <__swhatbuf_r+0x2e>
 80082d6:	89a3      	ldrh	r3, [r4, #12]
 80082d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80082dc:	f04f 0100 	mov.w	r1, #0
 80082e0:	bf14      	ite	ne
 80082e2:	2340      	movne	r3, #64	@ 0x40
 80082e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80082e8:	2000      	movs	r0, #0
 80082ea:	6031      	str	r1, [r6, #0]
 80082ec:	602b      	str	r3, [r5, #0]
 80082ee:	b016      	add	sp, #88	@ 0x58
 80082f0:	bd70      	pop	{r4, r5, r6, pc}
 80082f2:	466a      	mov	r2, sp
 80082f4:	f000 f848 	bl	8008388 <_fstat_r>
 80082f8:	2800      	cmp	r0, #0
 80082fa:	dbec      	blt.n	80082d6 <__swhatbuf_r+0x12>
 80082fc:	9901      	ldr	r1, [sp, #4]
 80082fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008302:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008306:	4259      	negs	r1, r3
 8008308:	4159      	adcs	r1, r3
 800830a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800830e:	e7eb      	b.n	80082e8 <__swhatbuf_r+0x24>

08008310 <__smakebuf_r>:
 8008310:	898b      	ldrh	r3, [r1, #12]
 8008312:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008314:	079d      	lsls	r5, r3, #30
 8008316:	4606      	mov	r6, r0
 8008318:	460c      	mov	r4, r1
 800831a:	d507      	bpl.n	800832c <__smakebuf_r+0x1c>
 800831c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008320:	6023      	str	r3, [r4, #0]
 8008322:	6123      	str	r3, [r4, #16]
 8008324:	2301      	movs	r3, #1
 8008326:	6163      	str	r3, [r4, #20]
 8008328:	b003      	add	sp, #12
 800832a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800832c:	ab01      	add	r3, sp, #4
 800832e:	466a      	mov	r2, sp
 8008330:	f7ff ffc8 	bl	80082c4 <__swhatbuf_r>
 8008334:	9f00      	ldr	r7, [sp, #0]
 8008336:	4605      	mov	r5, r0
 8008338:	4639      	mov	r1, r7
 800833a:	4630      	mov	r0, r6
 800833c:	f7ff fbba 	bl	8007ab4 <_malloc_r>
 8008340:	b948      	cbnz	r0, 8008356 <__smakebuf_r+0x46>
 8008342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008346:	059a      	lsls	r2, r3, #22
 8008348:	d4ee      	bmi.n	8008328 <__smakebuf_r+0x18>
 800834a:	f023 0303 	bic.w	r3, r3, #3
 800834e:	f043 0302 	orr.w	r3, r3, #2
 8008352:	81a3      	strh	r3, [r4, #12]
 8008354:	e7e2      	b.n	800831c <__smakebuf_r+0xc>
 8008356:	89a3      	ldrh	r3, [r4, #12]
 8008358:	6020      	str	r0, [r4, #0]
 800835a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800835e:	81a3      	strh	r3, [r4, #12]
 8008360:	9b01      	ldr	r3, [sp, #4]
 8008362:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008366:	b15b      	cbz	r3, 8008380 <__smakebuf_r+0x70>
 8008368:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800836c:	4630      	mov	r0, r6
 800836e:	f000 f81d 	bl	80083ac <_isatty_r>
 8008372:	b128      	cbz	r0, 8008380 <__smakebuf_r+0x70>
 8008374:	89a3      	ldrh	r3, [r4, #12]
 8008376:	f023 0303 	bic.w	r3, r3, #3
 800837a:	f043 0301 	orr.w	r3, r3, #1
 800837e:	81a3      	strh	r3, [r4, #12]
 8008380:	89a3      	ldrh	r3, [r4, #12]
 8008382:	431d      	orrs	r5, r3
 8008384:	81a5      	strh	r5, [r4, #12]
 8008386:	e7cf      	b.n	8008328 <__smakebuf_r+0x18>

08008388 <_fstat_r>:
 8008388:	b538      	push	{r3, r4, r5, lr}
 800838a:	4d07      	ldr	r5, [pc, #28]	@ (80083a8 <_fstat_r+0x20>)
 800838c:	2300      	movs	r3, #0
 800838e:	4604      	mov	r4, r0
 8008390:	4608      	mov	r0, r1
 8008392:	4611      	mov	r1, r2
 8008394:	602b      	str	r3, [r5, #0]
 8008396:	f7f8 fd5c 	bl	8000e52 <_fstat>
 800839a:	1c43      	adds	r3, r0, #1
 800839c:	d102      	bne.n	80083a4 <_fstat_r+0x1c>
 800839e:	682b      	ldr	r3, [r5, #0]
 80083a0:	b103      	cbz	r3, 80083a4 <_fstat_r+0x1c>
 80083a2:	6023      	str	r3, [r4, #0]
 80083a4:	bd38      	pop	{r3, r4, r5, pc}
 80083a6:	bf00      	nop
 80083a8:	20001378 	.word	0x20001378

080083ac <_isatty_r>:
 80083ac:	b538      	push	{r3, r4, r5, lr}
 80083ae:	4d06      	ldr	r5, [pc, #24]	@ (80083c8 <_isatty_r+0x1c>)
 80083b0:	2300      	movs	r3, #0
 80083b2:	4604      	mov	r4, r0
 80083b4:	4608      	mov	r0, r1
 80083b6:	602b      	str	r3, [r5, #0]
 80083b8:	f7f8 fd5b 	bl	8000e72 <_isatty>
 80083bc:	1c43      	adds	r3, r0, #1
 80083be:	d102      	bne.n	80083c6 <_isatty_r+0x1a>
 80083c0:	682b      	ldr	r3, [r5, #0]
 80083c2:	b103      	cbz	r3, 80083c6 <_isatty_r+0x1a>
 80083c4:	6023      	str	r3, [r4, #0]
 80083c6:	bd38      	pop	{r3, r4, r5, pc}
 80083c8:	20001378 	.word	0x20001378

080083cc <_sbrk_r>:
 80083cc:	b538      	push	{r3, r4, r5, lr}
 80083ce:	4d06      	ldr	r5, [pc, #24]	@ (80083e8 <_sbrk_r+0x1c>)
 80083d0:	2300      	movs	r3, #0
 80083d2:	4604      	mov	r4, r0
 80083d4:	4608      	mov	r0, r1
 80083d6:	602b      	str	r3, [r5, #0]
 80083d8:	f7f8 fd64 	bl	8000ea4 <_sbrk>
 80083dc:	1c43      	adds	r3, r0, #1
 80083de:	d102      	bne.n	80083e6 <_sbrk_r+0x1a>
 80083e0:	682b      	ldr	r3, [r5, #0]
 80083e2:	b103      	cbz	r3, 80083e6 <_sbrk_r+0x1a>
 80083e4:	6023      	str	r3, [r4, #0]
 80083e6:	bd38      	pop	{r3, r4, r5, pc}
 80083e8:	20001378 	.word	0x20001378

080083ec <_init>:
 80083ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ee:	bf00      	nop
 80083f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083f2:	bc08      	pop	{r3}
 80083f4:	469e      	mov	lr, r3
 80083f6:	4770      	bx	lr

080083f8 <_fini>:
 80083f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fa:	bf00      	nop
 80083fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083fe:	bc08      	pop	{r3}
 8008400:	469e      	mov	lr, r3
 8008402:	4770      	bx	lr
